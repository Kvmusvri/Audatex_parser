/**
 * JavaScript –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 */

class SecurityMonitor {
    constructor() {
        this.updateInterval = 60000; // 1 –º–∏–Ω—É—Ç–∞ –≤–º–µ—Å—Ç–æ 30 —Å–µ–∫—É–Ω–¥
        this.lastUpdate = 0;
        this.isUpdating = false;
        this.init();
    }

    init() {
        console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SecurityMonitor...');
        this.loadSecurityStatus();
        console.log('üîç –í—ã–∑—ã–≤–∞–µ–º loadAlerts()...');
        this.loadAlerts(); // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∞–ª–µ—Ä—Ç–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        this.setupEventListeners();
        this.startAutoUpdate();
        console.log('üîç SecurityMonitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è IP
        document.getElementById('ban-ip-btn').addEventListener('click', () => this.banIP());
        document.getElementById('unban-ip-btn').addEventListener('click', () => this.unbanIP());
        
        // –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        document.getElementById('export-btn').addEventListener('click', () => this.exportData());
        
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏
        document.getElementById('create-test-events-btn').addEventListener('click', () => this.createTestEvents());
        document.getElementById('create-demo-alerts-btn').addEventListener('click', () => this.createDemoAlerts());
        document.getElementById('generate-alerts-btn').addEventListener('click', () => this.generateAlerts());
        document.getElementById('clear-events-btn').addEventListener('click', () => this.clearAllEvents());
        document.getElementById('clear-alerts-btn').addEventListener('click', () => this.clearAllAlerts());
    }

    async loadSecurityStatus() {
        if (this.isUpdating) return;
        
        try {
            this.isUpdating = true;
            const response = await fetch('/security/status');
            
            if (response.status === 401) {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
                window.location.href = '/auth/login';
                return;
            }
            
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞');
            
            const data = await response.json();
            this.updateStatusCards(data);
            this.updateStatistics(data);
            this.lastUpdate = Date.now();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:', error);
        } finally {
            this.isUpdating = false;
        }
    }

    updateStatusCards(data) {
        // –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        const overallStatus = document.getElementById('overall-status');
        const riskLevel = data.overall_risk_level || 'UNKNOWN';
        overallStatus.textContent = `–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: ${this.getRiskLevelText(riskLevel)}`;
        overallStatus.className = `status-value ${this.getRiskClass(riskLevel)}`;

        // Rate Limiting
        const rateLimitStatus = document.getElementById('rate-limit-status');
        const rateLimitStats = data.rate_limiting?.statistics || {};
        rateLimitStatus.textContent = `–ê–∫—Ç–∏–≤–Ω–æ | ${rateLimitStats.blocked_ips_count || 0} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö IP`;

        // DDoS –ó–∞—â–∏—Ç–∞
        const ddosStatus = document.getElementById('ddos-status');
        const ddosStats = data.ddos_protection?.statistics || {};
        ddosStatus.textContent = `–ê–∫—Ç–∏–≤–Ω–æ | ${ddosStats.blocked_ips_count || 0} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö IP`;

        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        const monitoringStatus = document.getElementById('monitoring-status');
        const monitoringStats = data.security_monitoring?.statistics || {};
        monitoringStatus.textContent = `–ê–∫—Ç–∏–≤–Ω–æ | ${monitoringStats.total_events || 0} —Å–æ–±—ã—Ç–∏–π`;
    }

    updateStatistics(data) {
        const stats = data.security_monitoring?.statistics || {};
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        document.getElementById('total-events').textContent = stats.total_events || 0;
        document.getElementById('blocked-ips').textContent = stats.blocked_ips || 0;
        document.getElementById('high-risk-events').textContent = stats.high_risk_events || 0;
        document.getElementById('critical-events').textContent = stats.critical_events || 0;
    }

    getRiskLevelText(level) {
        const levels = {
            'SAFE': '–ë–µ–∑–æ–ø–∞—Å–Ω–æ',
            'LOW': '–ù–∏–∑–∫–∏–π',
            'MEDIUM': '–°—Ä–µ–¥–Ω–∏–π',
            'HIGH': '–í—ã—Å–æ–∫–∏–π',
            'CRITICAL': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π'
        };
        return levels[level] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }

    getRiskClass(level) {
        const classes = {
            'SAFE': 'safe',
            'LOW': 'safe',
            'MEDIUM': 'warning',
            'HIGH': 'warning',
            'CRITICAL': 'danger'
        };
        return classes[level] || '';
    }

    async loadAlerts() {
        try {
            console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–ª–µ—Ä—Ç—ã...');
            const response = await fetch('/security/alerts?limit=5'); // –£–º–µ–Ω—å—à–∏–ª –ª–∏–º–∏—Ç
            
            console.log('üîç –û—Ç–≤–µ—Ç –æ—Ç /security/alerts:', response.status, response.statusText);
            console.log('üîç Headers:', Object.fromEntries(response.headers.entries()));
            
            if (response.status === 401) {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
                console.log('üîç 401 - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω');
                window.location.href = '/auth/login';
                return;
            }
            
            if (!response.ok) {
                console.error('üîç Response not ok:', response.status, response.statusText);
                throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤');
            }
            
            const text = await response.text();
            console.log('üîç Raw response text:', text);
            
            let data;
            try {
                data = JSON.parse(text);
                console.log('üîç Parsed JSON data:', data);
            } catch (parseError) {
                console.error('üîç JSON parse error:', parseError);
                throw new Error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON');
            }
            
            this.updateAlerts(data.alerts || []);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤:', error);
            const container = document.getElementById('alerts-container');
            if (container) {
                container.innerHTML = `<div class="empty-message">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: ${error.message}</div>`;
            }
        }
    }

    updateAlerts(alerts) {
        console.log('üîç –û–±–Ω–æ–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã:', alerts);
        const container = document.getElementById('alerts-container');
        
        if (!container) {
            console.error('üîç –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä alerts-container –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }
        
        if (alerts.length === 0) {
            console.log('üîç –ù–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            container.innerHTML = '<div class="empty-message">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤</div>';
            return;
        }

        console.log('üîç –û—Ç–æ–±—Ä–∞–∂–∞–µ–º', alerts.length, '–∞–ª–µ—Ä—Ç–æ–≤');
        const alertsHTML = alerts.map(alert => `
            <div class="alert-item">
                <div class="alert-header">
                    <span class="alert-level ${alert.level.toLowerCase()}">${alert.level}</span>
                    <span class="alert-time">${this.formatTime(alert.timestamp)}</span>
                </div>
                <div class="alert-message">${alert.message}</div>
                <div class="alert-details">
                    IP: ${alert.ip} | –°–æ–±—ã—Ç–∏–π: ${alert.events_count}
                </div>
            </div>
        `).join('');

        container.innerHTML = alertsHTML;
    }

    formatTime(timestamp) {
        const date = new Date(timestamp);
        return date.toLocaleString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    async banIP() {
        const ip = document.getElementById('ip-input').value.trim();
        const duration = parseInt(document.getElementById('ban-duration').value) || 3600;
        
        if (!ip) {
            this.showIPResult('–í–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å', 'error');
            return;
        }

        try {
            const response = await fetch(`/security/ban/${ip}?duration=${duration}`, {
                method: 'POST'
            });
            
            if (response.status === 401) {
                window.location.href = '/auth/login';
                return;
            }
            
            const data = await response.json();
            
            if (response.ok) {
                this.showIPResult(data.message, 'success');
                document.getElementById('ip-input').value = '';
                this.loadSecurityStatus();
            } else {
                this.showIPResult(data.detail || '–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏', 'error');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP:', error);
            this.showIPResult('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 'error');
        }
    }

    async unbanIP() {
        const ip = document.getElementById('ip-input').value.trim();
        
        if (!ip) {
            this.showIPResult('–í–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å', 'error');
            return;
        }

        try {
            const response = await fetch(`/security/unban/${ip}`, {
                method: 'POST'
            });
            
            if (response.status === 401) {
                window.location.href = '/auth/login';
                return;
            }
            
            const data = await response.json();
            
            if (response.ok) {
                this.showIPResult(data.message, 'success');
                document.getElementById('ip-input').value = '';
                this.loadSecurityStatus();
            } else {
                this.showIPResult(data.detail || '–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏', 'error');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP:', error);
            this.showIPResult('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 'error');
        }
    }

    showIPResult(message, type) {
        const resultDiv = document.getElementById('ip-result');
        resultDiv.textContent = message;
        resultDiv.className = `ip-result ${type}`;
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            resultDiv.textContent = '';
            resultDiv.className = 'ip-result';
        }, 5000);
    }

    async exportData() {
        try {
            const response = await fetch('/security/export?format_type=json');
            
            if (response.status === 401) {
                window.location.href = '/auth/login';
                return;
            }
            
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞');
            
            const data = await response.json();
            const exportResult = document.getElementById('export-result');
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º JSON –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const formattedData = JSON.stringify(JSON.parse(data.export_data), null, 2);
            exportResult.textContent = formattedData;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            const downloadBtn = document.createElement('button');
            downloadBtn.textContent = '–°–∫–∞—á–∞—Ç—å JSON';
            downloadBtn.className = 'control-btn refresh';
            downloadBtn.style.marginTop = '10px';
            downloadBtn.onclick = () => this.downloadJSON(formattedData);
            
            exportResult.appendChild(downloadBtn);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
            document.getElementById('export-result').textContent = '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö';
        }
    }

    async createTestEvents() {
        try {
            const response = await fetch('/security/create-test-events', {
                method: 'POST'
            });
            
            if (response.status === 401) {
                window.location.href = '/auth/login';
                return;
            }
            
            const data = await response.json();
            
            if (response.ok) {
                this.showEventsResult(data.message, 'success');
                this.loadSecurityStatus();
                this.loadAlerts();
            } else {
                this.showEventsResult(data.detail || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π', 'error');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π:', error);
            this.showEventsResult('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 'error');
        }
    }

    async createDemoAlerts() {
        try {
            const response = await fetch('/security/create-demo-alerts', {
                method: 'POST'
            });
            
            if (response.status === 401) {
                window.location.href = '/auth/login';
                return;
            }
            
            const data = await response.json();
            
            if (response.ok) {
                this.showEventsResult(data.message, 'success');
                this.loadAlerts();
            } else {
                this.showEventsResult(data.detail || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤', 'error');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤:', error);
            this.showEventsResult('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 'error');
        }
    }

    async generateAlerts() {
        try {
            const response = await fetch('/security/generate-alerts', {
                method: 'POST'
            });
            
            if (response.status === 401) {
                window.location.href = '/auth/login';
                return;
            }
            
            const data = await response.json();
            
            if (response.ok) {
                this.showEventsResult(data.message, 'success');
                this.loadAlerts();
            } else {
                this.showEventsResult(data.detail || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤', 'error');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤:', error);
            this.showEventsResult('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 'error');
        }
    }

    async clearAllEvents() {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –í–°–ï —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
            return;
        }

        try {
            const response = await fetch('/security/clear-events', {
                method: 'POST'
            });
            
            if (response.status === 401) {
                window.location.href = '/auth/login';
                return;
            }
            
            const data = await response.json();
            
            if (response.ok) {
                this.showEventsResult(data.message, 'success');
                this.loadSecurityStatus();
                this.loadAlerts();
            } else {
                this.showEventsResult(data.detail || '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π', 'error');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π:', error);
            this.showEventsResult('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 'error');
        }
    }

    async clearAllAlerts() {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –í–°–ï –∞–ª–µ—Ä—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏?')) {
            return;
        }

        try {
            const response = await fetch('/security/clear-alerts', {
                method: 'POST'
            });
            
            if (response.status === 401) {
                window.location.href = '/auth/login';
                return;
            }
            
            const data = await response.json();
            
            if (response.ok) {
                this.showEventsResult(data.message, 'success');
                this.loadAlerts();
            } else {
                this.showEventsResult(data.detail || '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤', 'error');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤:', error);
            this.showEventsResult('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 'error');
        }
    }

    showEventsResult(message, type) {
        const resultDiv = document.getElementById('events-result');
        resultDiv.textContent = message;
        resultDiv.className = `events-result ${type}`;
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            resultDiv.textContent = '';
            resultDiv.className = 'events-result';
        }, 5000);
    }

    downloadJSON(data) {
        const blob = new Blob([data], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `security_export_${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    startAutoUpdate() {
        setInterval(() => {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
            if (Date.now() - this.lastUpdate > this.updateInterval) {
                this.loadSecurityStatus();
                this.loadAlerts();
            }
        }, this.updateInterval);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    new SecurityMonitor();
}); 