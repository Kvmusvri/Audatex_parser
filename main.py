import asyncio
import uvicorn
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request, Form
from fastapi.responses import HTMLResponse, JSONResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from core.parser.parser import login_audatex, terminate_all_processes_and_restart
import json
import os
from datetime import datetime
import logging
from core.database.models import ParserCarDetail, ParserCarDetailGroupZone, ParserCarRequestStatus, async_session, get_moscow_time
from pydantic import BaseModel
from typing import List
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.sql import text
import re
from core.database.requests import (
    save_parser_data_to_db,
    update_json_with_claim_number,
    save_updated_json_to_file,
)
from core.parser.output_manager import restore_started_at_from_db, restore_last_updated_from_db, restore_completed_at_from_db
from core.queue.api_endpoints import router as queue_router
from core.queue.redis_manager import redis_manager

import time
import concurrent.futures
import threading
import psutil

# –û—Ç–∫–ª—é—á–∞–µ–º retry –ª–æ–≥–∏–∫—É urllib3 –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è WARNING —Å–æ–æ–±—â–µ–Ω–∏–π
import urllib3
urllib3.disable_warnings()
logging.getLogger("urllib3").setLevel(logging.ERROR)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞
parser_running = False
parser_task = None
parser_start_time = None


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # Startup
    try:
        from core.database.models import start_db
        await start_db()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    try:
        if redis_manager.test_connection():
            logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω")
        else:
            logger.warning("‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—á–µ—Ä–µ–¥—å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –ø–∞–º—è—Ç–∏")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
    
    yield
    
    # Shutdown
    try:
        from core.database.models import close_db
        await close_db()
        logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î –∑–∞–∫—Ä—ã—Ç—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: {e}")
    
    try:
        redis_manager.close()
        logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –∑–∞–∫—Ä—ã—Ç–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è Redis: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(lifespan=lifespan)
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –æ—á–µ—Ä–µ–¥–∏
app.include_router(queue_router)

# –ú–æ–¥–µ–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω–æ–≥–æ JSON
class SearchItem(BaseModel):
    requestId: int
    vin: str

class SearchRequest(BaseModel):
    login: str
    password: str
    items: List[SearchItem]
    svg_collection: bool = True

def normalize_paths(record: dict, folder_name: str) -> dict:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º, –¥–æ–±–∞–≤–ª—è—è claim_number –∏ vin, –∏—Å–ø—Ä–∞–≤–ª—è—è —Å–ª–µ—à–∏"""
    if record.get("main_screenshot_path"):
        record["main_screenshot_path"] = fix_path(record["main_screenshot_path"], folder_name)
    if record.get("main_svg_path"):
        record["main_svg_path"] = fix_path(record["main_svg_path"], folder_name)
    if record.get("all_svgs_zip"):
        record["all_svgs_zip"] = fix_path(record["all_svgs_zip"], folder_name)

    for zone in record.get("zone_data", []):
        if zone.get("screenshot_path"):
            zone["screenshot_path"] = fix_path(zone["screenshot_path"], folder_name)
        if zone.get("svg_path"):
            zone["svg_path"] = fix_path(zone["svg_path"], folder_name)

        for detail in zone.get("details", []):
            if detail.get("svg_path"):
                detail["svg_path"] = fix_path(detail["svg_path"], folder_name)

        for pictogram in zone.get("pictograms", []):
            for work in pictogram.get("works", []):
                if work.get("svg_path"):
                    work["svg_path"] = fix_path(work["svg_path"], folder_name)

    return record


async def process_parser_result_data(claim_number: str, vin_value: str, parser_result: dict, started_at=None, completed_at=None) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–∞—Ä—Å–µ—Ä–∞: –∏—â–µ—Ç JSON —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î
    
    Args:
        claim_number: –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
        vin_value: VIN –Ω–æ–º–µ—Ä
        parser_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–µ—Ä–∞
        started_at: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
        completed_at: –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    
    Returns:
        bool: True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        if "error" in parser_result:
            logger.error(f"‚ùå –ü–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {parser_result['error']}")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–∞—Ä—Å–µ—Ä–∞
        extracted_claim_number = parser_result.get("claim_number", claim_number)
        extracted_vin_value = parser_result.get("vin_value", vin_value)
        
        # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤ —Ç–∞–±—É–ª—è—Ü–∏–∏
        clean_claim_number = extracted_claim_number.strip() if extracted_claim_number else ""
        clean_vin_value = extracted_vin_value.strip() if extracted_vin_value else ""
        
        logger.info(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: claim_number='{extracted_claim_number}' -> '{clean_claim_number}', vin='{extracted_vin_value}' -> '{clean_vin_value}'")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–∞–ø–∫–∏
        folder_name = f"{clean_claim_number}_{clean_vin_value}"
        folder_path = os.path.join("static", "data", folder_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        if not os.path.isdir(folder_path):
            logger.error(f"–ü–∞–ø–∫–∞ {folder_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞")
            return False
        
        # –ò—â–µ–º JSON —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
        json_files = [f for f in os.listdir(folder_path) if f.endswith(".json")]
        if not json_files:
            logger.error(f"JSON-—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {folder_path}")
            return False
        
        # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π JSON —Ñ–∞–π–ª
        latest_json = max(json_files, key=lambda f: os.path.getctime(os.path.join(folder_path, f)))
        file_path = os.path.join(folder_path, latest_json)
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω JSON —Ñ–∞–π–ª: {file_path}")
        
        logger.info(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON —Ñ–∞–π–ª: {file_path}")
        
        # –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
        with open(file_path, 'r', encoding='utf-8') as f:
            json_data = json.load(f)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º JSON —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º claim_number
        updated_json = update_json_with_claim_number(json_data, clean_claim_number)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JSON –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
        save_success = await save_updated_json_to_file(updated_json, file_path)
        if not save_success:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JSON: {file_path}")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
        db_success = await save_parser_data_to_db(updated_json, clean_claim_number, clean_vin_value, is_success=True, started_at=started_at, completed_at=completed_at)
        if not db_success:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î: {clean_claim_number}_{clean_vin_value}")
            return False
        
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {clean_claim_number}_{clean_vin_value}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def fix_path(path: str, folder_name: str) -> str:
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º, –¥–æ–±–∞–≤–ª—è—è folder_name"""
    if not path:
        return ""
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–µ—à–∏ –≤ –Ω–∞—á–∞–ª–µ
    path = path.lstrip("/")
    
    # –ï—Å–ª–∏ –ø—É—Ç—å —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç folder_name, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if folder_name in path:
        return "/" + path
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å —Å static/
    if path.startswith("static/"):
        # –£–±–∏—Ä–∞–µ–º "static/" –∏–∑ –Ω–∞—á–∞–ª–∞
        path_without_static = path[7:]  # len("static/") = 7
        
        # –ï—Å–ª–∏ –ø—É—Ç—å —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç screenshots/ –∏–ª–∏ svgs/, –¥–æ–±–∞–≤–ª—è–µ–º folder_name –ø–æ—Å–ª–µ –Ω–∏—Ö
        if path_without_static.startswith("screenshots/"):
            return f"/static/screenshots/{folder_name}/{path_without_static[12:]}"  # len("screenshots/") = 12
        elif path_without_static.startswith("svgs/"):
            return f"/static/svgs/{folder_name}/{path_without_static[5:]}"  # len("svgs/") = 5
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–∞–ø–æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º folder_name –ø–æ—Å–ª–µ static/
            return f"/static/{folder_name}/{path_without_static}"
    
    # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å static/, –¥–æ–±–∞–≤–ª—è–µ–º static/ –∏ folder_name
    return f"/static/{folder_name}/{path}"


def clean_json_data(data):
    """–û—á–∏—â–∞–µ—Ç JSON –¥–∞–Ω–Ω—ã–µ –æ—Ç Undefined –ø–æ–ª–µ–π"""
    if isinstance(data, dict):
        cleaned = {}
        for key, value in data.items():
            if value is not None and str(value) != "Undefined":
                cleaned[key] = clean_json_data(value)
        return cleaned
    elif isinstance(data, list):
        return [clean_json_data(item) for item in data if item is not None and str(item) != "Undefined"]
    else:
        return data if data is not None and str(data) != "Undefined" else ""


@app.get("/", response_class=HTMLResponse)
async def index(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})


@app.get("/queue", response_class=HTMLResponse)
async def queue_monitor(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—á–µ—Ä–µ–¥–∏"""
    return templates.TemplateResponse("queue_monitor.html", {"request": request})


@app.get("/history", response_class=HTMLResponse)
async def history(request: Request):
    try:
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ static/data
        data_dir = "static/data"
        if not os.path.exists(data_dir):
            return templates.TemplateResponse("history.html", {
                "request": request, 
                "records": []
            })
        
        formatted_records = []
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–∞–ø–∫–∞–º –≤ static/data
        for folder_name in os.listdir(data_dir):
            folder_path = os.path.join(data_dir, folder_name)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–∞–ø–∫–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç JSON —Ñ–∞–π–ª—ã
            if not os.path.isdir(folder_path):
                continue
                
            json_files = [f for f in os.listdir(folder_path) if f.endswith(".json")]
            if not json_files:
                continue
            
            # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π JSON —Ñ–∞–π–ª
            latest_json = max(json_files, key=lambda f: os.path.getctime(os.path.join(folder_path, f)))
            json_path = os.path.join(folder_path, latest_json)
            
            try:
                # –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
                with open(json_path, 'r', encoding='utf-8') as f:
                    json_data = json.load(f)
                
                # –û—á–∏—â–∞–µ–º JSON –æ—Ç Undefined –ø–æ–ª–µ–π
                json_data = clean_json_data(json_data)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON
                claim_number = json_data.get("claim_number", "")
                vin = json_data.get("vin_value", "")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º vin_value –≤–º–µ—Å—Ç–æ vin
                
                # –ï—Å–ª–∏ –Ω–µ—Ç claim_number –≤ JSON, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏
                if not claim_number and "_" in folder_name:
                    claim_number = folder_name.split("_")[0]
                
                # –ï—Å–ª–∏ –Ω–µ—Ç vin –≤ JSON, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏
                if not vin and "_" in folder_name:
                    vin = folder_name.split("_")[1] if len(folder_name.split("_")) > 1 else ""
                
                # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                metadata = json_data.get("metadata", {})
                started_at = metadata.get("started_at", "") if metadata else ""
                completed_at = metadata.get("completed_at", "") if metadata else ""
                last_updated = metadata.get("last_updated", "") if metadata else ""
                json_completed = metadata.get("json_completed", False) if metadata else False
                db_saved = metadata.get("db_saved", False) if metadata else False
                options_success = metadata.get("options_success", False) if metadata else False
                total_zones = len(json_data.get("zone_data", [])) if json_data else 0
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º started_at –∏–∑ –ë–î –µ—Å–ª–∏ –æ–Ω null –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                should_restore_started = (started_at is None or started_at == "null" or started_at == "None" or started_at == "")
                
                # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –≤—Ä–µ–º—è –µ—Å—Ç—å, –Ω–æ –æ–Ω–æ –Ω–∞ 3 —á–∞—Å–∞ –º–µ–Ω—å—à–µ (–ø—Ä–∏–∑–Ω–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
                if not should_restore_started and started_at:
                    try:
                        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ JSON
                        json_time = datetime.strptime(started_at, "%Y-%m-%d %H:%M:%S")
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ (–ø—Ä–∏–∑–Ω–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
                        current_time = datetime.now()
                        time_diff = (current_time - json_time).total_seconds()
                        if time_diff > 86400:  # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤
                            should_restore_started = True
                            logger.info(f"üîç –í—Ä–µ–º—è –≤ JSON —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ –¥–ª—è {claim_number}_{vin}: {started_at}")
                    except:
                        should_restore_started = True
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º completed_at –∏–∑ –ë–î –µ—Å–ª–∏ –æ–Ω null
                should_restore_completed = (completed_at is None or completed_at == "null" or completed_at == "None" or completed_at == "")
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º last_updated –∏–∑ –ë–î –µ—Å–ª–∏ –æ–Ω null
                should_restore_last_updated = (last_updated is None or last_updated == "null" or last_updated == "None" or last_updated == "")
                
                if (should_restore_started or should_restore_completed or should_restore_last_updated) and claim_number and vin:
                    try:
                        if should_restore_started:
                            logger.info(f"üîç –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º started_at –∏–∑ –ë–î –¥–ª—è {claim_number}_{vin}")
                            await restore_started_at_from_db(json_path, claim_number, vin)
                        
                        if should_restore_completed:
                            logger.info(f"üîç –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º completed_at –∏–∑ –ë–î –¥–ª—è {claim_number}_{vin}")
                            await restore_completed_at_from_db(json_path, claim_number, vin)
                        
                        if should_restore_last_updated:
                            logger.info(f"üîç –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º last_updated –∏–∑ –ë–î –¥–ª—è {claim_number}_{vin}")
                            await restore_last_updated_from_db(json_path, claim_number, vin)
                        
                        # –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º JSON –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                        with open(json_path, 'r', encoding='utf-8') as f:
                            json_data = json.load(f)
                        metadata = json_data.get("metadata", {})
                        started_at = metadata.get("started_at", "") if metadata else ""
                        completed_at = metadata.get("completed_at", "") if metadata else ""
                        last_updated = metadata.get("last_updated", "") if metadata else ""
                        logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ started_at: {started_at}")
                        logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ completed_at: {completed_at}")
                        logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ last_updated: {last_updated}")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è {claim_number}_{vin}: {e}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ —Ñ–ª–∞–≥–∞–º –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                logger.info(f"üîç –°—Ç–∞—Ç—É—Å –¥–ª—è {claim_number}_{vin}: json_completed={json_completed}, db_saved={db_saved}, options_success={options_success}, total_zones={total_zones}")
                logger.info(f"üîç –î–µ—Ç–∞–ª–∏ –¥–ª—è {claim_number}_{vin}: started_at='{started_at}', completed_at='{completed_at}', last_updated='{last_updated}'")
                
                # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                if json_completed and db_saved and total_zones > 0:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–æ–Ω—ã –∏ JSON –∑–∞–≤–µ—Ä—à–µ–Ω, —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –¥–∞–∂–µ –±–µ–∑ options_success
                    status = "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"
                elif not json_completed:
                    status = "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
                elif json_completed and total_zones == 0:
                    # –ï—Å–ª–∏ JSON –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –∑–æ–Ω –Ω–µ—Ç - —ç—Ç–æ –æ—à–∏–±–∫–∞
                    status = "–û—à–∏–±–∫–∞"
                elif json_completed and not db_saved:
                    # –ï—Å–ª–∏ JSON –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –ë–î –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ - —ç—Ç–æ –æ—à–∏–±–∫–∞
                    status = "–û—à–∏–±–∫–∞"
                else:
                    # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º
                    status = "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                started_time = "‚Äî"
                completed_time = "‚Äî"
                duration = ""
                
                if started_at and started_at != "null" and started_at != "None":
                    try:
                        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ "2025-07-27 17:30:00"
                        start_dt = datetime.strptime(started_at, "%Y-%m-%d %H:%M:%S")
                        started_time = start_dt.strftime("%H:%M:%S")
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º completed_at –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –Ω–µ null, –∏–Ω–∞—á–µ last_updated
                        end_time_str = completed_at if completed_at and completed_at != "null" and completed_at != "None" else last_updated
                        if end_time_str and end_time_str != "null" and end_time_str != "None":
                            end_dt = datetime.strptime(end_time_str, "%Y-%m-%d %H:%M:%S")
                            completed_time = end_dt.strftime("%H:%M:%S")
                            
                            # –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                            duration_seconds = (end_dt - start_dt).total_seconds()
                            duration = f"{int(duration_seconds // 60)}–º {int(duration_seconds % 60)}—Å"
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è {claim_number}_{vin}: {e}")
                        pass
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑ –≤—Ä–µ–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                created_date = datetime.fromtimestamp(os.path.getctime(json_path)).strftime("%d.%m.%Y")
                
                # –ü–æ–ª—É—á–∞–µ–º vin_status –∏–∑ JSON
                vin_status = json_data.get("vin_status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                
                formatted_records.append({
                    "request_id": claim_number,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º claim_number –∫–∞–∫ request_id –¥–ª—è URL
                    "claim_number": claim_number,  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
                    "vin": vin,
                    "vin_status": vin_status,
                    "status": status,
                    "started_time": started_time,
                    "completed_time": completed_time,
                    "duration": duration,
                    "created_date": created_date,
                    "folder_name": folder_name,
                    "json_completed": json_completed,
                    "db_saved": db_saved,
                    "options_success": options_success,
                    "total_zones": total_zones
                })
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞ {json_path}: {e}")
                continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        formatted_records.sort(key=lambda x: x["created_date"], reverse=True)
        
        return templates.TemplateResponse("history.html", {
            "request": request, 
            "records": formatted_records
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return templates.TemplateResponse("error.html", {
            "request": request, 
            "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}"
        })


@app.get("/history_detail/{folder_name}", response_class=HTMLResponse)
async def history_detail(request: Request, folder_name: str):
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–∞–ø–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
        folder_path = os.path.join("static", "data", folder_name)
        
        if not os.path.exists(folder_path):
            return templates.TemplateResponse("error.html", {
                "request": request, 
                "error": f"–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–∞–ø–∫–∞: {folder_name}"
            })
        
        # –ò—â–µ–º JSON —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
        json_files = [f for f in os.listdir(folder_path) if f.endswith(".json")]
        if not json_files:
            return templates.TemplateResponse("error.html", {
                "request": request, 
                "error": f"JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ: {folder_name}"
            })
        
        # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π JSON —Ñ–∞–π–ª
        latest_json = max(json_files, key=lambda f: os.path.getctime(os.path.join(folder_path, f)))
        json_path = os.path.join(folder_path, latest_json)
        
        # –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
        with open(json_path, 'r', encoding='utf-8') as f:
            json_data = json.load(f)
        
        # –û—á–∏—â–∞–µ–º JSON –æ—Ç Undefined –ø–æ–ª–µ–π
        json_data = clean_json_data(json_data)
        
        logger.info(f"JSON –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ö–ª—é—á–∏: {list(json_data.keys())}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON
        claim_number = json_data.get("claim_number", "")
        vin_value = json_data.get("vin_value", "")
        vin_status = json_data.get("vin_status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ JSON, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏
        if not claim_number and "_" in folder_name:
            claim_number = folder_name.split("_")[0]
        if not vin_value and "_" in folder_name:
            vin_value = folder_name.split("_")[1] if len(folder_name.split("_")) > 1 else ""
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)
        metadata = json_data.get("metadata", {})
        started_at = metadata.get("started_at", "") if metadata else ""
        completed_at = metadata.get("completed_at", "") if metadata else ""
        last_updated = metadata.get("last_updated", "") if metadata else ""
        json_completed = metadata.get("json_completed", False) if metadata else False
        db_saved = metadata.get("db_saved", False) if metadata else False
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º started_at –∏–∑ –ë–î –µ—Å–ª–∏ –æ–Ω null –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        should_restore = (started_at is None or started_at == "null" or started_at == "None" or started_at == "")
        
        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –≤—Ä–µ–º—è –µ—Å—Ç—å, –Ω–æ –æ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ
        if not should_restore and started_at:
            try:
                # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ JSON
                json_time = datetime.strptime(started_at, "%Y-%m-%d %H:%M:%S")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ (–ø—Ä–∏–∑–Ω–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
                current_time = datetime.now()
                time_diff = (current_time - json_time).total_seconds()
                if time_diff > 86400:  # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤
                    should_restore = True
                    logger.info(f"üîç –í—Ä–µ–º—è –≤ JSON —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ –¥–ª—è {folder_name}: {started_at}")
            except:
                should_restore = True
        
        if should_restore and claim_number and vin_value:
            try:
                logger.info(f"üîç –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º started_at –∏–∑ –ë–î –¥–ª—è {claim_number}_{vin_value}")
                await restore_started_at_from_db(json_path, claim_number, vin_value)
                
                # –¢–∞–∫–∂–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º completed_at
                logger.info(f"üîç –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º completed_at –∏–∑ –ë–î –¥–ª—è {claim_number}_{vin_value}")
                await restore_completed_at_from_db(json_path, claim_number, vin_value)
                
                # –¢–∞–∫–∂–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º last_updated
                logger.info(f"üîç –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º last_updated –∏–∑ –ë–î –¥–ª—è {claim_number}_{vin_value}")
                await restore_last_updated_from_db(json_path, claim_number, vin_value)
                
                # –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º JSON –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                with open(json_path, 'r', encoding='utf-8') as f:
                    json_data = json.load(f)
                metadata = json_data.get("metadata", {})
                started_at = metadata.get("started_at", "") if metadata else ""
                completed_at = metadata.get("completed_at", "") if metadata else ""
                last_updated = metadata.get("last_updated", "") if metadata else ""
                logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ started_at: {started_at}")
                logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ completed_at: {completed_at}")
                logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ last_updated: {last_updated}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è {claim_number}_{vin_value}: {e}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        started_time = "‚Äî"
        completed_time = "‚Äî"
        duration = ""
        
        if started_at:
            try:
                start_dt = datetime.strptime(started_at, "%Y-%m-%d %H:%M:%S")
                started_time = start_dt.strftime("%H:%M:%S")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º completed_at –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ last_updated
                end_time_str = completed_at if completed_at else last_updated
                if end_time_str:
                    end_dt = datetime.strptime(end_time_str, "%Y-%m-%d %H:%M:%S")
                    completed_time = end_dt.strftime("%H:%M:%S")
                    
                    duration_seconds = (end_dt - start_dt).total_seconds()
                    duration = f"{int(duration_seconds // 60)}–º {int(duration_seconds % 60)}—Å"
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
                pass
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∏–∑ JSON
        details = []
        zone_data = json_data.get("zone_data", [])
        if isinstance(zone_data, list):
            for zone in zone_data:
                if isinstance(zone, dict):
                    zone_title = zone.get("title", "")
                    zone_details = zone.get("details", [])
                    if isinstance(zone_details, list):
                        for detail in zone_details:
                            if isinstance(detail, dict):
                                detail_title = detail.get("title", "")
                                # –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–µ—Ç–∞–ª–∏ –Ω–∞ –∫–æ–¥ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
                                if " - " in detail_title:
                                    code, title = detail_title.split(" - ", 1)
                                else:
                                    code = ""
                                    title = detail_title
                                
                                details.append({
                                    "group_zone": zone_title,
                                    "code": code,
                                    "title": title
                                })
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ü–∏–∏ –∏–∑ JSON
        options = []
        options_data = json_data.get("options_data", {})
        if isinstance(options_data, dict) and options_data.get("success"):
            zones = options_data.get("zones", [])
            if isinstance(zones, list):
                for zone in zones:
                    if isinstance(zone, dict):
                        zone_title = zone.get("zone_title", "")
                        zone_options = zone.get("options", [])
                        if isinstance(zone_options, list):
                            for option in zone_options:
                                if isinstance(option, dict):
                                    options.append({
                                        "zone_name": zone_title,
                                        "option_code": option.get("code", ""),
                                        "option_title": option.get("title", ""),
                                        "is_selected": option.get("selected", False)
                                    })
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if json_completed and db_saved:
            status = "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"
        elif json_completed and not db_saved:
            status = "–û—à–∏–±–∫–∞ –ë–î"
        elif not json_completed:
            status = "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
        else:
            status = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        return templates.TemplateResponse("history_detail.html", {
            "request": request,
            "record": {
                "request_id": claim_number,
                "vin": vin_value,
                "vin_value": vin_value,  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —à–∞–±–ª–æ–Ω–æ–º
                "vin_status": vin_status,
                "status": status,
                "started_time": started_time,
                "completed_time": completed_time,
                "duration": duration,
                "created_date": datetime.fromtimestamp(os.path.getctime(json_path)).strftime("%d.%m.%Y"),
                "created": datetime.fromtimestamp(os.path.getctime(json_path)).strftime("%d.%m.%Y"),  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                "folder": folder_name,  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–∞–ø–∫–∏
                "folder_name": folder_name,  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                "main_screenshot_path": fix_path(json_data.get("main_screenshot_path", ""), folder_name),
                "main_svg_path": fix_path(json_data.get("main_svg_path", ""), folder_name),
                "zone_data": json_data.get("zone_data", []),
                "options_data": {
                    "success": json_data.get("options_data", {}).get("success", False) if isinstance(json_data.get("options_data"), dict) else False,
                    "zones": json_data.get("options_data", {}).get("zones", []) if isinstance(json_data.get("options_data"), dict) else [],
                    "statistics": json_data.get("options_data", {}).get("statistics", {
                        "total_zones": 0,
                        "total_options": 0,
                        "total_selected": 0
                    }) if isinstance(json_data.get("options_data"), dict) else {
                        "total_zones": 0,
                        "total_options": 0,
                        "total_selected": 0
                    },
                    "error": json_data.get("options_data", {}).get("error", "") if isinstance(json_data.get("options_data"), dict) else ""
                },
                "zones_table": json_data.get("zones_table", []),
                "all_svgs_zip": json_data.get("all_svgs_zip", "")
            },
            "details": details,
            "options": options
        })
        

        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏: {e}")
        return templates.TemplateResponse("error.html", {
            "request": request, 
            "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π: {e}"
        })


@app.post("/process_audatex_requests")
async def import_from_json(request: SearchRequest):
    global parser_start_time
    results = []
    
    for item in request.items:
        try:
            claim_number = str(item.requestId)
            vin_number = item.vin
            logger.info(f"–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è requestId: {claim_number}, VIN: {vin_number}")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            parser_start_time = get_moscow_time()

            # –í—ã–∑—ã–≤–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
            parser_result = await login_audatex(request.login, request.password, claim_number, vin_number, request.svg_collection, parser_start_time)

            if "error" in parser_result:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è requestId {claim_number}: {parser_result['error']}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–∫–µ –≤ –ë–î
                error_data = {
                    "folder": f"{claim_number}_{vin_number}",
                    "vin_value": vin_number,
                    "zone_data": [],
                    "error_message": parser_result['error']
                }
                await save_parser_data_to_db(error_data, claim_number, vin_number, is_success=False)
                
                results.append({
                    "requestId": item.requestId,
                    "vin": vin_number,
                    "status": "error",
                    "error": f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {parser_result['error']}"
                })
                continue

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            success = await process_parser_result_data(claim_number, vin_number, parser_result, parser_result.get('started_at'), parser_result.get('completed_at'))
            
            if success:
                # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –¥–ª—è batch –∑–∞–ø—Ä–æ—Å–æ–≤
                if parser_start_time and parser_result.get('completed_at'):
                    try:
                        completed_time = parser_result.get('completed_at')
                        if isinstance(completed_time, str):
                            completed_time = datetime.strptime(completed_time, "%Y-%m-%d %H:%M:%S")
                        
                        duration_seconds = (completed_time - parser_start_time).total_seconds()
                        duration_minutes = int(duration_seconds // 60)
                        duration_secs = int(duration_seconds % 60)
                        
                        logger.info(f"‚è±Ô∏è –ü–∞—Ä—Å–µ—Ä {claim_number}_{vin_number} –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {duration_minutes}–º {duration_secs}—Å")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –¥–ª—è {claim_number}_{vin_number}: {e}")

                results.append({
                    "requestId": item.requestId,
                    "vin": vin_number,
                    "status": "success",
                    "message": "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
                })
            else:
                results.append({
                    "requestId": item.requestId,
                    "vin": vin_number,
                    "status": "error",
                    "error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"
                })
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ {item.requestId}: {e}")
            results.append({
                "requestId": item.requestId,
                "vin": item.vin,
                "status": "error",
                "error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}"
            })

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
    parser_start_time = None

    return JSONResponse(content={"results": results})


@app.post("/login")
async def login(request: Request, username: str = Form(...), password: str = Form(...),
                claim_number: str = Form(default=""), vin_number: str = Form(default=""),
                svg_collection: str = Form(default="")):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
        if not claim_number and not vin_number:
            return JSONResponse(
                status_code=400,
                content={
                    "success": False,
                    "error": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –¥–µ–ª–∞ –∏–ª–∏ VIN –Ω–æ–º–µ—Ä."
                }
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
        if not redis_manager.test_connection():
            return JSONResponse(
                status_code=500,
                content={
                    "success": False,
                    "error": "Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û—á–µ—Ä–µ–¥—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞."
                }
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –æ—á–µ—Ä–µ–¥—å
        request_data = {
            "claim_number": claim_number,
            "vin_number": vin_number,
            "svg_collection": svg_collection == "on",
            "username": username,
            "password": password
        }
        
        logger.info(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å: –ù–æ–º–µ—Ä –¥–µ–ª–∞: {claim_number}, VIN: {vin_number}")
        
        success = redis_manager.add_request_to_queue(request_data)
        if not success:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å: {claim_number}, {vin_number}")
            return JSONResponse(
                status_code=500,
                content={
                    "success": False,
                    "error": "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å."
                }
            )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
        from core.queue.queue_processor import queue_processor
        if not queue_processor.is_running:
            asyncio.create_task(queue_processor.start_processing())
        
        queue_length = redis_manager.get_queue_length()
        
        logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å. –ü–æ–∑–∏—Ü–∏—è: {queue_length}")
        
        return JSONResponse(
            status_code=200,
            content={
                "success": True,
                "message": f"–ó–∞—è–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å. –ù–æ–º–µ—Ä –¥–µ–ª–∞: {claim_number}, VIN: {vin_number}",
                "queue_length": queue_length,
                "queue_info": f"–ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {queue_length}. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            }
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥–∞: {e}")
        return JSONResponse(
            status_code=500,
            content={
                "success": False,
                "error": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            }
        )


@app.post("/terminate")
async def terminate_parser():
    global parser_running, parser_task, parser_start_time
    try:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø–∞—Ä—Å–µ—Ä–∞")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–ª–∞–≥–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        parser_running = False
        parser_start_time = None
        
        # –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É –ø–∞—Ä—Å–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞
        if parser_task and not parser_task.done():
            parser_task.cancel()
            try:
                await asyncio.wait_for(parser_task, timeout=2.0)
            except (asyncio.CancelledError, asyncio.TimeoutError):
                logger.info("‚úÖ –°—Ç–∞—Ä–∞—è –∑–∞–¥–∞—á–∞ –ø–∞—Ä—Å–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
        # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É
        parser_task = None
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º queue processor
        from core.queue.queue_processor import queue_processor
        if queue_processor.is_running:
            logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º queue processor")
            queue_processor.stop_processing()
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –±—Ä–∞—É–∑–µ—Ä–∞
        result = terminate_all_processes_and_restart()
        
        logger.info(f"‚úÖ –ü–∞—Ä—Å–µ—Ä –∏ –æ—á–µ—Ä–µ–¥—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {result}")
        return JSONResponse(content={"status": "success", "message": "–ü–∞—Ä—Å–µ—Ä –∏ –æ—á–µ—Ä–µ–¥—å —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"})
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        parser_running = False
        parser_task = None
        parser_start_time = None
        return JSONResponse(content={"status": "error", "error": str(e)})

@app.get("/api/processing-stats")
async def get_processing_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
    try:
        data_dir = "static/data"
        if not os.path.exists(data_dir):
            logger.info("üìÅ –ü–∞–ø–∫–∞ static/data –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return JSONResponse(content={
                "average_time": "0–º 0—Å",
                "total_completed": 0,
                "total_time": "0–º 0—Å"
            })
        
        completed_requests = []
        total_duration_seconds = 0
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–∞–ø–∫–∞–º –≤ static/data
        for folder_name in os.listdir(data_dir):
            folder_path = os.path.join(data_dir, folder_name)
            
            if not os.path.isdir(folder_path):
                continue
                
            json_files = [f for f in os.listdir(folder_path) if f.endswith(".json")]
            if not json_files:
                continue
            
            # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π JSON —Ñ–∞–π–ª
            latest_json = max(json_files, key=lambda f: os.path.getctime(os.path.join(folder_path, f)))
            json_path = os.path.join(folder_path, latest_json)
            
            try:
                with open(json_path, 'r', encoding='utf-8') as f:
                    json_data = json.load(f)
                
                json_data = clean_json_data(json_data)
                metadata = json_data.get("metadata", {})
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                json_completed = metadata.get("json_completed", False)
                db_saved = metadata.get("db_saved", False)
                options_success = metadata.get("options_success", False)
                total_zones = len(json_data.get("zone_data", [])) if json_data else 0
                
                logger.info(f"üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º {folder_name}: json_completed={json_completed}, db_saved={db_saved}, options_success={options_success}, total_zones={total_zones}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ /history
                if json_completed and db_saved and total_zones > 0:
                    started_at = metadata.get("started_at", "")
                    completed_at = metadata.get("completed_at", "")
                    last_updated = metadata.get("last_updated", "")
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º started_at –∏–∑ –ë–î –µ—Å–ª–∏ –æ–Ω null –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                    should_restore = (started_at is None or started_at == "null" or started_at == "None" or started_at == "")
                    
                    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –≤—Ä–µ–º—è –µ—Å—Ç—å, –Ω–æ –æ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ
                    if not should_restore and started_at:
                        try:
                            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ JSON
                            json_time = datetime.strptime(started_at, "%Y-%m-%d %H:%M:%S")
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ (–ø—Ä–∏–∑–Ω–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
                            current_time = datetime.now()
                            time_diff = (current_time - json_time).total_seconds()
                            if time_diff > 86400:  # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤
                                should_restore = True
                                logger.info(f"üîç –í—Ä–µ–º—è –≤ JSON —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ –¥–ª—è {folder_name}: {started_at}")
                        except:
                            should_restore = True
                    
                    if should_restore:
                        logger.info(f"üîç –ù—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å started_at –¥–ª—è {folder_name}: —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ='{started_at}'")
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º claim_number –∏ vin –∏–∑ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏
                        if "_" in folder_name:
                            claim_number = folder_name.split("_")[0]
                            vin = folder_name.split("_")[1] if len(folder_name.split("_")) > 1 else ""
                            
                            logger.info(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏: claim_number='{claim_number}', vin='{vin}'")
                            
                            if claim_number and vin:
                                try:
                                    logger.info(f"üîç –í—ã–∑—ã–≤–∞–µ–º restore_started_at_from_db –¥–ª—è {json_path}")
                                    result = await restore_started_at_from_db(json_path, claim_number, vin)
                                    logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è started_at: {result}")
                                    
                                    # –¢–∞–∫–∂–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º completed_at
                                    logger.info(f"üîç –í—ã–∑—ã–≤–∞–µ–º restore_completed_at_from_db –¥–ª—è {json_path}")
                                    result_completed_at = await restore_completed_at_from_db(json_path, claim_number, vin)
                                    logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è completed_at: {result_completed_at}")
                                    
                                    # –¢–∞–∫–∂–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º last_updated
                                    logger.info(f"üîç –í—ã–∑—ã–≤–∞–µ–º restore_last_updated_from_db –¥–ª—è {json_path}")
                                    result_last_updated = await restore_last_updated_from_db(json_path, claim_number, vin)
                                    logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è last_updated: {result_last_updated}")
                                    
                                    if result or result_completed_at or result_last_updated:
                                        # –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º JSON –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                                        with open(json_path, 'r', encoding='utf-8') as f:
                                            json_data = json.load(f)
                                        metadata = json_data.get("metadata", {})
                                        started_at = metadata.get("started_at", "")
                                        completed_at = metadata.get("completed_at", "")
                                        last_updated = metadata.get("last_updated", "")
                                        logger.info(f"üîç –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ started_at: '{started_at}'")
                                        logger.info(f"üîç –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ completed_at: '{completed_at}'")
                                        logger.info(f"üîç –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ last_updated: '{last_updated}'")
                                    else:
                                        logger.warning(f"‚ö†Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–ª—è {folder_name}")
                                except Exception as e:
                                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è {folder_name}: {e}")
                            else:
                                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å claim_number –∏–ª–∏ vin –∏–∑ {folder_name}")
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏: {folder_name}")
                    else:
                        logger.info(f"üîç started_at —É–∂–µ –µ—Å—Ç—å –¥–ª—è {folder_name}: '{started_at}'")
                    
                    logger.info(f"‚è∞ –í—Ä–µ–º—è –¥–ª—è {folder_name}: started_at={started_at}, completed_at={completed_at}")
                    
                    if started_at and started_at != "null" and started_at != "None":
                        try:
                            start_dt = datetime.strptime(started_at, "%Y-%m-%d %H:%M:%S")
                            end_time_str = completed_at if completed_at and completed_at != "null" and completed_at != "None" else last_updated
                            
                            if end_time_str and end_time_str != "null" and end_time_str != "None":
                                end_dt = datetime.strptime(end_time_str, "%Y-%m-%d %H:%M:%S")
                                duration_seconds = (end_dt - start_dt).total_seconds()
                                
                                if duration_seconds > 0:
                                    completed_requests.append(duration_seconds)
                                    total_duration_seconds += duration_seconds
                                    logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –¥–ª—è {folder_name}: {duration_seconds}—Å")
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è {folder_name}: {e}")
                            continue
                            
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞ {json_path}: {e}")
                continue
        
        logger.info(f"üìà –ù–∞–π–¥–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {len(completed_requests)}")
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if completed_requests:
            average_seconds = total_duration_seconds / len(completed_requests)
            average_minutes = int(average_seconds // 60)
            average_secs = int(average_seconds % 60)
            average_time = f"{average_minutes}–º {average_secs}—Å"
            
            total_minutes = int(total_duration_seconds // 60)
            total_secs = int(total_duration_seconds % 60)
            total_time = f"{total_minutes}–º {total_secs}—Å"
            
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è={average_time}, –æ–±—â–µ–µ –≤—Ä–µ–º—è={total_time}")
        else:
            average_time = "0–º 0—Å"
            total_time = "0–º 0—Å"
            logger.info("üìä –ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        
        return JSONResponse(content={
            "average_time": average_time,
            "total_completed": len(completed_requests),
            "total_time": total_time
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return JSONResponse(content={
            "average_time": "0–º 0—Å",
            "total_completed": 0,
            "total_time": "0–º 0—Å"
        })


if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)