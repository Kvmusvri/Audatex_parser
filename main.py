import asyncio
import uvicorn
from fastapi import FastAPI, Request, Form
from fastapi.responses import HTMLResponse, JSONResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from core.parser.parser import login_audatex, terminate_all_processes_and_restart
import json
import os
from datetime import datetime
import logging
from core.database.models import ParserCarDetail, ParserCarDetailGroupZone, ParserCarRequestStatus, async_session
from pydantic import BaseModel
from typing import List
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.sql import text
import re
from core.database.requests import (
    save_parser_data_to_db,
    update_json_with_claim_number,
    save_updated_json_to_file,
)

import time
import concurrent.futures
import threading
import psutil


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

# –ú–æ–¥–µ–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω–æ–≥–æ JSON
class SearchItem(BaseModel):
    requestId: int
    vin: str

class SearchRequest(BaseModel):
    login: str
    password: str
    searchList: List[SearchItem]
    svg_collection: bool = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω —Å–±–æ—Ä SVG


def fix_path(path: str, folder: str) -> str:
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—É—Ç—å, –¥–æ–±–∞–≤–ª—è—è –∏–º—è –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –∏ —É–±–∏—Ä–∞–µ—Ç –¥–≤–æ–π–Ω—ã–µ —Å–ª–µ—à–∏"""
    if not path:
        return path
    parts = path.split('/')
    if len(parts) >= 4 and parts[3] == '':
        parts[3] = folder
    return '/'.join(parts)

def normalize_paths(record: dict, folder_name: str) -> dict:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º, –¥–æ–±–∞–≤–ª—è—è claim_number –∏ vin, –∏—Å–ø—Ä–∞–≤–ª—è—è —Å–ª–µ—à–∏"""
    if record.get("main_screenshot_path"):
        record["main_screenshot_path"] = fix_path(record["main_screenshot_path"], folder_name)
    if record.get("main_svg_path"):
        record["main_svg_path"] = fix_path(record["main_svg_path"], folder_name)
    if record.get("all_svgs_zip"):
        record["all_svgs_zip"] = fix_path(record["all_svgs_zip"], folder_name)

    for zone in record.get("zone_data", []):
        if zone.get("screenshot_path"):
            zone["screenshot_path"] = fix_path(zone["screenshot_path"], folder_name)
        if zone.get("svg_path"):
            zone["svg_path"] = fix_path(zone["svg_path"], folder_name)

        for detail in zone.get("details", []):
            if detail.get("svg_path"):
                detail["svg_path"] = fix_path(detail["svg_path"], folder_name)

        for pictogram in zone.get("pictograms", []):
            for work in pictogram.get("works", []):
                if work.get("svg_path"):
                    work["svg_path"] = fix_path(work["svg_path"], folder_name)

    return record


async def process_parser_result_data(claim_number: str, vin_value: str, parser_result: dict) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–∞—Ä—Å–µ—Ä–∞: –∏—â–µ—Ç JSON —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î
    
    Args:
        claim_number: –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
        vin_value: VIN –Ω–æ–º–µ—Ä
        parser_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–µ—Ä–∞
    
    Returns:
        bool: True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–∞–ø–∫–∏
        folder_name = f"{claim_number}_{vin_value}"
        folder_path = os.path.join("static", "data", folder_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        if not os.path.isdir(folder_path):
            logger.error(f"–ü–∞–ø–∫–∞ {folder_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞")
            return False
        
        # –ò—â–µ–º JSON —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
        json_files = [f for f in os.listdir(folder_path) if f.endswith(".json")]
        if not json_files:
            logger.error(f"JSON-—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {folder_path}")
            return False
        
        # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π JSON —Ñ–∞–π–ª
        latest_json = max(json_files, key=lambda f: os.path.getctime(os.path.join(folder_path, f)))
        file_path = os.path.join(folder_path, latest_json)
        
        logger.info(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON —Ñ–∞–π–ª: {file_path}")
        
        # –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
        with open(file_path, 'r', encoding='utf-8') as f:
            json_data = json.load(f)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º JSON —Å claim_number
        updated_json = update_json_with_claim_number(json_data, claim_number)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JSON –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
        save_success = await save_updated_json_to_file(updated_json, file_path)
        if not save_success:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ JSON: {file_path}")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        db_success = await save_parser_data_to_db(
            json_data=updated_json,
            request_id=claim_number,
            vin=vin_value,
            is_success=True
        )
        
        if db_success:
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î –¥–ª—è request_id={claim_number}, vin={vin_value}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –¥–ª—è request_id={claim_number}, vin={vin_value}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return False


@app.post("/process_audatex_requests")
async def import_from_json(request: SearchRequest):
    logger.info(f"üéõÔ∏è API –∑–∞–ø—Ä–æ—Å —Å —Ñ–ª–∞–≥–æ–º —Å–±–æ—Ä–∞ SVG: {'–í–ö–õ–Æ–ß–ï–ù' if request.svg_collection else '–û–¢–ö–õ–Æ–ß–ï–ù'}")
    results = []
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º searchList –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 10
        batch_size = 10
        search_list = request.searchList
        for i in range(0, len(search_list), batch_size):
            batch = search_list[i:i + batch_size]  # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –¥–æ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã –∏–∑ {len(batch)} –∑–∞–ø—Ä–æ—Å–æ–≤")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –≤ –≥—Ä—É–ø–ø–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
            for item in batch:
                claim_number = str(item.requestId)
                vin_number = item.vin
                logger.info(f"–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è requestId: {claim_number}, VIN: {vin_number}")

                # –í—ã–∑—ã–≤–∞–µ–º –ø–∞—Ä—Å–µ—Ä
                parser_result = await login_audatex(request.login, request.password, claim_number, vin_number, request.svg_collection)

                if "error" in parser_result:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è requestId {claim_number}: {parser_result['error']}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–∫–µ –≤ –ë–î
                    error_data = {
                        "folder": f"{claim_number}_{vin_number}",
                        "vin_value": vin_number,
                        "zone_data": [],
                        "error_message": parser_result['error']
                    }
                    await save_parser_data_to_db(error_data, claim_number, vin_number, is_success=False)
                    
                    results.append({
                        "requestId": item.requestId,
                        "vin": vin_number,
                        "status": "error",
                        "error": f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {parser_result['error']}"
                    })
                    continue

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä–∞: –∏—â–µ–º JSON —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ë–î
                    request_id = str(claim_number)
                    vin = str(parser_result.get('vin_value', vin_number))
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
                    db_success = await process_parser_result_data(request_id, vin, parser_result)
                    
                    if db_success:
                        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î –¥–ª—è requestId {claim_number}")
                        results.append({
                            "requestId": item.requestId,
                            "vin": vin_number,
                            "status": "success",
                            "message": "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
                        })
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è requestId {claim_number}")
                        results.append({
                            "requestId": item.requestId,
                            "vin": vin_number,
                            "status": "error",
                            "error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"
                        })
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è requestId {claim_number}: {e}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–∫–µ –≤ –ë–î
                    error_data = {
                        "folder": f"{claim_number}_{vin_number}",
                        "vin_value": vin_number,
                        "zone_data": [],
                        "error_message": str(e)
                    }
                    await save_parser_data_to_db(error_data, claim_number, vin_number, is_success=False)
                    
                    results.append({
                        "requestId": item.requestId,
                        "vin": vin_number,
                        "status": "error",
                        "error": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"
                    })
                    continue

            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        results.append({
            "status": "error",
            "error": f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}"
        })

    return {"results": results}


# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
@app.get("/", response_class=HTMLResponse)
async def index(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞ —Å –∑–∞–ø—É—Å–∫–æ–º –ø–∞—Ä—Å–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ —á–µ—Ä–µ–∑ –ø—É–ª

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª –¥–ª—è –ø–∞—Ä—Å–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (–º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å max_workers)
parser_process_pool = concurrent.futures.ProcessPoolExecutor(max_workers=1)

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ future –ø–∞—Ä—Å–µ—Ä–∞ –∏ –µ–≥–æ PID
current_parser_future = None
current_parser_pid = None
parser_lock = threading.Lock()

def run_parser_in_subprocess(username, password, claim_number, vin_number, svg_collection):
    """
    –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ login_audatex –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ.
    –í–∞–∂–Ω–æ: login_audatex –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ asyncio.run.
    """

    # –°—Ç–∞–≤–∏–º –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—É (—á—Ç–æ–±—ã –µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã—Å—Ç—Ä–æ —É–±–∏—Ç—å —á–µ—Ä–µ–∑ stop_parser)
    try:
        p = psutil.Process(os.getpid())
        p.nice(10)  # 10 ‚Äî –Ω–∏–∂–µ –æ–±—ã—á–Ω–æ–≥–æ, –Ω–æ –Ω–µ idle
    except Exception as e:
        pass

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    result = loop.run_until_complete(login_audatex(username, password, claim_number, vin_number, svg_collection))
    loop.close()
    return result

@app.post("/login", response_class=HTMLResponse)
async def login(request: Request, username: str = Form(...), password: str = Form(...),
                claim_number: str = Form(default=""), vin_number: str = Form(default=""),
                svg_collection: str = Form(default="")):
    global current_parser_future, current_parser_pid

    start_time = time.time()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º checkbox: –µ—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ (–ª—é–±–æ–µ) - –∑–Ω–∞—á–∏—Ç –≤–∫–ª—é—á–µ–Ω, –µ—Å–ª–∏ –ø—É—Å—Ç–æ–µ - –æ—Ç–∫–ª—é—á–µ–Ω
    svg_collection_bool = bool(svg_collection and svg_collection.lower() not in ['false', '0', ''])
    logger.info(f"üéõÔ∏è –ü–æ–ª—É—á–µ–Ω —Ñ–ª–∞–≥ —Å–±–æ—Ä–∞ SVG —Å —Ñ–æ—Ä–º—ã: '{svg_collection}' -> {'–í–ö–õ–Æ–ß–ï–ù' if svg_collection_bool else '–û–¢–ö–õ–Æ–ß–ï–ù'}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –ø–∞—Ä—Å–µ—Ä
    with parser_lock:
        if current_parser_future and not current_parser_future.done():
            logger.warning("–ü–∞—Ä—Å–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞")
            return templates.TemplateResponse("error.html", {
                "request": request,
                "error": "–ü–∞—Ä—Å–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ."
            })

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ —á–µ—Ä–µ–∑ –ø—É–ª
        future = parser_process_pool.submit(run_parser_in_subprocess, username, password, claim_number, vin_number, svg_collection_bool)
        current_parser_future = future

        # –ü–æ–ª—É—á–∞–µ–º PID –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞ (—á–µ—Ä–µ–∑ _process, —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ API, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç)
        try:
            current_parser_pid = future._process.pid
            logger.info(f"–ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ PID={current_parser_pid}")
        except Exception as e:
            current_parser_pid = None
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å PID –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")

    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop)
    loop = asyncio.get_event_loop()
    parser_result = await loop.run_in_executor(None, current_parser_future.result)

    # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–±—Ä–∞—Å—ã–≤–∞–µ–º PID
    with parser_lock:
        current_parser_pid = None

    if "error" in parser_result:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {parser_result['error']}")
        return templates.TemplateResponse("error.html", {"request": request, "error": parser_result['error']})

    zone_data = parser_result.get("zone_data", [])
    if not zone_data:
        logger.warning("–ó–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –¥–µ–ª–∞ –∏–ª–∏ VIN")
        return templates.TemplateResponse("error.html", {
            "request": request,
            "error": "–ó–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –¥–µ–ª–∞ –∏–ª–∏ VIN"
        })

    # –§–æ—Ä–º–∏—Ä—É–µ–º folder_name
    folder_name = f"{parser_result.get('claim_number')}_{parser_result.get('vin_value')}"

    # –§–æ—Ä–º–∏—Ä—É–µ–º record
    record = {
        "folder": folder_name,
        "vin_value": parser_result.get("vin_value", vin_number or claim_number),
        "vin_status": parser_result.get("vin_status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
        "zone_data": parser_result.get("zone_data", []),
        "main_screenshot_path": parser_result.get("main_screenshot_path", ""),
        "main_svg_path": parser_result.get("main_svg_path", ""),
        "all_svgs_zip": parser_result.get("all_svgs_zip", ""),
        "options_data": parser_result.get("options_data", {"success": False, "zones": []}),
        "created": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç–∏
    record = normalize_paths(record, folder_name)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä–∞: –∏—â–µ–º JSON —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ë–î
        request_id = str(parser_result.get('claim_number', claim_number))
        vin = str(parser_result.get('vin_value', vin_number))
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
        db_success = await process_parser_result_data(request_id, vin, parser_result)
        
        if db_success:
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î –¥–ª—è request_id={request_id}, vin={vin}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è request_id={request_id}, vin={vin}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–∞: {e}")

    logger.info("–ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")

    end_time = time.time()
    duration_sec = end_time - start_time
    duration_min = duration_sec / 60
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω—è–ª–∞ {duration_sec:.2f} —Å–µ–∫—É–Ω–¥\n({duration_min:.2f} –º–∏–Ω—É—Ç)")

    return templates.TemplateResponse("history_detail.html", {
        "request": request,
        "record": record
    })

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
@app.get("/history", response_class=HTMLResponse)
async def history(request: Request):
    history_data = []
    data_base_dir = "static/data"

    logger.debug(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {data_base_dir}")
    if not os.path.exists(data_base_dir):
        logger.error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {data_base_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return templates.TemplateResponse("history.html", {
            "request": request,
            "history": True,
            "history_data": []
        })

    for root, dirs, files in os.walk(data_base_dir):
        json_files = [f for f in files if f.endswith(".json")]
        if not json_files:
            logger.debug(f"JSON-—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {root}")
            continue
        latest_json = max(json_files, key=lambda f: os.path.getctime(os.path.join(root, f)))
        file_path = os.path.join(root, latest_json)
        folder = os.path.relpath(root, data_base_dir).replace(os.sep, "/")
        logger.debug(f"–ß—Ç–µ–Ω–∏–µ JSON: {file_path}")
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            file_stat = os.stat(file_path)
            history_data.append({
                "folder": folder,
                "vin_value": data.get("vin_value", folder),
                "created": datetime.fromtimestamp(file_stat.st_ctime).strftime("%Y-%m-%d %H:%M:%S")
            })
            logger.debug(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω JSON: {file_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {file_path}: {e}")

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏: {len(history_data)}")
    return templates.TemplateResponse("history.html", {
        "request": request,
        "history": True,
        "history_data": history_data
    })

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–∏
@app.get("/history/{folder:path}", response_class=HTMLResponse)
async def history_detail(request: Request, folder: str):
    print(f"folder::{folder}")
    data_base_dir = "static/data"
    folder_path = os.path.join(data_base_dir, folder)
    logger.debug(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞–ø–∫–∏: {folder_path}")
    print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞–ø–∫–∏: {folder_path}")

    if not os.path.isdir(folder_path):
        logger.error(f"–ü–∞–ø–∫–∞ {folder_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return templates.TemplateResponse("error.html", {
            "request": request,
            "error": "–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        })

    json_files = [f for f in os.listdir(folder_path) if f.endswith(".json")]
    if not json_files:
        logger.error(f"JSON-—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {folder_path}")
        return templates.TemplateResponse("error.html", {
            "request": request,
            "error": "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        })

    latest_json = max(json_files, key=lambda f: os.path.getctime(os.path.join(folder_path, f)))
    file_path = os.path.join(folder_path, latest_json)
    logger.debug(f"–ß—Ç–µ–Ω–∏–µ JSON: {file_path}")
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        file_stat = os.stat(file_path)

        record = {
            "folder": folder,
            "vin_value": data.get("vin_value", folder),
            "zone_data": data.get("zone_data", []),
            "main_screenshot_path": data.get("main_screenshot_path", ""),
            "main_svg_path": data.get("main_svg_path", ""),
            "all_svgs_zip": data.get("all_svgs_zip", ""),
            "options_data": data.get("options_data", {"success": False, "zones": []}),
            "created": datetime.fromtimestamp(file_stat.st_ctime).strftime("%Y-%m-%d %H:%M:%S")
        }

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç–∏
        record = normalize_paths(record, folder)

        logger.debug(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω JSON: {file_path}")
        return templates.TemplateResponse("history_detail.html", {
            "request": request,
            "record": record
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {file_path}: {e}")
        return templates.TemplateResponse("error.html", {
            "request": request,
            "error": f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"
        })


@app.post("/stop_parser")
async def stop_parser_endpoint():
    global current_parser_future, current_parser_pid
    try:
        logger.warning("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø–∞—Ä—Å–µ—Ä–∞. –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–µ—Ä–∞ ‚Äî —É–±–∏–≤–∞–µ–º –µ–≥–æ

        killed = False
        with parser_lock:
            if current_parser_pid:
                try:
                    proc = psutil.Process(current_parser_pid)
                    proc.terminate()
                    try:
                        proc.wait(timeout=5)
                        logger.warning(f"–ü—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–µ—Ä–∞ PID={current_parser_pid} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.")
                    except psutil.TimeoutExpired:
                        proc.kill()
                        logger.warning(f"–ü—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–µ—Ä–∞ PID={current_parser_pid} –±—ã–ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏—Ç.")
                    killed = True
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–µ—Ä–∞ PID={current_parser_pid}: {e}")
                current_parser_pid = None
                current_parser_future = None

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–∏–¥–µ–ª –æ—à–∏–±–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        response = RedirectResponse(url="/")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç
        # –ü–µ—Ä–µ–¥–∞—ë–º current_url –∫–∞–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å, —Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ö–æ—Å—Ç
        threading.Thread(target=terminate_all_processes_and_restart, args=("/",), daemon=True).start()
        return response
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return JSONResponse(content={"success": False, "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞—Ä—Å–µ—Ä–∞: {e}"})


if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)