#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
–ü–æ–∑–≤–æ–ª—è–µ—Ç —É–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
"""

import asyncio
import json
import os
import sys
import logging
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.database.requests import save_parser_data_to_db, update_json_with_claim_number, save_updated_json_to_file
from core.database.models import Base, engine

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def ensure_tables_exist():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (—Å–æ–∑–¥–∞—é—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)"""
    try:
        logger.info("üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        # –¢–∞–±–ª–∏—Ü—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é (—Å–æ–∑–¥–∞–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü: {e}")
        raise

async def test_db_save(json_file_path: str, request_id: str = None, vin: str = None):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞ –≤ –ë–î
    
    Args:
        json_file_path: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
        request_id: ID –∑–∞–ø—Ä–æ—Å–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞)
        vin: VIN –Ω–æ–º–µ—Ä (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –∏–∑ JSON)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(json_file_path):
            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_file_path}")
            return False
            
        logger.info(f"üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º JSON —Ñ–∞–π–ª: {json_file_path}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ
        with open(json_file_path, 'r', encoding='utf-8') as f:
            json_data = json.load(f)
            
        logger.info(f"‚úÖ JSON –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(str(json_data))} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º request_id –∏ vin –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã
        if not request_id:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–∞–ø–∫–∏
            file_name = os.path.basename(json_file_path)
            folder_name = os.path.basename(os.path.dirname(json_file_path))
            
            if '_' in folder_name:
                parts = folder_name.split('_')
                if len(parts) >= 2:
                    request_id = parts[0]
                    vin = parts[1]
                    logger.info(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏: request_id={request_id}, vin={vin}")
                else:
                    request_id = "test_request"
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å request_id –∏–∑ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º: {request_id}")
            else:
                request_id = "test_request"
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å request_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º: {request_id}")
        
        if not vin:
            vin = json_data.get('vin_value', 'test_vin')
            logger.info(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω VIN –∏–∑ JSON: {vin}")
            
        logger.info(f"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è request_id={request_id}, vin={vin}")
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        await ensure_tables_exist()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        start_time = datetime.now()
        db_success = await save_parser_data_to_db(
            json_data=json_data,
            request_id=request_id,
            vin=vin,
            is_success=True
        )
        end_time = datetime.now()
        
        duration = (end_time - start_time).total_seconds()
        
        if db_success:
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ JSON —Å claim_number
            logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ JSON —Å claim_number...")
            updated_json = update_json_with_claim_number(json_data, request_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JSON
            output_dir = "test_output"
            os.makedirs(output_dir, exist_ok=True)
            output_file = os.path.join(output_dir, f"updated_{os.path.basename(json_file_path)}")
            
            save_success = await save_updated_json_to_file(updated_json, output_file)
            if save_success:
                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ JSON: {output_file}")
                
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_db_save.py <–ø—É—Ç—å_–∫_json_—Ñ–∞–π–ª—É> [request_id] [vin]")
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python test_db_save.py ../static/data/3109624_LB37852D6RS125970/data_20250725_201256.json")
        print("  python test_db_save.py ../static/data/3109624_LB37852D6RS125970/data_20250725_201256.json 3109624 LB37852D6RS125970")
        return
        
    json_file_path = sys.argv[1]
    request_id = sys.argv[2] if len(sys.argv) > 2 else None
    vin = sys.argv[3] if len(sys.argv) > 3 else None
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î")
    logger.info(f"üìÅ JSON —Ñ–∞–π–ª: {json_file_path}")
    if request_id:
        logger.info(f"üÜî Request ID: {request_id}")
    if vin:
        logger.info(f"üöó VIN: {vin}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    success = asyncio.run(test_db_save(json_file_path, request_id, vin))
    
    if success:
        logger.info("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.error("üí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)

if __name__ == "__main__":
    main() 