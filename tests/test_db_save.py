import asyncio
import json
import logging
import os
from core.database.models import start_db, get_moscow_time, engine, async_session
from core.database.requests import save_parser_data_to_db
from sqlalchemy import text, select
from core.database.models import ParserCarDetail, ParserCarDetailGroupZone, ParserCarRequestStatus, ParserCarOptions

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def drop_existing_tables():
    """–£–¥–∞–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è"""
    async with engine.begin() as conn:
        await conn.execute(text("DROP TABLE IF EXISTS parser_car_options CASCADE"))
        await conn.execute(text("DROP TABLE IF EXISTS parser_car_detail CASCADE"))
        await conn.execute(text("DROP TABLE IF EXISTS parser_car_detail_group_zone CASCADE"))
        await conn.execute(text("DROP TABLE IF EXISTS parser_car_request_status CASCADE"))
        logger.info("‚úÖ –°—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã")

def find_latest_json_file():
    """–ù–∞—Ö–æ–¥–∏—Ç —Å–∞–º—ã–π –Ω–æ–≤—ã–π JSON —Ñ–∞–π–ª –≤ static/data"""
    data_dir = "static/data"
    if not os.path.exists(data_dir):
        logger.error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {data_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return None
    
    latest_file = None
    latest_time = 0
    
    for root, dirs, files in os.walk(data_dir):
        for file in files:
            if file.endswith('.json'):
                file_path = os.path.join(root, file)
                file_time = os.path.getctime(file_path)
                if file_time > latest_time:
                    latest_time = file_time
                    latest_file = file_path
    
    return latest_file

def extract_claim_number_from_path(file_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç claim_number –∏–∑ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É"""
    # –ü—É—Ç—å –≤–∏–¥–∞: static/data/3109624_LB37852D6RS125970/data_20250725_224349.json
    parts = file_path.split(os.sep)
    if len(parts) >= 3:
        folder_name = parts[2]  # 3109624_LB37852D6RS125970
        claim_number = folder_name.split('_')[0]  # 3109624
        return claim_number
    return None

async def check_saved_data(claim_number: str, vin: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    async with async_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status_result = await session.execute(
            select(ParserCarRequestStatus)
            .where(ParserCarRequestStatus.request_id == claim_number)
            .where(ParserCarRequestStatus.vin == vin)
        )
        status = status_result.scalar_one_or_none()
        if status:
            logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å: {status.vin_status}, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {status.comment}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–æ–Ω—ã
        zones_result = await session.execute(
            select(ParserCarDetailGroupZone)
            .where(ParserCarDetailGroupZone.request_id == claim_number)
            .where(ParserCarDetailGroupZone.vin == vin)
        )
        zones = zones_result.scalars().all()
        logger.info(f"‚úÖ –ó–æ–Ω —Å–æ–∑–¥–∞–Ω–æ: {len(zones)}")
        for zone in zones[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–æ–Ω—ã
            logger.info(f"   - ID: {zone.id}, –¢–∏–ø: {zone.type}, –ù–∞–∑–≤–∞–Ω–∏–µ: {zone.title}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏
        details_result = await session.execute(
            select(ParserCarDetail)
            .where(ParserCarDetail.request_id == claim_number)
            .where(ParserCarDetail.vin == vin)
        )
        details = details_result.scalars().all()
        logger.info(f"‚úÖ –î–µ—Ç–∞–ª–µ–π —Å–æ–∑–¥–∞–Ω–æ: {len(details)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ group_zone —Å–æ–¥–µ—Ä–∂–∏—Ç ID, –∞ –Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        sample_details = details[:5]
        for detail in sample_details:
            logger.info(f"   - –ö–æ–¥: {detail.code}, –ù–∞–∑–≤–∞–Ω–∏–µ: {detail.title[:50]}..., Group_zone: {detail.group_zone}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–∏
        options_result = await session.execute(
            select(ParserCarOptions)
            .where(ParserCarOptions.request_id == claim_number)
            .where(ParserCarOptions.vin == vin)
        )
        options = options_result.scalars().all()
        logger.info(f"‚úÖ –û–ø—Ü–∏–π —Å–æ–∑–¥–∞–Ω–æ: {len(options)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º AZT –æ–ø—Ü–∏–∏
        azt_options = [opt for opt in options if "AZT" in opt.option_code]
        if azt_options:
            logger.info(f"‚úÖ AZT –æ–ø—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ: {len(azt_options)}")
            for opt in azt_options[:2]:
                logger.info(f"   - –ö–æ–¥: {opt.option_code}, –ù–∞–∑–≤–∞–Ω–∏–µ: {opt.option_title[:50]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—Ç–∏—Ü–∏–∏
        await check_partitions(session)

async def check_partitions(session):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–∏—Ü–∏–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—Ç–∏—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        tables = [
            'parser_car_detail',
            'parser_car_detail_group_zone', 
            'parser_car_request_status',
            'parser_car_options'
        ]
        
        for table in tables:
            result = await session.execute(text(f"""
                SELECT schemaname, tablename 
                FROM pg_tables 
                WHERE tablename LIKE '{table}_%' 
                AND schemaname = 'public'
                ORDER BY tablename
            """))
            partitions = result.fetchall()
            logger.info(f"üìä –ü–∞—Ä—Ç–∏—Ü–∏–∏ –¥–ª—è {table}: {len(partitions)}")
            for partition in partitions[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                logger.info(f"   - {partition[1]}")
                
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Ç–∏—Ü–∏–π: {e}")

async def test_database_optimizations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    await drop_existing_tables()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    await start_db()
    logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
    
    # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∞–ª—å–Ω—ã–π JSON —Ñ–∞–π–ª
    json_file = find_latest_json_file()
    if not json_file:
        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω JSON —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    logger.info(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª: {json_file}")
    
    # –ß–∏—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    try:
        with open(json_file, 'r', encoding='utf-8') as f:
            real_data = json.load(f)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º claim_number –∏–∑ –ø—É—Ç–∏
        claim_number = extract_claim_number_from_path(json_file)
        if not claim_number:
            claim_number = "3109624"  # Fallback
        
        vin_value = real_data.get("vin_value", "LB37852D6RS125970")
        
        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏: claim_number={claim_number}, vin={vin_value}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        success = await save_parser_data_to_db(
            real_data, 
            claim_number, 
            vin_value, 
            is_success=True
        )
        
        if success:
            logger.info("‚úÖ –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
            await check_saved_data(claim_number, vin_value)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            moscow_time = get_moscow_time()
            logger.info(f"üïê –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: {moscow_time.strftime('%Y-%m-%d %H:%M:%S %Z')}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (UPSERT)
            logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (UPSERT)...")
            success2 = await save_parser_data_to_db(
                real_data, 
                claim_number, 
                vin_value, 
                is_success=True
            )
            
            if success2:
                logger.info("‚úÖ UPSERT —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
                
                # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                zone_count = len(real_data.get("zone_data", []))
                total_details = sum(len(zone.get("details", [])) for zone in real_data.get("zone_data", []))
                options_data = real_data.get("options_data", {})
                total_options = sum(len(zone.get("options", [])) for zone in options_data.get("zones", []))
                
                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
                logger.info(f"   - –ó–æ–Ω: {zone_count}")
                logger.info(f"   - –î–µ—Ç–∞–ª–µ–π: {total_details}")
                logger.info(f"   - –û–ø—Ü–∏–π: {total_options}")
                logger.info(f"   - VIN —Å—Ç–∞—Ç—É—Å: {real_data.get('vin_status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ UPSERT —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞: {e}")

if __name__ == "__main__":
    asyncio.run(test_database_optimizations()) 