"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–±–æ—Ä–∞ –æ–ø—Ü–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã Audatex.
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±–æ–±—â–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –±–µ–∑ –∂–µ—Å—Ç–∫–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏.
"""

import logging
import time
import re
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException, WebDriverException

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∞–π–º–∞—É—Ç–æ–≤
OPTION_TIMEOUT = 15
FAST_POLL_INTERVAL = 0.1
SECTION_TIMEOUT = 10
OPTION_POLL_INTERVAL = 0.2


def wait_for_element_stable(driver, selector, timeout=OPTION_TIMEOUT):
    """–ñ–¥–µ—Ç —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º polling"""
    wait = WebDriverWait(driver, timeout, poll_frequency=FAST_POLL_INTERVAL,
                        ignored_exceptions=[NoSuchElementException, TimeoutException])
    return wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, selector)))


def wait_for_element_clickable(driver, selector, timeout=OPTION_TIMEOUT):
    """–ñ–¥–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫ –∫–ª–∏–∫—É"""
    wait = WebDriverWait(driver, timeout, poll_frequency=FAST_POLL_INTERVAL)
    return wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, selector)))


def wait_for_content_loaded(driver, timeout=SECTION_TIMEOUT):
    """–ñ–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ–ø—Ü–∏–π"""
    wait = WebDriverWait(driver, timeout, poll_frequency=OPTION_POLL_INTERVAL,
                        ignored_exceptions=[NoSuchElementException])
    return wait.until(
        lambda d: d.find_element(By.CSS_SELECTOR, "#model-options-section-content")
    )


def navigate_to_options(driver):
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Ä–∞–∑–¥–µ–ª—É –æ–ø—Ü–∏–π —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä #navigation-adjustment"""
    logger.info("üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞–∑–¥–µ–ª—É –æ–ø—Ü–∏–π")
    
    try:
        current_url = driver.current_url
        logger.info(f"üîç –¢–µ–∫—É—â–∏–π URL: {current_url}")
        
        ready_state = driver.execute_script("return document.readyState")
        logger.info(f"üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {ready_state}")
        
        iframe_selector = "#iframe_root\\.task\\.damageCapture\\.inlineWebPad"
        logger.info(f"üîç –ò—â–µ–º iframe: {iframe_selector}")
        
        iframe = wait_for_element_stable(driver, iframe_selector)
        logger.info("‚úÖ Iframe –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –Ω–µ–≥–æ")
        
        driver.switch_to.frame(iframe)
        logger.info("‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –≤ iframe")
        
        logger.info("üîç –ò—â–µ–º span —ç–ª–µ–º–µ–Ω—Ç navigation-adjustment –≤–Ω—É—Ç—Ä–∏ iframe...")
        adjustment_span = wait_for_element_clickable(driver, "#navigation-adjustment")
        adjustment_span.click()
        logger.info("‚úÖ –ö–ª–∏–∫ –ø–æ span#navigation-adjustment –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
        options_container = wait_for_element_stable(driver, "#model-options-sections")
        logger.info("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ–ø—Ü–∏–π #model-options-sections –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        return True
        
    except (TimeoutException, WebDriverException) as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –æ–ø—Ü–∏—è–º: {e}")
        return False


def ensure_in_iframe(driver):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –Ω—É–∂–Ω–æ–º iframe, –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    try:
        driver.find_element(By.CSS_SELECTOR, "#model-options-sections")
        return True
    except:
        try:
            driver.switch_to.default_content()
            iframe_selector = "#iframe_root\\.task\\.damageCapture\\.inlineWebPad"
            iframe = wait_for_element_stable(driver, iframe_selector)
            driver.switch_to.frame(iframe)
            logger.debug("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –≤ iframe –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø—Ü–∏—è–º–∏")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ iframe: {e}")
            return False


def extract_option_zones(driver):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –í–°–ï –∑–æ–Ω—ã –æ–ø—Ü–∏–π –∏–∑ div#model-options-sections –≤–∫–ª—é—á–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ"""
    logger.info("üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –í–°–ï –∑–æ–Ω—ã –æ–ø—Ü–∏–π –∏–∑ model-options-sections (–≤–∫–ª—é—á–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ)")
    zones = []
    
    try:
        if not ensure_in_iframe(driver):
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ iframe –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–æ–Ω")
            return zones
        
        zones_container = wait_for_element_stable(driver, "#model-options-sections")
        zone_sections = zones_container.find_elements(By.CSS_SELECTOR, "div.model-options-section")
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(zone_sections)} —Å–µ–∫—Ü–∏–π –∑–æ–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ")
        
        for section in zone_sections:
            section_id = section.get_attribute("id")
            data_value = section.get_attribute("data-value")
            
            # –£–ë–ò–†–ê–ï–ú –§–ò–õ–¨–¢–†–ê–¶–ò–Æ - —Ç–µ–ø–µ—Ä—å —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–æ–Ω—ã –≤–∫–ª—é—á–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ
            # if section_id in ["model-options-section-all-selected", "model-options-section-zone-relevant"]:
            #     logger.debug(f"‚è© –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ–∫—Ü–∏—é: {section_id}")
            #     continue
                
            if section_id and (section_id.startswith("model-options-section-") or section_id == "predefined-model-options-section"):
                try:
                    description_span = section.find_element(By.CSS_SELECTOR, "span.model-options-section-description")
                    zone_title = description_span.text.strip()
                    
                    if zone_title:
                        zones.append({
                            "id": section_id,
                            "data_value": data_value,
                            "title": zone_title,
                            "element": section
                        })
                        # –ü–æ–º–µ—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–æ–Ω—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                        zone_type = "—Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è" if section_id in ["model-options-section-all-selected", "model-options-section-zone-relevant"] else "–æ–±—ã—á–Ω–∞—è"
                        logger.info(f"üìù –ó–æ–Ω–∞ –æ–ø—Ü–∏–π ({zone_type}): '{zone_title}' (ID: {section_id}, data-value: {data_value})")
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–æ–Ω—ã {section_id}: {e}")
                    continue
        
        

        logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(zones)} –∑–æ–Ω –æ–ø—Ü–∏–π (–≤–∫–ª—é—á–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ)")
        return zones
        
    except (TimeoutException, WebDriverException) as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–æ–Ω –æ–ø—Ü–∏–π: {e}")
        return []


def parse_option_code_title(option_text):
    """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç –æ–ø—Ü–∏–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–¥–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    if not option_text or not option_text.strip():
        return "", ""
    
    original_text = option_text.strip()
    
    # –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å " - ", –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    separator_index = original_text.find(" - ")
    
    if separator_index != -1:
        code = original_text[:separator_index].strip()
        title = original_text[separator_index + 3:].strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–¥ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–æ–±—ã—á–Ω–æ –∫–æ–¥—ã –∫–æ—Ä–æ—Ç–∫–∏–µ)
        if len(code) <= 10 and code and title:
            return code, title
        else:
            # –ï—Å–ª–∏ "–∫–æ–¥" —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –≤–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ –Ω–µ –Ω–∞—Å—Ç–æ—è—â–∏–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            return "", original_text
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–¥ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (–±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)
    code_match = re.match(r'^([A-Za-z0-9]{1,10})\s+(.+)', original_text)
    if code_match:
        code = code_match.group(1)
        title = code_match.group(2).strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ title –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º –∫–æ–¥–∞
        if title and len(title) > 3:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
            return code, title
    
    # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –∫–æ–¥ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ
    # –ù–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç
    if len(original_text) >= 3:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–π –æ–ø—Ü–∏–∏
        return "", original_text
    else:
        # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç, –≤–µ—Ä–æ—è—Ç–Ω–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
        logger.debug(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç: '{original_text}'")
        return "", ""


def extract_sections_from_container(content_container):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å–µ–∫—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å"""
    sections = []
    errors = []
    
    try:
        section_selectors = [
            "div.model-options-sub-page-title",
            "div[class*='sub-page-title']",
            "div[id*='sub-page-title']"
        ]
        
        section_elements = []
        for selector in section_selectors:
            try:
                found_sections = content_container.find_elements(By.CSS_SELECTOR, selector)
                if found_sections:
                    section_elements.extend(found_sections)
                    logger.debug(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(found_sections)} —Å–µ–∫—Ü–∏–π —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}")
            except Exception as e:
                logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–µ–∫—Ü–∏–π —á–µ—Ä–µ–∑ {selector}: {e}")
                continue
        
        unique_sections = []
        seen_texts = set()
        
        for section_el in section_elements:
            try:
                section_text = section_el.text.strip()
                if section_text and section_text not in seen_texts:
                    unique_sections.append({
                        "element": section_el,
                        "text": section_text
                    })
                    seen_texts.add(section_text)
                    logger.debug(f"üìã –ù–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è: '{section_text}'")
            except Exception as e:
                errors.append(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ–∫—Ü–∏–∏: {e}")
                continue
        
        sections = unique_sections
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–µ–∫—Ü–∏–π: {e}"
        logger.warning(f"‚ö†Ô∏è {error_msg}")
        errors.append(error_msg)
    
    logger.info(f"üìã –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(sections)} —Å–µ–∫—Ü–∏–π, –æ—à–∏–±–æ–∫: {len(errors)}")
    return sections, errors


def extract_azt_options_from_container(content_container):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø—Ü–∏–∏ AZT –∑–æ–Ω—ã —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏"""
    options = []
    errors = []
    
    try:
        logger.info("üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ AZT –∑–æ–Ω—ã...")
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä AZT
        azt_containers = []
        azt_selectors = [
            "#paint-system-options",
            "#azt-paint-system-options", 
            "div[id*='paint-system']",
            "div[id*='azt']"
        ]
        
        for container_selector in azt_selectors:
            try:
                containers = content_container.find_elements(By.CSS_SELECTOR, container_selector)
                if containers:
                    azt_containers.extend(containers)
                    logger.info(f"üéØ –ù–∞–π–¥–µ–Ω AZT –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —á–µ—Ä–µ–∑: {container_selector}")
                    break
            except:
                continue
        
        if not azt_containers:
            logger.debug("‚ÑπÔ∏è AZT –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return options, errors
        
        # –ò—â–µ–º —Å–ø–∏—Å–æ–∫ AZT –æ–ø—Ü–∏–π
        li_elements = []
        for container in azt_containers:
            try:
                # –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä –∏–∑ HTML –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                ul_elements = container.find_elements(By.CSS_SELECTOR, "ul.ps-azt-list")
                for ul in ul_elements:
                    li_elements.extend(ul.find_elements(By.TAG_NAME, "li"))
                    
                if li_elements:
                    logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(li_elements)} AZT –æ–ø—Ü–∏–π –≤ ul.ps-azt-list")
                    break
                else:
                    # Fallback —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                    fallback_selectors = [
                        "ul[class*='azt-list'] li",
                        "ul[class*='azt'] li", 
                        "li[class*='azt']"
                    ]
                    for fallback in fallback_selectors:
                        try:
                            li_elements = container.find_elements(By.CSS_SELECTOR, fallback)
                            if li_elements:
                                logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(li_elements)} AZT –æ–ø—Ü–∏–π —á–µ—Ä–µ–∑ fallback: {fallback}")
                                break
                        except:
                            continue
                    if li_elements:
                        break
            except Exception as e:
                logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ AZT –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ: {e}")
                continue
        
        if not li_elements:
            logger.info("‚ÑπÔ∏è AZT –æ–ø—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return options, errors
        
        logger.info(f"üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(li_elements)} AZT —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        for i, li in enumerate(li_elements):
            try:
                # –ò—â–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø—Ü–∏–∏
                description_text = ""
                description_selectors = [
                    "div.ps-azt-description-text",
                    "div[class*='description-text']",
                    "div[class*='azt-description']"
                ]
                
                for desc_selector in description_selectors:
                    try:
                        desc_element = li.find_element(By.CSS_SELECTOR, desc_selector)
                        description_text = desc_element.text.strip()
                        if description_text:
                            break
                    except:
                        continue
                
                if not description_text:
                    error_msg = f"AZT —ç–ª–µ–º–µ–Ω—Ç {i+1}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ"
                    logger.debug(f"‚ö†Ô∏è {error_msg}")
                    errors.append(error_msg)
                    continue
                
                # –ò—â–µ–º —Å—Ç–∞—Ç—É—Å —á–µ–∫–±–æ–∫—Å–∞
                is_selected = False
                checkbox_selectors = [
                    "input[type='checkbox']",
                    "input[type='checkbox'].toggle-input", 
                    "span.ps-azt-checkbox-container input[type='checkbox']",
                    "label.toggle input[type='checkbox']"
                ]
                
                for cb_selector in checkbox_selectors:
                    try:
                        checkbox = li.find_element(By.CSS_SELECTOR, cb_selector)
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∞—Ç—Ä–∏–±—É—Ç checked –∏ —Å–≤–æ–π—Å—Ç–≤–æ checked
                        checked_attr = checkbox.get_attribute("checked")
                        checked_prop = checkbox.get_property("checked")
                        is_selected = checked_attr is not None or checked_prop
                        logger.debug(f"AZT –æ–ø—Ü–∏—è {i+1}: checked_attr={checked_attr}, checked_prop={checked_prop}, selected={is_selected}")
                        break
                    except Exception as cb_error:
                        logger.debug(f"‚ö†Ô∏è AZT —ç–ª–µ–º–µ–Ω—Ç {i+1}, —Å–µ–ª–µ–∫—Ç–æ—Ä {cb_selector}: {cb_error}")
                        continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º AZT
                options.append({
                    "code": "",
                    "title": f"AZT - {description_text}",
                    "selected": is_selected,
                    "source": "azt_zone"
                })
                
                status_mark = "‚úÖ" if is_selected else "‚ùå"
                logger.debug(f"{status_mark} AZT –æ–ø—Ü–∏—è {i+1}: AZT - {description_text}")
                
            except Exception as e:
                error_msg = f"AZT —ç–ª–µ–º–µ–Ω—Ç {i+1}: {e}"
                logger.warning(f"‚ö†Ô∏è {error_msg}")
                errors.append(error_msg)
                continue
        
        logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(options)} AZT –æ–ø—Ü–∏–π, –æ—à–∏–±–æ–∫: {len(errors)}")
        
    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è AZT: {e}"
        logger.error(f"‚ùå {error_msg}")
        errors.append(error_msg)
    
    return options, errors


def extract_predefined_options_from_container(content_container):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ predefined-model-options"""
    options = []
    errors = []
    
    try:
        logger.info("üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π...")
        
        # –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π
        predefined_containers = []
        predefined_selectors = [
            "#predefined-model-options",
            "div[id*='predefined-model-options']",
            "div[class*='predefined-model-options']"
        ]
        
        for container_selector in predefined_selectors:
            try:
                containers = content_container.find_elements(By.CSS_SELECTOR, container_selector)
                if containers:
                    predefined_containers.extend(containers)
                    logger.info(f"üéØ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π —á–µ—Ä–µ–∑: {container_selector}")
                    break
            except:
                continue
        
        if not predefined_containers:
            logger.debug("‚ÑπÔ∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return options, errors
        
        # –ò—â–µ–º –æ–ø—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        option_elements = []
        for container in predefined_containers:
            try:
                # –ò—â–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–ø—Ü–∏–π
                option_selectors = [
                    "div.model-option",
                    "div[class*='model-option']", 
                    "div[class*='option']",
                    "li.model-option",
                    "li[class*='option']"
                ]
                
                for selector in option_selectors:
                    try:
                        found_options = container.find_elements(By.CSS_SELECTOR, selector)
                        if found_options:
                            option_elements.extend(found_options)
                            logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(found_options)} –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π —á–µ—Ä–µ–∑: {selector}")
                    except:
                        continue
                        
                if option_elements:
                    break
                    
            except Exception as e:
                logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π: {e}")
                continue
        
        if not option_elements:
            logger.info("‚ÑπÔ∏è –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ")
            return options, errors
        
        logger.info(f"üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(option_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
        for i, element in enumerate(option_elements):
            try:
                option_data, element_errors = extract_option_from_element(element, "predefined")
                errors.extend(element_errors)
                
                if option_data:
                    options.append(option_data)
                    logger.debug(f"‚úÖ –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –æ–ø—Ü–∏—è {i+1}: {option_data.get('title', '–ë–ï–ó –ù–ê–ó–í–ê–ù–ò–Ø')}")
                
            except Exception as e:
                error_msg = f"–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –æ–ø—Ü–∏—è {i+1}: {e}"
                logger.warning(f"‚ö†Ô∏è {error_msg}")
                errors.append(error_msg)
                continue
        
        logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(options)} –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π, –æ—à–∏–±–æ–∫: {len(errors)}")
        
    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π: {e}"
        logger.error(f"‚ùå {error_msg}")
        errors.append(error_msg)
    
    return options, errors


def extract_regular_options_from_container(content_container):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–ø—Ü–∏–π –∏–∑ regular-options —Å–µ–∫—Ü–∏–∏"""
    options = []
    errors = []
    
    try:
        logger.info("üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ regular-options —Å–µ–∫—Ü–∏–∏...")
        
        # –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä regular-options
        regular_options_container = None
        regular_selectors = [
            "#regular-options",
            "div#regular-options",
            "div[class*='regular-options']"
        ]
        
        for container_selector in regular_selectors:
            try:
                containers = content_container.find_elements(By.CSS_SELECTOR, container_selector)
                if containers:
                    regular_options_container = containers[0]
                    logger.info(f"üéØ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä regular-options —á–µ—Ä–µ–∑: {container_selector}")
                    break
            except:
                continue
        
        if not regular_options_container:
            logger.debug("‚ÑπÔ∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä regular-options –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return options, errors
        
        # –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º isolated-model-option-in-group
        isolated_elements = regular_options_container.find_elements(By.CSS_SELECTOR, "div.isolated-model-option-in-group")
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(isolated_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ isolated-model-option-in-group")
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ –¥—Ä—É–≥–∏–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
        if not isolated_elements:
            isolated_elements = regular_options_container.find_elements(By.XPATH, ".//*[contains(@class, 'isolated-model-option-in-group')]")
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(isolated_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ XPath")
        
        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ id –Ω–∞—á–∏–Ω–∞—é—â–∏–º—Å—è —Å 's-'
        if not isolated_elements:
            isolated_elements = regular_options_container.find_elements(By.XPATH, ".//*[starts-with(@id, 's-')]")
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(isolated_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å id –Ω–∞—á–∏–Ω–∞—é—â–∏–º—Å—è —Å 's-'")
        
        if not isolated_elements:
            logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–ø—Ü–∏–π –≤ regular-options")
            return options, errors
        
        logger.info(f"üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(isolated_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ regular-options")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info(f"üìä –ü–µ—Ä–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã regular-options:")
        for i, elem in enumerate(isolated_elements[:3]):
            elem_class = elem.get_attribute("class") or ""
            elem_id = elem.get_attribute("id") or ""
            elem_text = elem.text.strip()[:50] if elem.text else ""
            logger.info(f"    {i+1}. class='{elem_class}' id='{elem_id}' text='{elem_text}'")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
        for i, element in enumerate(isolated_elements):
            # –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ regular –æ–ø—Ü–∏–π
            batch_processing_pause(i, len(isolated_elements), "regular –æ–ø—Ü–∏–π")
            
            try:
                option_data, element_errors = extract_option_from_element(element, "regular")
                errors.extend(element_errors)
                
                if option_data:
                    options.append(option_data)
                    logger.debug(f"‚úÖ Regular –æ–ø—Ü–∏—è {i+1}: {option_data.get('title', '–ë–ï–ó –ù–ê–ó–í–ê–ù–ò–Ø')}")
                
            except Exception as e:
                error_msg = f"Regular –æ–ø—Ü–∏—è {i+1}: {e}"
                logger.warning(f"‚ö†Ô∏è {error_msg}")
                errors.append(error_msg)
                continue
        
        logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(options)} regular –æ–ø—Ü–∏–π, –æ—à–∏–±–æ–∫: {len(errors)}")
        
    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è regular –æ–ø—Ü–∏–π: {e}"
        logger.error(f"‚ùå {error_msg}")
        errors.append(error_msg)
    
    return options, errors


def find_all_option_elements_in_container(content_container):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–ø—Ü–∏–π –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"""
    option_elements = []
    errors = []
    
    try:
        logger.debug("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–ø—Ü–∏–π –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ...")
        
        option_selectors = [
            "div.model-option",
            "div[class*='model-option']",
            "div[class*='option']",
            "*[class*='model-option']",
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è isolated-model-option-in-group
            "div.isolated-model-option-in-group",
            "div[class*='isolated-model-option-in-group']",
            "*[class*='isolated-model-option-in-group']",
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø—Ü–∏–π
            "div[id^='s-']",
            "div[data-value]",
            "div[data-parent]",
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å model-option-description
            "div:has(span.model-option-description)",
            "div:has(span[class*='option-description'])",
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ model-option-group
            "div.model-option-group div[class*='model-option']",
            "div.model-option-group div[class*='option']",
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ model-option-sub-group-content
            "div.model-option-sub-group-content div[class*='model-option']",
            "div.model-option-sub-group-content div[class*='option']"
        ]
        
        for selector in option_selectors:
            try:
                logger.debug(f"üîç –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}")
                found_elements = content_container.find_elements(By.CSS_SELECTOR, selector)
                
                new_elements = 0
                for element in found_elements:
                    if element not in option_elements:
                        option_elements.append(element)
                        new_elements += 1
                
                logger.debug(f"üîç –°–µ–ª–µ–∫—Ç–æ—Ä '{selector}': –Ω–∞–π–¥–µ–Ω–æ {len(found_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –Ω–æ–≤—ã—Ö: {new_elements}")
                    
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ {selector}: {e}"
                logger.debug(f"‚ö†Ô∏è {error_msg}")
                errors.append(error_msg)
                continue
        
        logger.info(f"üîç –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(option_elements)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–ø—Ü–∏–π")
        
        if len(option_elements) == 0:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–ø—Ü–∏–π, –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...")
            
            try:
                # –ò—â–µ–º –≤—Å–µ div —ç–ª–µ–º–µ–Ω—Ç—ã
                all_divs = content_container.find_elements(By.TAG_NAME, "div")
                logger.warning(f"    üìä –í—Å–µ–≥–æ div —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ: {len(all_divs)}")
                
                # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å class —Å–æ–¥–µ—Ä–∂–∞—â–∏–º 'option'
                option_like = content_container.find_elements(By.XPATH, ".//*[contains(@class, 'option')]")
                logger.warning(f"    üìä –≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Å 'option' –≤ –∫–ª–∞—Å—Å–µ: {len(option_like)}")
                
                # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å class —Å–æ–¥–µ—Ä–∂–∞—â–∏–º 'model'
                model_like = content_container.find_elements(By.XPATH, ".//*[contains(@class, 'model')]")
                logger.warning(f"    üìä –≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Å 'model' –≤ –∫–ª–∞—Å—Å–µ: {len(model_like)}")
                
                # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å class —Å–æ–¥–µ—Ä–∂–∞—â–∏–º 'isolated'
                isolated_like = content_container.find_elements(By.XPATH, ".//*[contains(@class, 'isolated')]")
                logger.warning(f"    üìä –≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Å 'isolated' –≤ –∫–ª–∞—Å—Å–µ: {len(isolated_like)}")
                
                # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å id –Ω–∞—á–∏–Ω–∞—é—â–∏–º—Å—è —Å 's-'
                s_id_elements = content_container.find_elements(By.XPATH, ".//*[starts-with(@id, 's-')]")
                logger.warning(f"    üìä –≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Å id –Ω–∞—á–∏–Ω–∞—é—â–∏–º—Å—è —Å 's-': {len(s_id_elements)}")
                
                # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-value
                data_value_elements = content_container.find_elements(By.XPATH, ".//*[@data-value]")
                logger.warning(f"    üìä –≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Å data-value: {len(data_value_elements)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ div —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                logger.warning("    üìä –ü–µ—Ä–≤—ã–µ 5 div —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
                for i, div in enumerate(all_divs[:5]):
                    div_class = div.get_attribute("class") or ""
                    div_id = div.get_attribute("id") or ""
                    div_text = div.text.strip()[:50] if div.text else ""
                    logger.warning(f"        {i+1}. class='{div_class}' id='{div_id}' text='{div_text}'")
                    
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å isolated –≤ –∫–ª–∞—Å—Å–µ
                if isolated_like:
                    logger.warning("    üìä –≠–ª–µ–º–µ–Ω—Ç—ã —Å 'isolated' –≤ –∫–ª–∞—Å—Å–µ:")
                    for i, elem in enumerate(isolated_like[:3]):
                        elem_class = elem.get_attribute("class") or ""
                        elem_id = elem.get_attribute("id") or ""
                        elem_text = elem.text.strip()[:50] if elem.text else ""
                        logger.warning(f"        {i+1}. class='{elem_class}' id='{elem_id}' text='{elem_text}'")
                        
            except Exception as diag_error:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {diag_error}")
        
    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–ø—Ü–∏–π: {e}"
        logger.error(f"‚ùå {error_msg}")
        errors.append(error_msg)
    
    return option_elements, errors


def extract_option_from_element(option_element, section_suffix=""):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    option_data = None
    errors = []
    
    try:
        class_attr = option_element.get_attribute("class") or ""
        is_selected = "selected" in class_attr
        
        option_text = ""
        text_selectors = [
            "span.model-option-description",
            "span[class*='option-description']", 
            "span[class*='description']",
            "*[class*='description']",
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è isolated-model-option-in-group
            "span.mo-white-space",
            "span[class*='white-space']",
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            "span",
            "div",
            "label"
        ]
        
        for text_selector in text_selectors:
            try:
                text_elements = option_element.find_elements(By.CSS_SELECTOR, text_selector)
                for text_element in text_elements:
                    candidate_text = text_element.text.strip()
                    if candidate_text and len(candidate_text) > 2:
                        option_text = candidate_text
                        break
                if option_text:
                    break
            except:
                continue
        
        if not option_text:
            try:
                option_text = option_element.text.strip()
                lines = option_text.split('\n')
                if lines:
                    option_text = lines[0].strip()
            except:
                pass
        
        if option_text:
            code, title = parse_option_code_title(option_text)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            logger.debug(f"üîç –ü–∞—Ä—Å–∏–Ω–≥: '{option_text}' -> –∫–æ–¥='{code}', –Ω–∞–∑–≤–∞–Ω–∏–µ='{title}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –ª–∏–±–æ –∫–æ–¥ –ª–∏–±–æ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            if not code and not title:
                errors.append(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: '{option_text}'")
                return None, errors
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±–µ–∑ –∫–æ–¥–∞
            if not code and title and len(title) < 5:
                suspicious_words = ["–∫–ø–ø", "–ª–∫–ø", "–±–µ–Ω–∑–∏–Ω", "–¥–∏–∑–µ–ª—å", "–≥–∞–∑", "–∞–∫–ø", "–º–∫–ø"]
                if title.lower() in suspicious_words:
                    errors.append(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: '{title}'")
                    return None, errors
            
            final_title = f"{title}_{section_suffix}" if section_suffix and title else title
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç—å
            if final_title and len(final_title.replace("_", " ").strip()) >= 3:
                option_data = {
                    "code": code,
                    "title": final_title,
                    "selected": is_selected,
                    "source": "regular_option"
                }
                
                status_mark = "‚úÖ" if is_selected else "‚ùå"
                logger.debug(f"{status_mark} –û–ø—Ü–∏—è: {code} - {final_title}")
            else:
                errors.append(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: '{final_title}'")
        else:
            errors.append("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –æ–ø—Ü–∏–∏")
            
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–ø—Ü–∏–∏: {e}"
        logger.debug(f"‚ö†Ô∏è {error_msg}")
        errors.append(error_msg)
    
    return option_data, errors


def extract_options_with_sections(content_container, sections):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø—Ü–∏–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Å–µ–∫—Ü–∏—è–º"""
    options = []
    errors = []
    
    try:
        logger.info(f"üîß –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø—Ü–∏–∏ –ø–æ —Å–µ–∫—Ü–∏—è–º (–Ω–∞–π–¥–µ–Ω–æ {len(sections)} —Å–µ–∫—Ü–∏–π)")
        
        for section in sections:
            section_name = section["text"]
            section_element = section["element"]
            
            try:
                next_elements = []
                current = section_element
                
                while True:
                    try:
                        current = current.find_element(By.XPATH, "following-sibling::*[1]")
                        
                        current_class = current.get_attribute("class") or ""
                        if any(sec_class in current_class for sec_class in ["sub-page-title", "section-title"]):
                            break
                        
                        next_elements.append(current)
                        
                        if len(next_elements) > 20:
                            break
                            
                    except:
                        break
                
                section_option_count = 0
                for element in next_elements:
                    try:
                        inner_option_elements, inner_errors = find_all_option_elements_in_container(element)
                        errors.extend(inner_errors)
                        
                        for option_element in inner_option_elements:
                            option_data, option_errors = extract_option_from_element(option_element, section_name)
                            errors.extend(option_errors)
                            
                            if option_data is not None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ None
                                options.append(option_data)
                                section_option_count += 1
                            else:
                                logger.debug(f"‚ö†Ô∏è –û–ø—Ü–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞ –≤ —Å–µ–∫—Ü–∏–∏ '{section_name}'")
                                
                    except Exception as e:
                        error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–µ–∫—Ü–∏–∏ '{section_name}': {e}"
                        logger.debug(f"‚ö†Ô∏è {error_msg}")
                        errors.append(error_msg)
                        continue
                
                logger.info(f"üìã –°–µ–∫—Ü–∏—è '{section_name}': –Ω–∞–π–¥–µ–Ω–æ {section_option_count} –≤–∞–ª–∏–¥–Ω—ã—Ö –æ–ø—Ü–∏–π")
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ–∫—Ü–∏–∏ '{section_name}': {e}"
                logger.warning(f"‚ö†Ô∏è {error_msg}")
                errors.append(error_msg)
                continue
        
    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–ø—Ü–∏–π –ø–æ —Å–µ–∫—Ü–∏—è–º: {e}"
        logger.error(f"‚ùå {error_msg}")
        errors.append(error_msg)
    
    return options, errors


def extract_options_without_sections(content_container):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø—Ü–∏–∏ –±–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ —Å–µ–∫—Ü–∏—è–º"""
    options = []
    errors = []
    
    try:
        logger.info("üîß –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø—Ü–∏–∏ –±–µ–∑ —Å–µ–∫—Ü–∏–π")
        
        option_elements, search_errors = find_all_option_elements_in_container(content_container)
        errors.extend(search_errors)
        
        valid_count = 0
        for i, option_element in enumerate(option_elements):
            # –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø—Ü–∏–π
            batch_processing_pause(i, len(option_elements), "–æ–ø—Ü–∏–π")
            
            option_data, option_errors = extract_option_from_element(option_element)
            errors.extend(option_errors)
            
            if option_data is not None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ None
                options.append(option_data)
                valid_count += 1
            else:
                logger.debug(f"‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –æ–ø—Ü–∏–∏ {i+1}: –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω")
        
        logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {valid_count} –≤–∞–ª–∏–¥–Ω—ã—Ö –æ–ø—Ü–∏–π –±–µ–∑ —Å–µ–∫—Ü–∏–π (–∏–∑ {len(option_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
        
    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–ø—Ü–∏–π –±–µ–∑ —Å–µ–∫—Ü–∏–π: {e}"
        logger.error(f"‚ùå {error_msg}")
        errors.append(error_msg)
    
    return options, errors


def extract_zone_options_universal(driver, zone):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–ø—Ü–∏–π –∏–∑ –ª—é–±–æ–π –∑–æ–Ω—ã —Å –æ–±–æ–±—â–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º"""
    logger.info(f"üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–æ–Ω—É: '{zone['title']}'")
    logger.info(f"    üìç ID –∑–æ–Ω—ã: {zone.get('id', '–ù–ï–¢')}")
    logger.info(f"    üìç Data-value: {zone.get('data_value', '–ù–ï–¢')}")
    
    options = []
    all_errors = []
    processing_notes = []
    
    try:
        if not ensure_in_iframe(driver):
            error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ iframe –¥–ª—è –∑–æ–Ω—ã '{zone['title']}'"
            logger.error(f"‚ùå {error_msg}")
            return [], [error_msg], [f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {error_msg}"]
        
        logger.info(f"‚úÖ –ö–ª–∏–∫–∞–µ–º –ø–æ –∑–æ–Ω–µ '{zone['title']}'...")
        
        # –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –∫–ª–∏–∫ —Å –ø–∞—É–∑–∞–º–∏ –∏ –¥–≤–∏–∂–µ–Ω–∏–µ–º –º—ã—à–∏
        human_click(driver, zone['element'], f"–∑–æ–Ω—É '{zone['title']}'")
        logger.debug(f"‚úÖ –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –∫–ª–∏–∫ –ø–æ –∑–æ–Ω–µ '{zone['title']}' –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
        logger.info(f"üîÑ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∑–æ–Ω—ã '{zone['title']}'...")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        reading_pause()
        
        content_container = wait_for_content_loaded(driver)
        logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –∑–æ–Ω—ã '{zone['title']}'")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        try:
            container_class = content_container.get_attribute("class") or ""
            container_id = content_container.get_attribute("id") or ""
            logger.info(f"üìä –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ID='{container_id}', CLASS='{container_class}'")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            child_elements = content_container.find_elements(By.XPATH, "./*")
            logger.info(f"üìä –î–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ: {len(child_elements)}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            for i, child in enumerate(child_elements[:5]):
                child_tag = child.tag_name
                child_class = child.get_attribute("class") or ""
                child_id = child.get_attribute("id") or ""
                logger.debug(f"    {i+1}. <{child_tag}> id='{child_id}' class='{child_class}'")
                
        except Exception as log_error:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {log_error}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—É—Å—Ç—É—é –∑–æ–Ω—É
        try:
            no_options_msg = content_container.find_element(By.CSS_SELECTOR, "#model-option-group-message")
            if "–ù–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–π –∑–æ–Ω—ã" in no_options_msg.text:
                logger.info(f"‚ÑπÔ∏è –ó–æ–Ω–∞ '{zone['title']}': –ø—É—Å—Ç–∞—è –∑–æ–Ω–∞")
                return [{
                    "code": "",
                    "title": "–ù–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–π –∑–æ–Ω—ã",
                    "selected": False,
                    "source": "empty_zone"
                }], [], ["–ó–æ–Ω–∞ –ø—É—Å—Ç–∞—è - —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–ø—Ü–∏–π"]
        except NoSuchElementException:
            logger.debug(f"‚úÖ –ó–æ–Ω–∞ '{zone['title']}': –ù–ï –ø—É—Å—Ç–∞—è (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–ø—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–æ–Ω—É "–í—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏"
        if zone.get('id') == 'model-options-section-all-selected' or 'all-selected' in zone.get('id', ''):
            logger.info(f"üéØ –ó–æ–Ω–∞ '{zone['title']}': –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ '–í—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏'")
            all_selected_options, all_selected_errors = extract_all_selected_options_from_container(content_container)
            all_errors.extend(all_selected_errors)
            
            if all_selected_options:
                logger.info(f"‚úÖ –ó–æ–Ω–∞ '{zone['title']}': –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–∞–∫ '–í—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏'")
                processing_notes.append("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ –∑–æ–Ω–∞ '–í—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏'")
                return all_selected_options, all_errors, processing_notes
            else:
                logger.warning(f"‚ö†Ô∏è –ó–æ–Ω–∞ '{zone['title']}': –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏")
        


        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ AZT –∑–æ–Ω—É
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–æ–Ω—É '{zone['title']}' –Ω–∞ AZT...")
        azt_options, azt_errors = extract_azt_options_from_container(content_container)
        all_errors.extend(azt_errors)
        
        if azt_options:
            logger.info(f"‚úÖ –ó–æ–Ω–∞ '{zone['title']}': –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–∞–∫ AZT –∑–æ–Ω–∞")
            processing_notes.append("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ AZT –∑–æ–Ω–∞")
            return azt_options, all_errors, processing_notes
        else:
            logger.info(f"‚ÑπÔ∏è –ó–æ–Ω–∞ '{zone['title']}': –ù–ï AZT –∑–æ–Ω–∞")
        
        # –ò—â–µ–º —Å–µ–∫—Ü–∏–∏
        logger.info(f"üîç –ò—â–µ–º —Å–µ–∫—Ü–∏–∏ –≤ –∑–æ–Ω–µ '{zone['title']}'...")
        sections, section_errors = extract_sections_from_container(content_container)
        all_errors.extend(section_errors)
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —Å–µ–∫—Ü–∏–π –≤ –∑–æ–Ω–µ '{zone['title']}': {len(sections)}")
        
        if sections:
            for i, section in enumerate(sections):
                logger.info(f"    üìã –°–µ–∫—Ü–∏—è {i+1}: '{section['text']}'")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø—Ü–∏–∏
        if sections:
            logger.info(f"üîß –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø—Ü–∏–∏ –ø–æ —Å–µ–∫—Ü–∏—è–º –¥–ª—è –∑–æ–Ω—ã '{zone['title']}'...")
            section_options, section_option_errors = extract_options_with_sections(content_container, sections)
            all_errors.extend(section_option_errors)
            options.extend(section_options)
            processing_notes.append(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(sections)} —Å–µ–∫—Ü–∏–π —Å –æ–ø—Ü–∏—è–º–∏")
            logger.info(f"üìã –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(section_options)} –æ–ø—Ü–∏–π –∏–∑ —Å–µ–∫—Ü–∏–π –≤ –∑–æ–Ω–µ '{zone['title']}'")
        else:
            # –ò—â–µ–º –æ–ø—Ü–∏–∏ –±–µ–∑ —Å–µ–∫—Ü–∏–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)
            logger.info(f"üîß –ò—â–µ–º –æ–ø—Ü–∏–∏ –±–µ–∑ —Å–µ–∫—Ü–∏–π –≤ –∑–æ–Ω–µ '{zone['title']}'...")
            regular_options, regular_errors = extract_regular_options_from_container(content_container)
            all_errors.extend(regular_errors)
            options.extend(regular_options)
            processing_notes.append("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ –∑–æ–Ω–∞ –±–µ–∑ —Å–µ–∫—Ü–∏–π")
            logger.info(f"üìã –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(regular_options)} –æ–ø—Ü–∏–π –±–µ–∑ —Å–µ–∫—Ü–∏–π –≤ –∑–æ–Ω–µ '{zone['title']}'")
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –ø–æ–ª–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é title –∏ code
        initial_count = len(options)
        unique_options = []
        seen_combinations = set()
        
        for option in options:
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∏–∑ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ code –∏ title
            option_key = (option.get("code", ""), option.get("title", ""))
            
            if option_key not in seen_combinations:
                unique_options.append(option)
                seen_combinations.add(option_key)
            else:
                logger.debug(f"üîÑ –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç: {option.get('code', '')} - {option.get('title', '')}")
        
        # –ó–∞–º–µ–Ω—è–µ–º options –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ
        options = unique_options
        duplicates_removed = initial_count - len(options)
        if duplicates_removed > 0:
            logger.info(f"üîÑ –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –∑–æ–Ω–µ '{zone['title']}': {duplicates_removed}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_found = len(options)
        error_count = len(all_errors)
        
        if total_found > 0:
            logger.info(f"‚úÖ –ó–æ–Ω–∞ '{zone['title']}': –∏–∑–≤–ª–µ—á–µ–Ω–æ {total_found} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π, –æ—à–∏–±–æ–∫: {error_count}")
            processing_notes.append(f"–£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ {total_found} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø—Ü–∏–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            logger.info(f"üìã –ü–µ—Ä–≤—ã–µ –æ–ø—Ü–∏–∏ –≤ –∑–æ–Ω–µ '{zone['title']}':")
            for i, option in enumerate(options[:3]):
                status = "‚úÖ" if option.get("selected") else "‚ùå"
                logger.info(f"    {i+1}. {status} {option.get('code', '')} - {option.get('title', '')}")
            if total_found > 3:
                logger.info(f"    ... –∏ –µ—â–µ {total_found - 3} –æ–ø—Ü–∏–π")
        else:
            warning_msg = f"–ó–æ–Ω–∞ '{zone['title']}': –æ–ø—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            logger.warning(f"‚ö†Ô∏è {warning_msg}")
            processing_notes.append("–ù–ï –ù–ê–ô–î–ï–ù–û –û–ü–¶–ò–ô - –≤–æ–∑–º–æ–∂–Ω–æ –Ω–æ–≤–∞—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –ø—É—Å—Ç—ã—Ö –∑–æ–Ω
            try:
                all_divs = content_container.find_elements(By.TAG_NAME, "div")
                all_spans = content_container.find_elements(By.TAG_NAME, "span")
                logger.warning(f"    üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –Ω–∞–π–¥–µ–Ω–æ {len(all_divs)} div –∏ {len(all_spans)} span —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            except:
                pass
        
        if error_count > 0:
            processing_notes.append(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {error_count} –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
            logger.warning(f"‚ö†Ô∏è –ó–æ–Ω–∞ '{zone['title']}': –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {error_count}")
        
        return options, all_errors, processing_notes
        
    except (TimeoutException, WebDriverException) as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–ø—Ü–∏–π –∏–∑ –∑–æ–Ω—ã '{zone['title']}': {e}"
        logger.error(f"‚ùå {error_msg}")
        return [], [error_msg], [f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {error_msg}"]


def extract_all_selected_options_from_container(content_container):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–ø—Ü–∏–π –∏–∑ –∑–æ–Ω—ã '–í—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏'"""
    options = []
    errors = []
    
    try:
        logger.info("üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–æ–Ω—É '–í—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏'...")
        
        # –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
        all_selected_container = None
        selectors = [
            "#all-selected-options",
            "div.all-selected-options",
            "div[id*='all-selected']"
        ]
        
        for selector in selectors:
            try:
                containers = content_container.find_elements(By.CSS_SELECTOR, selector)
                if containers:
                    all_selected_container = containers[0]
                    logger.info(f"üéØ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π —á–µ—Ä–µ–∑: {selector}")
                    break
            except:
                continue
        
        if not all_selected_container:
            logger.warning("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return options, errors
        
        # –ò—â–µ–º –≤—Å–µ –æ–ø—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        option_containers = all_selected_container.find_elements(By.CSS_SELECTOR, "div.all-selected-container")
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(option_containers)} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        all_divs = all_selected_container.find_elements(By.TAG_NAME, "div")
        logger.info(f"üîç –í—Å–µ–≥–æ div —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ: {len(all_divs)}")
        
        for i, option_container in enumerate(option_containers):
            try:
                # –õ–æ–≥–∏—Ä—É–µ–º ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                container_id = option_container.get_attribute("id") or f"–±–µ–∑-id-{i+1}"
                data_value = option_container.get_attribute("data-value") or "–±–µ–∑-data-value"
                logger.debug(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä {i+1}: id='{container_id}', data-value='{data_value}'")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                category = ""
                category_selectors = [
                    "span[id*='-category']",
                    "span[class*='category']"
                ]
                
                for cat_selector in category_selectors:
                    try:
                        category_element = option_container.find_element(By.CSS_SELECTOR, cat_selector)
                        category = category_element.text.strip()
                        if category:
                            logger.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —á–µ—Ä–µ–∑ '{cat_selector}': '{category}'")
                            break
                    except:
                        continue
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø—Ü–∏–∏
                description = ""
                description_selectors = [
                    "span[id*='-description']",
                    "span.model-option-description",
                    "span[class*='description']"
                ]
                
                for desc_selector in description_selectors:
                    try:
                        description_element = option_container.find_element(By.CSS_SELECTOR, desc_selector)
                        description = description_element.text.strip()
                        if description:
                            logger.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ '{desc_selector}': '{description}'")
                            break
                    except:
                        continue
                
                if not description:
                    error_msg = f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –æ–ø—Ü–∏—è {i+1} (id: {container_id}): –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ"
                    logger.warning(f"‚ö†Ô∏è {error_msg}")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–π –æ–ø—Ü–∏–∏
                    try:
                        all_spans = option_container.find_elements(By.TAG_NAME, "span")
                        logger.warning(f"    üîç –ù–∞–π–¥–µ–Ω–æ span —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(all_spans)}")
                        for j, span in enumerate(all_spans[:3]):
                            span_id = span.get_attribute("id") or ""
                            span_class = span.get_attribute("class") or ""
                            span_text = span.text.strip()[:50]
                            logger.warning(f"        {j+1}. id='{span_id}' class='{span_class}' text='{span_text}'")
                    except:
                        pass
                    
                    errors.append(error_msg)
                    continue
                
                if not category:
                    error_msg = f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –æ–ø—Ü–∏—è {i+1} (id: {container_id}): –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
                    logger.warning(f"‚ö†Ô∏è {error_msg}")
                    errors.append(error_msg)
                    category = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
                
                # –ü–∞—Ä—Å–∏–º –∫–æ–¥ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                code, title = parse_option_code_title(description)
                
                # –í—Å–µ –æ–ø—Ü–∏–∏ –≤ —ç—Ç–æ–π –∑–æ–Ω–µ –≤—ã–±—Ä–∞–Ω—ã
                option_data = {
                    "code": code,
                    "title": title,  # –¢–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    "category": category,  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ
                    "selected": True,  # –í—Å–µ –æ–ø—Ü–∏–∏ –≤ "–í—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ" –≤—Å–µ–≥–¥–∞ –≤—ã–±—Ä–∞–Ω—ã
                    "source": "all_selected_zone",
                    "original_description": description,
                    "container_id": container_id
                }
                
                options.append(option_data)
                
                logger.debug(f"‚úÖ –í—ã–±—Ä–∞–Ω–Ω–∞—è –æ–ø—Ü–∏—è {i+1}: {code} - {title} | –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
                
            except Exception as e:
                error_msg = f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –æ–ø—Ü–∏—è {i+1}: {e}"
                logger.warning(f"‚ö†Ô∏è {error_msg}")
                errors.append(error_msg)
                continue
        
        logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(options)} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π, –æ—à–∏–±–æ–∫: {len(errors)}")
        
        if len(options) != len(option_containers):
            logger.warning(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(options)} –∏–∑ {len(option_containers)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
            logger.warning(f"    üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π")
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–ø—Ü–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        category_counts = {}
        for option in options:
            cat = option.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            category_counts[cat] = category_counts.get(cat, 0) + 1
        
        logger.info(f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for cat, count in category_counts.items():
            logger.info(f"    {cat}: {count} –æ–ø—Ü–∏–π")
        
    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π: {e}"
        logger.error(f"‚ùå {error_msg}")
        errors.append(error_msg)
    
    return options, errors


def collect_all_options_extended(driver):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö –æ–ø—Ü–∏–π —Å–æ –≤—Å–µ—Ö –∑–æ–Ω —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å—é"""
    logger.info("üéØ –ù–ê–ß–ò–ù–ê–ï–ú –†–ê–°–®–ò–†–ï–ù–ù–´–ô –°–ë–û–† –í–°–ï–• –û–ü–¶–ò–ô")
        
    if not navigate_to_options(driver):
        return []
    
    all_zones_data = []
    zones = extract_option_zones(driver)
    
    if not zones:
        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–æ–Ω—ã –æ–ø—Ü–∏–π")
        return []
    
    for i, zone in enumerate(zones):
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ –∫ —Ä–∞–∑–Ω—ã–º –∑–æ–Ω–∞–º
        if i > 0:  # –ù–µ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –∑–æ–Ω–æ–π
            section_transition_pause()
            
        zone_options, zone_errors, processing_notes = extract_zone_options_universal(driver, zone)
        
        zone_data = {
            "zone_title": zone["title"],
            "zone_id": zone["id"],
            "zone_type": "section",
            "data_value": zone.get("data_value", ""),
            "options": zone_options,
            "total_options": len(zone_options),
            "selected_count": sum(1 for opt in zone_options if opt["selected"]),
            "errors": zone_errors,
            "error_count": len(zone_errors),
            "processing_notes": processing_notes,
            "processing_status": "success" if zone_options and not zone_errors else "warning" if zone_options else "error"
        }
        
        all_zones_data.append(zone_data)
        
        status_emoji = "‚úÖ" if zone_data["processing_status"] == "success" else "‚ö†Ô∏è" if zone_data["processing_status"] == "warning" else "‚ùå"
        logger.info(f"{status_emoji} –ó–æ–Ω–∞ '{zone['title']}': {zone_data['selected_count']}/{zone_data['total_options']} –æ–ø—Ü–∏–π, –æ—à–∏–±–æ–∫: {zone_data['error_count']}")
        
        for note in processing_notes:
            logger.info(f"    üìù {note}")
        
        if zone_errors:
            logger.warning(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∏ –≤ –∑–æ–Ω–µ '{zone['title']}':")
            for error in zone_errors[:3]:
                logger.warning(f"        ‚Ä¢ {error}")
            if len(zone_errors) > 3:
                logger.warning(f"        ‚Ä¢ ... –∏ –µ—â–µ {len(zone_errors) - 3} –æ—à–∏–±–æ–∫")
        
        # –ë—ã—Å—Ç—Ä–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–æ–Ω–∞–º–∏
        fast_human_pause()
    
    total_zones = len(all_zones_data)
    total_options = sum(zone["total_options"] for zone in all_zones_data)
    total_selected = sum(zone["selected_count"] for zone in all_zones_data)
    total_errors = sum(zone.get("error_count", 0) for zone in all_zones_data)
    
    logger.info(f"üéØ –†–ê–°–®–ò–†–ï–ù–ù–´–ô –°–ë–û–† –û–ü–¶–ò–ô –ó–ê–í–ï–†–®–ï–ù:")
    logger.info(f"    üìä –ó–æ–Ω: {total_zones}")
    logger.info(f"    üìã –û–ø—Ü–∏–π: {total_selected}/{total_options} –≤—ã–±—Ä–∞–Ω–æ")
    logger.info(f"    ‚ö†Ô∏è –û—à–∏–±–æ–∫: {total_errors}")
    
    return all_zones_data


def collect_all_options(driver):
    """–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –æ–ø—Ü–∏–∏ —Å–æ –≤—Å–µ—Ö –∑–æ–Ω (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    logger.info("üéØ –ù–ê–ß–ò–ù–ê–ï–ú –°–ë–û–† –í–°–ï–• –û–ü–¶–ò–ô")
        
    if not navigate_to_options(driver):
        return []
    
    zones = extract_option_zones(driver)
    if not zones:
        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–æ–Ω—ã –æ–ø—Ü–∏–π")
        return []
    
    all_zones_data = []
    
    for i, zone in enumerate(zones):
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ –∫ —Ä–∞–∑–Ω—ã–º –∑–æ–Ω–∞–º
        if i > 0:  # –ù–µ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –∑–æ–Ω–æ–π
            section_transition_pause()
            
        zone_options, zone_errors, processing_notes = extract_zone_options_universal(driver, zone)
        
        zone_data = {
            "zone_title": zone["title"],
            "zone_id": zone["id"],
            "options": zone_options,
            "total_options": len(zone_options),
            "selected_count": sum(1 for opt in zone_options if opt["selected"])
        }
        
        all_zones_data.append(zone_data)
        logger.info(f"üìä –ó–æ–Ω–∞ '{zone['title']}': {zone_data['selected_count']}/{zone_data['total_options']} –æ–ø—Ü–∏–π –≤—ã–±—Ä–∞–Ω–æ")
        
        # –ë—ã—Å—Ç—Ä–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–æ–Ω–∞–º–∏
        fast_human_pause()
    
    logger.info(f"üéØ –°–ë–û–† –û–ü–¶–ò–ô –ó–ê–í–ï–†–®–ï–ù: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(all_zones_data)} –∑–æ–Ω")
    return all_zones_data


def process_vehicle_options(driver, claim_number="", vin=""):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø—Ü–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    logger.info(f"üöó –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–ø—Ü–∏–π –¥–ª—è –¥–µ–ª–∞ {claim_number}, VIN {vin}")
    
    try:
        options_data = collect_all_options_extended(driver)
        
        if not options_data:
            return {
                "success": False,
                "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–π",
                "zones": []
            }
        
        total_zones = len(options_data)
        total_options = sum(zone["total_options"] for zone in options_data)
        total_selected = sum(zone["selected_count"] for zone in options_data)
        total_errors = sum(zone.get("error_count", 0) for zone in options_data)
        
        result = {
            "success": True,
            "claim_number": claim_number,
            "vin": vin,
            "zones": options_data,
            "statistics": {
                "total_zones": total_zones,
                "total_options": total_options,
                "total_selected": total_selected,
                "total_errors": total_errors
            }
        }
        
        logger.info(f"‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –û–ü–¶–ò–ô –ó–ê–í–ï–†–®–ï–ù–ê: {total_selected}/{total_options} –æ–ø—Ü–∏–π –≤—ã–±—Ä–∞–Ω–æ –≤ {total_zones} –∑–æ–Ω–∞—Ö, –æ—à–∏–±–æ–∫: {total_errors}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø—Ü–∏–π: {e}")
        return {
            "success": False,
            "error": f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}",
            "zones": []
        }
    finally:
        try:
            driver.switch_to.default_content()
            logger.info("üîÑ –í–æ–∑–≤—Ä–∞—â–µ–Ω—ã –∫ –≥–ª–∞–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ –æ–ø—Ü–∏–π")
        except Exception as switch_error:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≥–ª–∞–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É: {switch_error}") 