# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SVG, —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏ –∏ –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º–∞–º–∏
import os
import logging
import time
import re
import tempfile
import xml.etree.ElementTree as ET
from lxml import etree
from transliterate import translit
from PIL import Image
from io import BytesIO
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
from .constants import TIMEOUT

logger = logging.getLogger(__name__)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –ø–æ —à–∞–±–ª–æ–Ω—É zone_*
def is_zone_file(filename: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Ñ–∞–π–ª–æ–º –∑–æ–Ω—ã.
    –ó–æ–Ω—ã –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 'zone_' –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç 'pictogram' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏.
    """
    filename_lower = filename.lower()
    is_zone = (filename_lower.startswith('zone_') and 
               'pictogram' not in filename_lower and 
               filename_lower.endswith('.svg'))
    logger.debug(f"üîç is_zone_file('{filename}'): {is_zone}")
    return is_zone

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è SVG –Ω–∞ –¥–µ—Ç–∞–ª–∏
def has_detail(elem, detail):
    return elem.attrib.get('data-title', '') == detail

def prune_for_detail(root_element, detail):
    for elem in list(root_element):
        tag = elem.tag.split('}')[-1]
        if tag == 'g' and not has_detail(elem, detail):
            root_element.remove(elem)
        else:
            prune_for_detail(elem, detail)

# –§—É–Ω–∫—Ü–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å DOM
def wait_for_document_ready(d):
    return d.execute_script("return document.readyState === 'complete'")

def wait_for_pictograms_grid(d):
    grids = d.find_elements(By.CSS_SELECTOR, "main div.pictograms-grid.visible")
    if not grids:
        return False
    grid = grids[0]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ grid –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∏–¥–∏–º –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–µ–∫—Ü–∏–∏
    return grid.is_displayed() and len(grid.find_elements(By.TAG_NAME, "section")) > 0

def wait_for_all_sections_loaded(d):
    sections = d.find_elements(By.CSS_SELECTOR, "main div.pictograms-grid.visible section.pictogram-section")
    if len(sections) == 0:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Å–µ–∫—Ü–∏–∏ –≤–∏–¥–∏–º—ã –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç h2 –∑–∞–≥–æ–ª–æ–≤–∫–∏
    for section in sections:
        if not section.is_displayed():
            return False
        h2_elements = section.find_elements(By.CSS_SELECTOR, "h2.sort-title.visible")
        if len(h2_elements) == 0:
            return False
    return True

def wait_for_all_svgs_ready(d):
    svg_containers = d.find_elements(By.CSS_SELECTOR, 
        "main div.pictograms-grid.visible section.pictogram-section div.navigation-pictogram-svg-container")
    
    if len(svg_containers) == 0:
        return False
        
    ready_count = 0
    for container in svg_containers:
        svgs = container.find_elements(By.TAG_NAME, "svg")
        if len(svgs) > 0:
            svg = svgs[0]
            if (svg.is_displayed() and 
                d.execute_script("return arguments[0].querySelectorAll('path, rect, circle, g').length > 0", svg)):
                ready_count += 1
    
    # –¢—Ä–µ–±—É–µ–º —á—Ç–æ–±—ã –º–∏–Ω–∏–º—É–º 80% SVG –±—ã–ª–∏ –≥–æ—Ç–æ–≤—ã (—É—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏)
    required_count = max(1, int(len(svg_containers) * 0.8))
    return ready_count >= required_count

def wait_for_dom_stability(d):
    initial_count = len(d.find_elements(By.CSS_SELECTOR, 
        "main div.pictograms-grid.visible section.pictogram-section div.navigation-pictogram-svg-container svg"))
    if initial_count == 0:
        return False
    
    # –ñ–¥–µ–º 800ms –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    time.sleep(0.8)
    final_count = len(d.find_elements(By.CSS_SELECTOR, 
        "main div.pictograms-grid.visible section.pictogram-section div.navigation-pictogram-svg-container svg"))
    
    return initial_count == final_count and initial_count > 0

def ensure_document_ready(d):
    return d.execute_script("return document.readyState === 'complete'")

def find_pictograms_grid_reliable(d):
    grids = d.find_elements(By.CSS_SELECTOR, "main div.pictograms-grid.visible")
    for grid in grids:
        if grid.is_displayed() and len(grid.find_elements(By.TAG_NAME, "section")) > 0:
            return grid
    return None

def wait_for_sections_stability(d):
    sections = d.find_elements(By.CSS_SELECTOR, "main div.pictograms-grid.visible section.pictogram-section")
    if len(sections) == 0:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞–∂–¥–∞—è —Å–µ–∫—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    ready_sections = 0
    for section in sections:
        h2_elements = section.find_elements(By.CSS_SELECTOR, "h2.sort-title.visible")
        holders = section.find_elements(By.ID, "pictograms-grid-holder")
        if len(h2_elements) > 0 and len(holders) > 0 and section.is_displayed():
            ready_sections += 1
    
    return ready_sections == len(sections) and len(sections) > 0

def wait_for_works_in_section(holder):
    work_divs = [div for div in holder.find_elements(By.TAG_NAME, "div") 
                if div.get_attribute("data-tooltip") and div.is_displayed()]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –∫–∞–∂–¥–æ–π —Ä–∞–±–æ—Ç—ã –µ—Å—Ç—å SVG –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    ready_works = 0
    for div in work_divs:
        containers = div.find_elements(By.CSS_SELECTOR, "div.navigation-pictogram-svg-container")
        if containers and containers[0].is_displayed():
            svgs = containers[0].find_elements(By.TAG_NAME, "svg")
            if svgs and svgs[0].is_displayed():
                ready_works += 1
    return len(work_divs) > 0 and ready_works >= max(1, int(len(work_divs) * 0.8))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è SVG –Ω–∞ –¥–µ—Ç–∞–ª–∏
def split_svg_by_details(svg_file, output_dir, subfolder=None, claim_number="", vin="", svg_collection=True):
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç SVG-—Ñ–∞–π–ª –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ SVG –¥–ª—è –∫–∞–∂–¥–æ–π –¥–µ—Ç–∞–ª–∏, –≥–¥–µ –∫–∞–∂–¥–∞—è –¥–µ—Ç–∞–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É data-title.
    –ï—Å–ª–∏ svg_collection=False, –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤.
    –ì–ê–†–ê–ù–¢–ò–†–£–ï–¢ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∏–∑ –ª—é–±–æ–≥–æ SVG —Ñ–∞–π–ª–∞ –∑–æ–Ω—ã.
    """
    logger.info(f"üîß –ù–ê–ß–ò–ù–ê–ï–ú —Ä–∞–∑–±–∏–µ–Ω–∏–µ SVG —Ñ–∞–π–ª–∞: {svg_file}")
    logger.info(f"üéõÔ∏è –†–µ–∂–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è SVG: {'–í–ö–õ–Æ–ß–ï–ù' if svg_collection else '–û–¢–ö–õ–Æ–ß–ï–ù'}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(svg_file):
            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {svg_file}")
            return []
        
        # –ß–∏—Ç–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        file_size = os.path.getsize(svg_file)
        logger.info(f"üìä –†–∞–∑–º–µ—Ä SVG —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
        
        if file_size == 0:
            logger.error(f"‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π: {svg_file}")
            return []
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        try:
            with open(svg_file, 'r', encoding='utf-8') as f:
                content_preview = f.read(500)  # –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                logger.debug(f"üìÑ –ü—Ä–µ–≤—å—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞: {content_preview[:200]}...")
        except Exception as read_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {read_error}")
            return []
        
        # –ü–∞—Ä—Å–∏–º XML
        try:
            tree = ET.parse(svg_file)
            root = tree.getroot()
            logger.info(f"‚úÖ SVG —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω. –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç: {root.tag}")
        except ET.ParseError as parse_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: {parse_error}")
            return []
        
        # –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-title
        elements_with_data_title = []
        total_elements = 0
        
        for elem in root.iter():
            total_elements += 1
            if 'data-title' in elem.attrib:
                elements_with_data_title.append(elem)
        
        logger.info(f"üìä –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ SVG: {total_elements}")
        logger.info(f"üéØ –≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Å data-title: {len(elements_with_data_title)}")
        
        if len(elements_with_data_title) == 0:
            logger.warning(f"‚ö†Ô∏è –ù–ï –ù–ê–ô–î–ï–ù–û —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å data-title –≤ —Ñ–∞–π–ª–µ {svg_file}")
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã...")
            
            # –ü–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            alt_attributes = ['title', 'id', 'class', 'name']
            for attr in alt_attributes:
                elements_with_attr = [elem for elem in root.iter() if attr in elem.attrib]
                if elements_with_attr:
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(elements_with_attr)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º '{attr}'")
                    for i, elem in enumerate(elements_with_attr[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                        logger.debug(f"  - {elem.tag}: {attr}='{elem.attrib[attr]}'")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –Ω–æ –Ω–µ –æ—à–∏–±–∫—É
            logger.warning(f"‚ö†Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è {svg_file}")
            return []
        
        # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ data-title
        all_titles = set(elem.attrib['data-title'] for elem in elements_with_data_title)
        logger.info(f"\nüéØ –ù–∞–π–¥–µ–Ω–æ {len(all_titles)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö data-title –≤ —Ñ–∞–π–ª–µ {svg_file}:")
        detail_paths = []
        for title in sorted(all_titles):
            logger.info(f"  üìù '{title}'")

        for detail in all_titles:
            # –û—á–∏—â–∞–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–Ω–æ–≥–æ data-title
            safe_detail = re.sub(r'[^\w\s-]', '', detail).strip()  # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
            if not safe_detail:
                logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –ø—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ data-title: {detail!r}")
                continue
            safe_name = translit(safe_detail, 'ru', reversed=True).replace(" ", "_").replace("/", "_").lower()
            safe_name = re.sub(r'\.+', '', safe_name)  # –£–¥–∞–ª—è–µ–º —Ç–æ—á–∫–∏

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –¥–µ—Ç–∞–ª—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç—ã–º–∏)
            max_filename_length = 180  # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è Windows
            
            if len(safe_name) <= max_filename_length:
                # –û–±—ã—á–Ω—ã–π —Å–ª—É—á–∞–π - –∏–º—è –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                output_path = os.path.normpath(os.path.join(output_dir, f"{safe_name}.svg"))
                relative_base = f"/static/svgs/{claim_number}_{vin}"
                output_path_relative = f"{relative_base}/{safe_name}.svg".replace("\\", "/")

                detail_data = {
                    "title": detail,
                    "svg_path": output_path_relative.replace("\\", "/") if svg_collection else ""
                }
                detail_paths.append(detail_data)
                logger.info(f"üìù –î–µ—Ç–∞–ª—å –∏–∑–≤–ª–µ—á–µ–Ω–∞: '{detail}' ({len(detail)} —Å–∏–º–≤–æ–ª–æ–≤)")

                if svg_collection:
                    try:
                        tree = ET.parse(svg_file)
                        root = tree.getroot()
                        prune_for_detail(root, detail)
                        os.makedirs(os.path.dirname(output_path), exist_ok=True)
                        tree.write(output_path, encoding="utf-8", xml_declaration=True)
                        logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
                    except Exception as save_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è SVG –¥–ª—è –¥–µ—Ç–∞–ª–∏ '{detail}': {save_error}")
                        detail_data["svg_path"] = ""
            else:
                # –î–ª–∏–Ω–Ω–æ–µ –∏–º—è - —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≥—Ä—É–ø–ø—ã
                logger.warning(f"üî™ –ò–º—è –¥–µ—Ç–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({len(safe_name)} —Å–∏–º–≤–æ–ª–æ–≤), —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –¥–µ—Ç–∞–ª—è–º: {detail}")
                
                # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º
                individual_details = [d.strip() for d in detail.split(',') if d.strip()]
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(individual_details)} –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ")
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–∞–∫, —á—Ç–æ–±—ã –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–ª–æ –ª–∏–º–∏—Ç
                current_group = []
                current_group_text = ""
                part_num = 1
                
                for detail_item in individual_details:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ —ç—Ç–∞ –¥–µ—Ç–∞–ª—å –≤ —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É
                    test_group_text = ",".join(current_group + [detail_item])
                    test_safe_name = translit(re.sub(r'[^\w\s,-]', '', test_group_text).strip(), 'ru', reversed=True).replace(" ", "_").replace("/", "_").lower()
                    test_safe_name = re.sub(r'\.+', '', test_safe_name)
                    
                    if len(test_safe_name) <= max_filename_length:
                        # –ü–æ–º–µ—â–∞–µ—Ç—Å—è - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É
                        current_group.append(detail_item)
                        current_group_text = test_group_text
                    else:
                        # –ù–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
                        if current_group:
                            group_title = ",".join(current_group)
                            group_safe_name = translit(re.sub(r'[^\w\s,-]', '', group_title).strip(), 'ru', reversed=True).replace(" ", "_").replace("/", "_").lower()
                            group_safe_name = re.sub(r'\.+', '', group_safe_name)
                            
                            group_filename = f"{group_safe_name}_group{part_num}.svg"
                            group_output_path = os.path.normpath(os.path.join(output_dir, group_filename))
                            relative_base = f"/static/svgs/{claim_number}_{vin}"
                            group_output_path_relative = f"{relative_base}/{group_filename}".replace("\\", "/")
                            
                            detail_data = {
                                "title": group_title,
                                "svg_path": group_output_path_relative.replace("\\", "/") if svg_collection else ""
                            }
                            detail_paths.append(detail_data)
                            logger.info(f"üìù –ì—Ä—É–ø–ø–∞ {part_num} –∏–∑–≤–ª–µ—á–µ–Ω–∞: '{group_title[:100]}{'...' if len(group_title) > 100 else ''}' -> {group_filename}")

                            if svg_collection:
                                try:
                                    tree = ET.parse(svg_file)
                                    root = tree.getroot()
                                    prune_for_detail(root, detail)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                                    os.makedirs(os.path.dirname(group_output_path), exist_ok=True)
                                    tree.write(group_output_path, encoding="utf-8", xml_declaration=True)
                                    logger.info(f"‚úÖ –ì—Ä—É–ø–ø–∞ {part_num} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {group_output_path}")
                                except Exception as save_error:
                                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è SVG –¥–ª—è –≥—Ä—É–ø–ø—ã {part_num}: {save_error}")
                                    detail_data["svg_path"] = ""
                            
                            part_num += 1
                        
                        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É —Å —Ç–µ–∫—É—â–µ–π –¥–µ—Ç–∞–ª—å—é
                        current_group = [detail_item]
                        current_group_text = detail_item
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É
                if current_group:
                    group_title = ",".join(current_group)
                    group_safe_name = translit(re.sub(r'[^\w\s,-]', '', group_title).strip(), 'ru', reversed=True).replace(" ", "_").replace("/", "_").lower()
                    group_safe_name = re.sub(r'\.+', '', group_safe_name)
                    
                    group_filename = f"{group_safe_name}_group{part_num}.svg"
                    group_output_path = os.path.normpath(os.path.join(output_dir, group_filename))
                    relative_base = f"/static/svgs/{claim_number}_{vin}"
                    group_output_path_relative = f"{relative_base}/{group_filename}".replace("\\", "/")
                    
                    detail_data = {
                        "title": group_title,
                        "svg_path": group_output_path_relative.replace("\\", "/") if svg_collection else ""
                    }
                    detail_paths.append(detail_data)
                    logger.info(f"üìù –ì—Ä—É–ø–ø–∞ {part_num} (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è) –∏–∑–≤–ª–µ—á–µ–Ω–∞: '{group_title[:100]}{'...' if len(group_title) > 100 else ''}' -> {group_filename}")

                    if svg_collection:
                        try:
                            tree = ET.parse(svg_file)
                            root = tree.getroot()
                            prune_for_detail(root, detail)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                            os.makedirs(os.path.dirname(group_output_path), exist_ok=True)
                            tree.write(group_output_path, encoding="utf-8", xml_declaration=True)
                            logger.info(f"‚úÖ –ì—Ä—É–ø–ø–∞ {part_num} (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {group_output_path}")
                        except Exception as save_error:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è SVG –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã {part_num}: {save_error}")
                            detail_data["svg_path"] = ""
                
                logger.info(f"üéØ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ {part_num} –≥—Ä—É–ø–ø –∏–∑ {len(individual_details)} –¥–µ—Ç–∞–ª–µ–π")

        logger.info(f"‚úÖ –§—É–Ω–∫—Ü–∏—è split_svg_by_details –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û –¥–ª—è —Ñ–∞–π–ª–∞ {svg_file}")
        logger.info(f"üéØ –ò–¢–û–ì–û –∏–∑–≤–ª–µ—á–µ–Ω–æ –¥–µ—Ç–∞–ª–µ–π: {len(detail_paths)}")
        if detail_paths:
            logger.info(f"üìù –°–ø–∏—Å–æ–∫ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π:")
            for i, detail in enumerate(detail_paths, 1):
                svg_status = "—Å —Ñ–∞–π–ª–æ–º" if detail["svg_path"] else "—Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ"
                logger.info(f"  {i}. '{detail['title']}' ({svg_status})")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–ï –ù–ê–ô–î–ï–ù–û –¥–µ—Ç–∞–ª–µ–π –≤ —Ñ–∞–π–ª–µ {svg_file}")

        return detail_paths
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ split_svg_by_details –¥–ª—è —Ñ–∞–π–ª–∞ {svg_file}: {str(e)}")
        logger.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        import traceback
        logger.error(f"‚ùå –ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
        return []

# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç SVG —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ü–≤–µ—Ç–æ–≤
def save_svg_sync(driver, element, path, claim_number='', vin='', svg_collection=True):
    try:
        if element.tag_name not in ['svg', 'g']:
            logger.warning(f"–≠–ª–µ–º–µ–Ω—Ç {element.tag_name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è SVG –∏–ª–∏ –≥—Ä—É–ø–ø–æ–π")
            return False, None, []

        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        has_children = driver.execute_script("""
            return arguments[0].children.length > 0;
        """, element)
        if not has_children and element.tag_name == 'g':
            logger.warning(
                f"–ì—Ä—É–ø–ø–∞ {element.get_attribute('data-title') or '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            return False, None, []

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
        driver.execute_script("""
            let element = arguments[0];
            function setInlineStyles(el) {
                try {
                let computed = window.getComputedStyle(el);
                if (computed.fill && computed.fill !== 'none') {
                    el.setAttribute('fill', computed.fill);
                }
                if (computed.stroke && computed.stroke !== 'none') {
                    el.setAttribute('stroke', computed.stroke);
                }
                if (computed.strokeWidth && computed.strokeWidth !== '0px') {
                    el.setAttribute('stroke-width', computed.strokeWidth);
                }
                for (let child of el.children) {
                    setInlineStyles(child);
                    }
                } catch (e) {
                    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª–∏ –∫ —ç–ª–µ–º–µ–Ω—Ç—É:', e);
                }
            }
            setInlineStyles(element);
        """, element)

        svg_content = element.get_attribute('outerHTML')

        if element.tag_name == 'g':
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ SVG
            parent_svg = driver.execute_script("""
                let el = arguments[0];
                while (el && el.tagName.toLowerCase() !== 'svg') {
                    el = el.parentElement;
                    // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                    if (!el || el === document.documentElement) {
                        return null;
                    }
                }
                return el;
            """, element)

            if not parent_svg:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π SVG –¥–ª—è –≥—Ä—É–ø–ø—ã")
                return False, None, []

            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
            bounds = driver.execute_script("""
                let element = arguments[0];
                let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;
                function computeBounds(el) {
                    try {
                    if (el.tagName === 'path' || el.tagName === 'rect' || el.tagName === 'circle') {
                        let bbox = el.getBBox();
                        if (bbox.width > 0 && bbox.height > 0) {
                            minX = Math.min(minX, bbox.x);
                            minY = Math.min(minY, bbox.y);
                            maxX = Math.max(maxX, bbox.x + bbox.width);
                            maxY = Math.max(maxY, bbox.y + bbox.height);
                        }
                    }
                    for (let child of el.children) {
                        computeBounds(child);
                        }
                    } catch (e) {
                        console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –≥—Ä–∞–Ω–∏—Ü —ç–ª–µ–º–µ–Ω—Ç–∞:', e);
                    }
                }
                computeBounds(element);
                return [minX, minY, maxX - minX, maxY - minY];
            """, element)

            if bounds[2] <= 0 or bounds[3] <= 0 or not all(isinstance(x, (int, float)) for x in bounds):
                logger.warning("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è viewBox, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                view_box = '0 0 1000 1000'
            else:
                padding = 10
                view_box = f"{bounds[0] - padding} {bounds[1] - padding} {bounds[2] + 2 * padding} {bounds[3] + 2 * padding}"

            width = '100%'
            height = '100%'
        else:
            view_box = element.get_attribute('viewBox') or '0 0 1000 1000'
            width = element.get_attribute('width') or '100%'
            height = element.get_attribute('height') or '100%'

        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
        style_content = driver.execute_script("""
            let styles = '';
            try {
            const styleSheets = document.styleSheets;
            for (let sheet of styleSheets) {
                try {
                    for (let rule of sheet.cssRules) {
                        if (rule.selectorText && (
                            rule.selectorText.includes('svg') || 
                            rule.selectorText.includes('path') || 
                            rule.selectorText.includes('rect') || 
                            rule.selectorText.includes('circle') || 
                            rule.selectorText.includes('g') ||
                            rule.selectorText.includes('[fill]') ||
                            rule.selectorText.includes('[stroke]')
                        )) {
                            styles += rule.cssText + '\\n';
                        }
                    }
                } catch (e) {
                        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∏–ª—è–º –ª–∏—Å—Ç–∞:', e);
                }
                }
            } catch (e) {
                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∏–ª—è–º –¥–æ–∫—É–º–µ–Ω—Ç–∞:', e);
            }
            return styles;
        """)

        svg_full_content = f"""<?xml version="1.0" encoding="UTF-8"?>
<svg width="{width}" height="{height}" viewBox="{view_box}" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style>
{style_content}
svg * {{
    fill: inherit;
    stroke: inherit;
    stroke-width: inherit;
}}
</style>
{svg_content}
</svg>"""

        svg_bytes = svg_full_content.encode('utf-8')
        parser = etree.XMLParser(encoding='utf-8')
        try:
            etree.fromstring(svg_bytes, parser)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ SVG: {e}")
            return False, None, []

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —Ä–∞–∑–±–∏–≤–∞—Ç—å –Ω–∞ –¥–µ—Ç–∞–ª–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∑–æ–Ω, –Ω–µ –¥–ª—è –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º)
        should_split_details = 'pictograms' not in path
        detail_paths = []
        
        logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {path}")
        logger.info(f"üîç should_split_details: {should_split_details}")
        
        if should_split_details:
            filename = os.path.basename(path)
            is_zone = is_zone_file(filename)
            logger.info(f"üîç –ò–º—è —Ñ–∞–π–ª–∞: {filename}")
            logger.info(f"üîç is_zone_file: {is_zone}")
            
            if is_zone:
                logger.info(f"üéØ –ó–û–ù–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê: {filename} - –ì–ê–†–ê–ù–¢–ò–†–£–ï–ú –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–µ—Ç–∞–ª–µ–π!")
                
                if svg_collection:
                    # –†–µ–∂–∏–º –ø–æ–ª–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π SVG + —Ä–∞–∑–±–∏–≤–∞–µ–º + —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏
                    os.makedirs(os.path.dirname(path), exist_ok=True)
                    with open(path, 'wb') as f:
                        f.write(svg_bytes)
                    logger.info(f"‚úÖ SVG –∑–æ–Ω—ã —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {path}")
                    
                    logger.info(f"üîß –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–±–∏–µ–Ω–∏–µ –∑–æ–Ω—ã {filename} —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–µ—Ç–∞–ª–µ–π")
                    detail_paths = split_svg_by_details(path, os.path.dirname(path), claim_number=claim_number, vin=vin, svg_collection=svg_collection)
                    logger.info(f"üéØ –†–∞–∑–±–∏–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –ø–æ–ª—É—á–µ–Ω–æ {len(detail_paths)} –¥–µ—Ç–∞–ª–µ–π")
                else:
                    # –†–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã—Ö: –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π SVG, –Ω–æ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª–∏
                    logger.info(f"üéõÔ∏è –°–±–æ—Ä SVG –æ—Ç–∫–ª—é—á–µ–Ω, –Ω–æ –ì–ê–†–ê–ù–¢–ò–†–£–ï–ú –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –¥–µ—Ç–∞–ª—è—Ö –∑–æ–Ω—ã: {path}")
                    
                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –¥–µ—Ç–∞–ª—è—Ö
                    with tempfile.NamedTemporaryFile(mode='wb', suffix='.svg', delete=False) as temp_file:
                        temp_file.write(svg_bytes)
                        temp_path = temp_file.name
                    
                    try:
                        logger.info(f"üîß –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–±–∏–µ–Ω–∏–µ –∑–æ–Ω—ã {filename} –ë–ï–ó —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ)")
                        detail_paths = split_svg_by_details(temp_path, os.path.dirname(path), claim_number=claim_number, vin=vin, svg_collection=svg_collection)
                        logger.info(f"üéØ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –ø–æ–ª—É—á–µ–Ω–æ {len(detail_paths)} –¥–µ—Ç–∞–ª–µ–π")
                        
                        if len(detail_paths) == 0:
                            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–µ—Ç–∞–ª–∏ –∏–∑ –∑–æ–Ω—ã {filename}!")
                            logger.error(f"‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {temp_path}")
                            # –ù–ï —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                            logger.error(f"‚ùå –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {temp_path}")
                        else:
                            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                            os.unlink(temp_path)
                    except Exception as detail_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∏–∑ –∑–æ–Ω—ã {filename}: {detail_error}")
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        logger.error(f"‚ùå –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {temp_path}")
                        detail_paths = []
            else:
                # –ù–µ zone —Ñ–∞–π–ª - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
                logger.debug(f"üìÑ –§–∞–π–ª {filename} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–æ–Ω–æ–π")
                if svg_collection:
                    os.makedirs(os.path.dirname(path), exist_ok=True)
                    with open(path, 'wb') as f:
                        f.write(svg_bytes)
                    logger.info(f"‚úÖ SVG —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {path}")
                else:
                    logger.info(f"üéõÔ∏è –°–±–æ—Ä SVG –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {path}")
        else:
            # –ü–∏–∫—Ç–æ–≥—Ä–∞–º–º–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ
            if svg_collection:
                os.makedirs(os.path.dirname(path), exist_ok=True)
                with open(path, 'wb') as f:
                    f.write(svg_bytes)
                logger.info(f"‚úÖ SVG –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º—ã —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {path}")
            else:
                logger.info(f"üìù –ü–∏–∫—Ç–æ–≥—Ä–∞–º–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è SVG: {path}")

        return True, path, detail_paths
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ SVG: {e}")
        return False, None, []

# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ SVG
def save_main_screenshot_and_svg(driver, screenshot_dir, svg_dir, timestamp, claim_number, vin, svg_collection=True):
    main_screenshot_path = os.path.join(screenshot_dir, f"main_screenshot.png")
    main_screenshot_relative = f"/static/screenshots/{claim_number}_{vin}/main_screenshot.png"
    main_svg_path = os.path.join(svg_dir, f"main.svg")
    main_svg_relative = f"/static/svgs/{claim_number}_{vin}/main.svg"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SVG –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    try:
        WebDriverWait(driver, 10).until(
            EC.visibility_of_element_located((By.TAG_NAME, "svg"))
        )
        time.sleep(0.5)
        svg = driver.find_element(By.TAG_NAME, "svg")
        os.makedirs(os.path.dirname(main_screenshot_path), exist_ok=True)
        svg.screenshot(main_screenshot_path)
        logger.info(f"–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {main_screenshot_path}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º SVG —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Å–±–æ—Ä SVG
        if svg_collection:
            success, _, _ = save_svg_sync(driver, svg, main_svg_path, claim_number=claim_number, vin=vin, svg_collection=svg_collection)
        if not success:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π SVG")
        else:
            logger.info("–°–±–æ—Ä SVG –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ SVG")
            main_svg_relative = ""
            
        return main_screenshot_relative.replace("\\", "/"), main_svg_relative.replace("\\", "/")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞/SVG: {str(e)}")
        return None, None

# –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–æ–Ω—ã
def extract_zones(driver):
    zones = []
    try:
        zones_container = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "tree-navigation-zones-container"))
        )
        zone_containers = zones_container.find_elements(By.CSS_SELECTOR, "div.navigation-tree-zone-container")
        for container in zone_containers:
            zone_id = container.get_attribute("data-value")
            try:
                description_span = container.find_element(By.ID, f"tree-navigation-zone-description-{zone_id}")
                title = description_span.text.strip()
                zones.append({
                    "title": title,
                    "element": description_span,
                    "link": zone_id
                })
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑–æ–Ω—ã —Å id {zone_id}: {str(e)}")
        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {len(zones)} –∑–æ–Ω: {[z['title'] for z in zones]}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∑–æ–Ω: {str(e)}")
    return zones

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –∑–æ–Ω—É
def process_zone(driver, zone, screenshot_dir, svg_dir, max_retries=3, claim_number="", vin="", svg_collection=True):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –∑–æ–Ω—É, –≤–∫–ª—é—á–∞—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞, SVG –∏ –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º.
    max_retries: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–µ—Å—Å–∏–∏.
    """
    zone_data = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å zone
    if not zone.get('title') or not zone.get('link'):
        logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–æ–Ω–∞: title={zone.get('title')!r}, link={zone.get('link')!r}")
        return zone_data

    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–æ–Ω—ã: {zone}")

    for attempt in range(max_retries):
        try:
            zone_element = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.ID, f"tree-navigation-zone-description-{zone['link']}"))
            )
            zone_element.click()
            logger.info(f"–ö–ª–∏–∫ –ø–æ –∑–æ–Ω–µ: {zone['title']}")
            WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "body"))
            )
            break
        except WebDriverException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ –∑–æ–Ω–µ {zone['title']} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {str(e)}")
            if attempt == max_retries - 1:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –∑–æ–Ω–µ {zone['title']} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                return zone_data
            time.sleep(1)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è –¥–ª—è zone['title']
    safe_zone_title = translit(re.sub(r'[^\w\s-]',
                                      '', zone['title']).strip(),
                               'ru', reversed=True).replace(" ", "_").replace("/", "_").lower().replace("'", "")
    safe_zone_title = re.sub(r'\.+', '', safe_zone_title)
    zone_screenshot_path = os.path.join(screenshot_dir, f"zone_{safe_zone_title}.png")
    zone_screenshot_relative = f"/static/screenshots/{claim_number}_{vin}/zone_{safe_zone_title}.png".replace(
        "\\", "/")
    zone_svg_path = os.path.join(svg_dir, f"zone_{safe_zone_title}.svg")
    zone_svg_relative = f"/static/svgs/{claim_number}_{vin}/zone_{safe_zone_title}.svg".replace("\\", "/")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º —Å –Ω–∞–¥–µ–∂–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ –æ–∂–∏–¥–∞–Ω–∏—è
    try:
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º –¥–ª—è –∑–æ–Ω—ã {zone['title']}")
        
        # –≠—Ç–∞–ø 1: –î–æ–∂–∏–¥–∞–µ–º—Å—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã  
        WebDriverWait(driver, 15).until(wait_for_document_ready)
        logger.debug(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –∑–æ–Ω—ã {zone['title']}")
        
        # –≠—Ç–∞–ø 2: –ù–∞—Ö–æ–¥–∏–º main —ç–ª–µ–º–µ–Ω—Ç —Å retry –ª–æ–≥–∏–∫–æ–π
        main_element = None
        for attempt in range(3):
            try:
                main_element = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.TAG_NAME, "main"))
        )
                break
            except TimeoutException:
                if attempt < 2:
                    logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: main —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä—è–µ–º...")
                    time.sleep(1)
                else:
                    raise
        
        if not main_element:
            raise TimeoutException("Main —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")
        
        logger.debug(f"‚úÖ Main —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–æ–Ω—ã {zone['title']}")
        
        # –≠—Ç–∞–ø 3: –î–æ–∂–∏–¥–∞–µ–º—Å—è pictograms-grid —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏
        WebDriverWait(driver, 20).until(wait_for_pictograms_grid)
        pictograms_grid = driver.find_element(By.CSS_SELECTOR, "main div.pictograms-grid.visible")
        logger.info(f"‚úÖ –ó–æ–Ω–∞ {zone['title']} —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º—ã")
        
        # –≠—Ç–∞–ø 4: –î–æ–∂–∏–¥–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π —Å —Å–æ—Å—Ç–∞–≤–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏
        WebDriverWait(driver, 25).until(wait_for_all_sections_loaded)
        logger.debug(f"‚úÖ –í—Å–µ —Å–µ–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è –∑–æ–Ω—ã {zone['title']}")
        
        # –≠—Ç–∞–ø 5: –î–æ–∂–∏–¥–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∫–∏ SVG —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        WebDriverWait(driver, 30).until(wait_for_all_svgs_ready)
        logger.debug(f"‚úÖ SVG —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è –∑–æ–Ω—ã {zone['title']}")
        
        # –≠—Ç–∞–ø 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å DOM (–∏–∑–±–µ–≥–∞–µ–º race conditions)
        WebDriverWait(driver, 10).until(wait_for_dom_stability)
        logger.info(f"‚úÖ DOM —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∑–æ–Ω—ã {zone['title']}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        time.sleep(1)

        # –ö–ª–∏–∫–∞–µ–º –ø–æ #breadcrumb-sheet-title, —Å–æ–±–∏—Ä–∞–µ–º –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º—ã, –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç, –∑–∞—Ç–µ–º –≤—Ç–æ—Ä–æ–π –∫–ª–∏–∫
        try:
            breadcrumb_selector = "#breadcrumb-sheet-title"
            # –ü–µ—Ä–≤—ã–π –∫–ª–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
            WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, breadcrumb_selector))
            ).click()
            logger.info(f"–ö–ª–∏–∫ –ø–æ {breadcrumb_selector} –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –≤ –∑–æ–Ω–µ {zone['title']}")
            time.sleep(1)

            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏ –∏ —Å–∫–ª–µ–∏–≤–∞–µ–º –≤ –ø–∞–º—è—Ç–∏
            os.makedirs(os.path.dirname(zone_screenshot_path), exist_ok=True)
            try:
                # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
                sections = WebDriverWait(driver, 10).until(
                    EC.visibility_of_all_elements_located((
                        By.CSS_SELECTOR,
                        "main div.pictograms-grid.visible section.pictogram-section"
                    ))
                )
                logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(sections)} —Å–µ–∫—Ü–∏–π –¥–ª—è –∑–æ–Ω—ã {zone['title']}")

                # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏
                images = []

                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏
                for index, section in enumerate(sections):
                    # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Å–µ–∫—Ü–∏–∏
                    driver.execute_script("arguments[0].scrollIntoView(true);", section)
                    time.sleep(0.5)  # –ü–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏

                    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å–µ–∫—Ü–∏–∏
                    section_width = driver.execute_script("return arguments[0].scrollWidth", section)
                    section_height = driver.execute_script("return arguments[0].offsetHeight", section)
                    logger.debug(f"–°–µ–∫—Ü–∏—è {index + 1} –¥–ª—è –∑–æ–Ω—ã {zone['title']}: {section_width}x{section_height}")

                    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ –ø–∞–º—è—Ç–∏
                    screenshot_png = section.screenshot_as_png
                    img = Image.open(BytesIO(screenshot_png))
                    images.append(img)
                    logger.debug(f"–°–∫—Ä–∏–Ω—à–æ—Ç —Å–µ–∫—Ü–∏–∏ {index + 1} –¥–ª—è –∑–æ–Ω—ã {zone['title']} –∑–∞—Ö–≤–∞—á–µ–Ω –≤ –ø–∞–º—è—Ç–∏")

                # –°–∫–ª–µ–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                max_width = max(img.width for img in images)
                total_height = sum(img.height for img in images)

                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                final_image = Image.new('RGB', (max_width, total_height))
                y_offset = 0
                for img in images:
                    final_image.paste(img, (0, y_offset))
                    y_offset += img.height

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
                final_image.save(zone_screenshot_path, quality=85, optimize=True)
                logger.info(f"–°–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π –¥–ª—è –∑–æ–Ω—ã {zone['title']} —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {zone_screenshot_path}")

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                for img in images:
                    img.close()

                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
                try:
                    driver.set_window_size(original_size['width'], original_size['height'])
                except NameError:
                    logger.warning("original_size –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞")
                time.sleep(0.5)

            except (TimeoutException, WebDriverException, Exception) as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–µ–∫—Ü–∏–π –¥–ª—è –∑–æ–Ω—ã {zone['title']}: {str(e)}")
                zone_screenshot_relative = ""  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –ø—É—Ç—å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                logger.info(f"–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–æ–Ω—ã {zone['title']}: —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω")

            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º, –ø–µ—Ä–µ–¥–∞–µ–º zone_screenshot_relative
            zone_data = process_pictograms(driver, zone, screenshot_dir, svg_dir, max_retries, zone_screenshot_relative, claim_number=claim_number, vin="", svg_collection=svg_collection)

            # –í—Ç–æ—Ä–æ–π –∫–ª–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é –∑–æ–Ω
            WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, breadcrumb_selector))
            ).click()
            logger.info(f"–ö–ª–∏–∫ –ø–æ {breadcrumb_selector} –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é –∑–æ–Ω –≤ –∑–æ–Ω–µ {zone['title']}")
            # –î–æ–∂–∏–¥–∞–µ–º—Å—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∑–æ–Ω
            WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.ID, "tree-navigation-zones-container"))
            )
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å–ª–µ–¥—É—é—â–µ–π –∑–æ–Ω—ã –¥–æ—Å—Ç—É–ø–µ–Ω
            WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.ID, f"tree-navigation-zone-description-{zone['link']}"))
            )
            logger.info(f"–ú–µ–Ω—é –∑–æ–Ω –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {zone['title']}, –≥–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–æ–Ω–µ")
            time.sleep(0.5)

            return zone_data
        except (TimeoutException, WebDriverException) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ {breadcrumb_selector} –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –¥–ª—è –∑–æ–Ω—ã {zone['title']}: {str(e)}")
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å –º–µ–Ω—é –∑–æ–Ω
            try:
                WebDriverWait(driver, 5).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, breadcrumb_selector))
                ).click()
                WebDriverWait(driver, 5).until(
                    EC.presence_of_element_located((By.ID, "tree-navigation-zones-container"))
                )
                logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–µ–Ω—é –∑–æ–Ω –¥–ª—è {zone['title']} –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")
            except Exception as ex:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –∑–æ–Ω: {str(ex)}")

            return zone_data
    except (TimeoutException, WebDriverException) as e:
        logger.info(f"–ó–æ–Ω–∞ {zone['title']} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º –∏–ª–∏ –æ–Ω–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å: {str(e)}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SVG
    try:
        sheet_div = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, f"sheet_{zone['link']}"))
        )
        WebDriverWait(driver, 10).until(
            EC.visibility_of_element_located((By.CSS_SELECTOR, f"#sheet_{zone['link']} svg"))
        )
        svg = sheet_div.find_element(By.TAG_NAME, "svg")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ SVG —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        WebDriverWait(driver, 10).until(
            lambda d: d.execute_script("return arguments[0].querySelectorAll('path, rect, circle').length", svg) > 0
        )
        time.sleep(2)
        logger.info(f"–ù–∞–π–¥–µ–Ω SVG –¥–ª—è –∑–æ–Ω—ã {zone['title']}")

        try:
            WebDriverWait(driver, 5).until(
                EC.visibility_of_element_located((By.TAG_NAME, "svg"))
            )
            logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏ SVG –¥–ª—è –∑–æ–Ω—ã {zone['title']}")
            try:
                # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ SVG
                driver.execute_script("arguments[0].scrollIntoView(true);", svg)
                time.sleep(0.5)  # –ü–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã SVG
                svg_width = driver.execute_script("return arguments[0].scrollWidth", svg)
                svg_height = driver.execute_script("return arguments[0].scrollHeight", svg)
                logger.debug(f"SVG –¥–ª—è –∑–æ–Ω—ã {zone['title']}: {svg_width}x{svg_height}")
                svg.screenshot(zone_screenshot_path)
                logger.info(f"–°–∫—Ä–∏–Ω—à–æ—Ç SVG –∑–æ–Ω—ã {zone['title']} —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {zone_screenshot_path}")
            except WebDriverException as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç SVG –¥–ª—è –∑–æ–Ω—ã {zone['title']}: {str(e)}")
                os.makedirs(os.path.dirname(zone_screenshot_path), exist_ok=True)
                # –ó–∞–≥–ª—É—à–∫–∞
                logger.info(f"–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–æ–Ω—ã {zone['title']}: —Å–∫—Ä–∏–Ω—à–æ—Ç SVG –Ω–µ —Å–æ–∑–¥–∞–Ω")
                zone_data.append({
                    "title": zone['title'],
                    "screenshot_path": "",
                    "has_pictograms": False,
                    "graphics_not_available": True,
                    "details": []
                })
                return zone_data

            # –í—Å–µ–≥–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SVG –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∫–ª—é—á—ë–Ω–Ω–æ–º —Ñ–ª–∞–≥–µ
            detail_paths = []
            success, _, detail_paths = save_svg_sync(driver, svg, zone_svg_path, claim_number=claim_number, vin=vin, svg_collection=svg_collection)
            logger.info(f"üîç –ü–æ—Å–ª–µ save_svg_sync –¥–ª—è –∑–æ–Ω—ã {zone['title']}: success={success}, –ø–æ–ª—É—á–µ–Ω–æ –¥–µ—Ç–∞–ª–µ–π: {len(detail_paths)}")
            if not success:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å SVG –¥–ª—è –∑–æ–Ω—ã {zone['title']}")
                zone_data.append({
                    "title": zone['title'],
                    "screenshot_path": zone_screenshot_relative,
                    "has_pictograms": False,
                    "graphics_not_available": True,
                    "details": []
                })
                return zone_data
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ SVG —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–±–æ—Ä –≤–∫–ª—é—á—ë–Ω
            if not svg_collection:
                zone_svg_relative = ""

            zone_data.append({
                "title": zone['title'],
                "screenshot_path": zone_screenshot_relative,
                "svg_path": zone_svg_relative,
                "has_pictograms": False,
                "graphics_not_available": False,
                "details": detail_paths
            })
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(detail_paths)} –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –∑–æ–Ω—ã {zone['title']}")
        except WebDriverException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ SVG –∑–æ–Ω—ã {zone['title']}: {str(e)}")
            os.makedirs(os.path.dirname(zone_screenshot_path), exist_ok=True)
            # –ó–∞–≥–ª—É—à–∫–∞
            logger.info(f"–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–æ–Ω—ã {zone['title']}: —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω")
            zone_data.append({
                "title": zone['title'],
                "screenshot_path": "",
                "has_pictograms": False,
                "graphics_not_available": True,
                "details": []
            })
            return zone_data
    except (TimeoutException, WebDriverException) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ SVG –¥–ª—è –∑–æ–Ω—ã {zone['title']}: {str(e)}")
        os.makedirs(os.path.dirname(zone_screenshot_path), exist_ok=True)
        # –ó–∞–≥–ª—É—à–∫–∞
        logger.info(f"–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–æ–Ω—ã {zone['title']}: —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω")
        zone_data.append({
            "title": zone['title'],
            "screenshot_path": "",
            "has_pictograms": False,
            "graphics_not_available": True,
            "details": []
        })
        return zone_data

    return zone_data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –¥–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–æ–Ω
def ensure_zone_details_extracted(zone_data, svg_dir, claim_number="", vin="", svg_collection=True):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–æ–Ω—ã –≤ zone_data –∏ –¥–æ–∑–∞–ø–æ–ª–Ω—è–µ—Ç –¥–µ—Ç–∞–ª–∏ –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.
    –ì–ê–†–ê–ù–¢–ò–†–£–ï–¢ —á—Ç–æ –≤—Å–µ –∑–æ–Ω—ã –∏–º–µ—é—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏.
    """
    logger.info(f"üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–ª—è {len(zone_data)} –∑–æ–Ω")
    
    zones_fixed = 0
    for zone in zone_data:
        if zone.get("has_pictograms", False):
            # –ü–∏–∫—Ç–æ–≥—Ä–∞–º–º—ã –Ω–µ –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ—Ç–∞–ª–µ–π
            continue
        
        zone_title = zone.get("title", "")
        current_details = zone.get("details", [])
        
        if len(current_details) == 0:
            logger.warning(f"‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –ó–æ–Ω–∞ '{zone_title}' –Ω–µ –∏–º–µ–µ—Ç –¥–µ—Ç–∞–ª–µ–π - –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
            
            # –ò—â–µ–º SVG —Ñ–∞–π–ª –∑–æ–Ω—ã –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            zone_svg_path = None
            
            # –°–ø–æ—Å–æ–± 1: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
            safe_zone_title = translit(re.sub(r'[^\w\s-]', '', zone_title).strip(), 'ru', reversed=True).replace(" ", "_").replace("/", "_").lower().replace("'", "")
            safe_zone_title = re.sub(r'\.+', '', safe_zone_title)
            candidate_path = os.path.join(svg_dir, f"zone_{safe_zone_title}.svg")
            
            if os.path.exists(candidate_path):
                zone_svg_path = candidate_path
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω SVG —Ñ–∞–π–ª –∑–æ–Ω—ã (—Å–ø–æ—Å–æ–± 1): {zone_svg_path}")
            else:
                # –°–ø–æ—Å–æ–± 2: –ø–æ–∏—Å–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∑–æ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                logger.info(f"üîç –ò—â–µ–º —Ñ–∞–π–ª—ã –∑–æ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {svg_dir}")
                if os.path.exists(svg_dir):
                    all_files = [f for f in os.listdir(svg_dir) if f.endswith('.svg')]
                    zone_files = [f for f in all_files if is_zone_file(f)]
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∑–æ–Ω: {len(zone_files)} –∏–∑ {len(all_files)} SVG —Ñ–∞–π–ª–æ–≤")
                    
                    if zone_files:
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∑–æ–Ω—ã
                        zone_svg_path = os.path.join(svg_dir, zone_files[0])
                        logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ñ–∞–π–ª –∑–æ–Ω—ã: {zone_svg_path}")
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∑–æ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        logger.info(f"üîç –í—Å–µ —Ñ–∞–π–ª—ã –∑–æ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
                        for i, zf in enumerate(zone_files, 1):
                            logger.info(f"  {i}. {zf}")
                else:
                    logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è SVG –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {svg_dir}")
            
            if zone_svg_path and os.path.exists(zone_svg_path):
                logger.info(f"üéØ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∏–∑: {zone_svg_path}")
                try:
                    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                    file_size = os.path.getsize(zone_svg_path)
                    logger.info(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∑–æ–Ω—ã: {file_size} –±–∞–π—Ç")
                    
                    extracted_details = split_svg_by_details(zone_svg_path, svg_dir, claim_number=claim_number, vin=vin, svg_collection=svg_collection)
                    
                    if extracted_details and len(extracted_details) > 0:
                        zone["details"] = extracted_details
                        zones_fixed += 1
                        logger.info(f"‚úÖ –£–°–ü–ï–•: –ó–æ–Ω–∞ '{zone_title}' –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞: –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(extracted_details)} –¥–µ—Ç–∞–ª–µ–π")
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                        for i, detail in enumerate(extracted_details[:3], 1):
                            logger.info(f"  {i}. '{detail['title']}'")
                        if len(extracted_details) > 3:
                            logger.info(f"  ... –∏ –µ—â–µ {len(extracted_details) - 3} –¥–µ—Ç–∞–ª–µ–π")
                    else:
                        logger.error(f"‚ùå –ü–†–û–í–ê–õ: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–µ—Ç–∞–ª–∏ –∏–∑ {zone_svg_path} –¥–ª—è –∑–æ–Ω—ã '{zone_title}'")
                        logger.error(f"‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤—Ä—É—á–Ω—É—é")
                except Exception as e:
                    logger.error(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –ø—Ä–∏ –¥–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–æ–Ω—ã '{zone_title}': {e}")
                    import traceback
                    logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            else:
                logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ù–û: SVG —Ñ–∞–π–ª –∑–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è '{zone_title}'")
                logger.error(f"‚ùå –û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å: {candidate_path}")
                logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(svg_dir)}")
                if os.path.exists(svg_dir):
                    files = os.listdir(svg_dir)
                    logger.error(f"‚ùå –§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {files[:10]}{'...' if len(files) > 10 else ''}")
    
    logger.info(f"üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –¥–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {zones_fixed} –∑–æ–Ω –∏–∑ {len([z for z in zone_data if not z.get('has_pictograms', False)])}")
    return zone_data

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º—ã –≤ –∑–æ–Ω–µ
def process_pictograms(driver, zone, screenshot_dir, svg_dir, max_retries=2, zone_screenshot_relative="", claim_number="", vin="", svg_collection=True):
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º–∞—Ö –≤ –∑–æ–Ω–µ, —Å–æ—Ö—Ä–∞–Ω—è—è SVG –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–∞–±–æ—Ç—ã.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.
    """
    pictogram_data = []
    try:
        logger.info(f"üé® –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º –¥–ª—è –∑–æ–Ω—ã {zone['title']}")
        
        # –≠—Ç–∞–ø 1: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞
        WebDriverWait(driver, 15).until(ensure_document_ready)
        
                # –≠—Ç–∞–ø 2: –ù–∞—Ö–æ–¥–∏–º main —Å –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å—é
        main = None
        for attempt in range(max_retries + 1):
            try:
                main = WebDriverWait(driver, 10).until(
                    EC.presence_of_element_located((By.TAG_NAME, "main"))
                )
                if main.is_displayed():
                    break
                else:
                    logger.debug(f"Main –Ω–∞–π–¥–µ–Ω –Ω–æ –Ω–µ –≤–∏–¥–∏–º, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}")
                    time.sleep(0.5)
            except TimeoutException:
                if attempt < max_retries:
                    logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: main –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä—è–µ–º...")
                    time.sleep(1)
                else:
                    raise
        
        if not main or not main.is_displayed():
            logger.error(f"Main —ç–ª–µ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–æ–Ω—ã {zone['title']}")
            return pictogram_data
        
        # –≠—Ç–∞–ø 3: –ò—â–µ–º pictograms-grid —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
        WebDriverWait(driver, 15).until(lambda d: find_pictograms_grid_reliable(d) is not None)
        grid_div = find_pictograms_grid_reliable(driver)
        
        if not grid_div:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π pictograms-grid –≤ –∑–æ–Ω–µ {zone['title']}")
            return pictogram_data

        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω pictograms-grid –¥–ª—è –∑–æ–Ω—ã {zone['title']}")

        # –≠—Ç–∞–ø 4: –°–æ–±–∏—Ä–∞–µ–º —Å–µ–∫—Ü–∏–∏ —Å –Ω–∞–¥–µ–∂–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        WebDriverWait(driver, 20).until(wait_for_sections_stability)
        sections = grid_div.find_elements(By.TAG_NAME, "section")
        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(sections)} —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Å–µ–∫—Ü–∏–π –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º")
        
        for section_idx, section in enumerate(sections):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Å–µ–∫—Ü–∏–∏
                if not section.is_displayed():
                    logger.debug(f"–°–µ–∫—Ü–∏—è {section_idx + 1} –Ω–µ –≤–∏–¥–∏–º–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue

                # –ù–∞—Ö–æ–¥–∏–º h2 —Å –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                h2_elements = section.find_elements(By.CSS_SELECTOR, "h2.sort-title.visible")
                if not h2_elements:
                    logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω h2.sort-title.visible –≤ —Å–µ–∫—Ü–∏–∏ {section_idx + 1} –∑–æ–Ω—ã {zone['title']}")
                    continue
                
                h2 = h2_elements[0]
                section_name = h2.text.strip()
                if not section_name:
                    logger.warning(f"–ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ {section_idx + 1} –≤ –∑–æ–Ω–µ {zone['title']}")
                    continue

                # –ù–∞—Ö–æ–¥–∏–º holder —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                holders = section.find_elements(By.ID, "pictograms-grid-holder")
                if not holders:
                    logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω pictograms-grid-holder –≤ —Å–µ–∫—Ü–∏–∏ '{section_name}'")
                    continue

                holder = holders[0]
                if not holder.is_displayed():
                    logger.warning(f"Holder –Ω–µ –≤–∏–¥–∏–º –≤ —Å–µ–∫—Ü–∏–∏ '{section_name}'")
                    continue

                # –≠—Ç–∞–ø 5: –°–æ–±–∏—Ä–∞–µ–º —Ä–∞–±–æ—Ç—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å—é
                works = []
                
                # –î–æ–∂–∏–¥–∞–µ–º—Å—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç –≤ —Å–µ–∫—Ü–∏–∏
                try:
                    WebDriverWait(driver, 15).until(lambda d: wait_for_works_in_section(holder))
                except TimeoutException:
                    logger.warning(f"–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ä–∞–±–æ—Ç –≤ —Å–µ–∫—Ü–∏–∏ '{section_name}', –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏")
                
                work_divs = [div for div in holder.find_elements(By.TAG_NAME, "div") 
                            if div.get_attribute("data-tooltip") and div.is_displayed()]
                logger.info(f"üîß –ù–∞–π–¥–µ–Ω–æ {len(work_divs)} —Ä–∞–±–æ—Ç –≤ —Å–µ–∫—Ü–∏–∏ '{section_name}'")
                
                for work_idx, work_div in enumerate(work_divs):
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã
                        if not work_div.is_displayed():
                            logger.debug(f"–†–∞–±–æ—Ç–∞ {work_idx + 1} –Ω–µ –≤–∏–¥–∏–º–∞ –≤ —Å–µ–∫—Ü–∏–∏ '{section_name}'")
                            continue

                        # –°–æ–±–∏—Ä–∞–µ–º work_name1 —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
                        work_name1 = work_div.get_attribute("data-tooltip")
                        if not work_name1 or not work_name1.strip():
                            logger.warning(f"–ü—É—Å—Ç–æ–µ data-tooltip –¥–ª—è —Ä–∞–±–æ—Ç—ã {work_idx + 1} –≤ —Å–µ–∫—Ü–∏–∏ '{section_name}'")
                            continue
                        work_name1 = work_name1.strip()

                        # –°–æ–±–∏—Ä–∞–µ–º work_name2 —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
                        work_name2 = ""
                        spans = work_div.find_elements(By.CSS_SELECTOR, "span > span")
                        if spans:
                            work_name2 = spans[0].text.strip()

                        # –ù–∞—Ö–æ–¥–∏–º SVG –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                        svg_containers = work_div.find_elements(By.CSS_SELECTOR, "div.navigation-pictogram-svg-container")
                        if not svg_containers:
                            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω SVG –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã '{work_name1}' –≤ —Å–µ–∫—Ü–∏–∏ '{section_name}'")
                            continue

                        svg_container = svg_containers[0]
                        if not svg_container.is_displayed():
                            logger.warning(f"SVG –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –≤–∏–¥–∏–º –¥–ª—è —Ä–∞–±–æ—Ç—ã '{work_name1}' –≤ —Å–µ–∫—Ü–∏–∏ '{section_name}'")
                            continue

                        # –°–æ–±–∏—Ä–∞–µ–º SVG —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏–µ–º
                        svgs = svg_container.find_elements(By.TAG_NAME, "svg")
                        if not svgs:
                            logger.warning(f"SVG –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã '{work_name1}' –≤ —Å–µ–∫—Ü–∏–∏ '{section_name}'")
                            continue
                        
                        svg = svgs[0]
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å SVG —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                        try:
                            WebDriverWait(driver, 8).until(
                                lambda d: svg.is_displayed() and 
                                d.execute_script("return arguments[0].querySelectorAll('path, rect, circle, g').length > 0", svg)
                            )
                        except TimeoutException:
                            logger.warning(f"SVG –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã '{work_name1}' –≤ —Å–µ–∫—Ü–∏–∏ '{section_name}', –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            continue

                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                        safe_section_name = translit(re.sub(r'[^\w\s-]', '', section_name).strip(), 'ru', reversed=True).replace(" ", "_").replace("/", "_").lower()
                        safe_work_name1 = translit(re.sub(r'[^\w\s-]', '', work_name1).strip(), 'ru', reversed=True).replace(" ", "_").replace("/", "_").lower()
                        safe_work_name2 = translit(re.sub(r'[^\w\s-]', '', work_name2).strip(), 'ru', reversed=True).replace(" ", "_").replace("/", "_").lower() if work_name2 else ""
                        safe_work_name2 = re.sub(r'\.+', '', safe_work_name2)
                        safe_work_name1 = re.sub(r'\.+', '', safe_work_name1)
                        safe_section_name = re.sub(r'\.+', '', safe_section_name)
                        svg_filename = f"{safe_section_name}_{safe_work_name1}" + (f"_{safe_work_name2}" if work_name2 else "") + ".svg"
                        work_svg_path = os.path.join(svg_dir, svg_filename)
                        work_svg_relative = f"/static/svgs/{claim_number}_{vin}/{svg_filename}".replace("\\", "/")

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º SVG —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Å–±–æ—Ä SVG
                        if svg_collection:
                            success, saved_path, _ = save_svg_sync(driver, svg, work_svg_path, claim_number=claim_number, vin=vin, svg_collection=svg_collection)
                            if success:
                                logger.info(f"SVG –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º—ã —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {work_svg_path}")
                                works.append({
                                    "work_name1": work_name1,
                                    "work_name2": work_name2,
                                    "svg_path": work_svg_relative
                                })
                            else:
                                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å SVG –¥–ª—è —Ä–∞–±–æ—Ç—ã '{work_name1}' –≤ —Å–µ–∫—Ü–∏–∏ '{section_name}'")
                                works.append({
                                    "work_name1": work_name1,
                                    "work_name2": work_name2,
                                    "svg_path": ""
                                })
                        else:
                            logger.info(f"–°–±–æ—Ä SVG –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ SVG –¥–ª—è —Ä–∞–±–æ—Ç—ã '{work_name1}' –≤ —Å–µ–∫—Ü–∏–∏ '{section_name}'")
                            works.append({
                                "work_name1": work_name1,
                                "work_name2": work_name2,
                                "svg_path": ""
                            })
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞–±–æ—Ç—ã –≤ —Å–µ–∫—Ü–∏–∏ {section_name}: {str(e)}")
                        continue

                if works:
                    pictogram_data.append({
                        "section_name": section_name,
                        "works": works
                    })
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ–∫—Ü–∏–∏ –≤ –∑–æ–Ω–µ {zone['title']}: {str(e)}")
                continue

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–æ–Ω—ã
        if pictogram_data:
            zone_entry = {
                "title": zone['title'],
                "screenshot_path": zone_screenshot_relative,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ —Å–∫–ª–µ–µ–Ω–Ω–æ–º—É —Å–∫—Ä–∏–Ω—à–æ—Ç—É
                "svg_path": "",
                "has_pictograms": True,
                "graphics_not_available": False,
                "details": [],
                "pictograms": pictogram_data
            }
            return [zone_entry]
        else:
            logger.info(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º –¥–ª—è –∑–æ–Ω—ã {zone['title']}")

    except (TimeoutException, WebDriverException) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º –¥–ª—è –∑–æ–Ω—ã {zone['title']}: {str(e)}")

    return pictogram_data 