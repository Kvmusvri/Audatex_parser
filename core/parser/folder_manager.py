# –ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–ø–∫–∞–º–∏ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü
import logging
import os
import time
import shutil
import random
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, StaleElementReferenceException
from .constants import SCREENSHOT_DIR, SVG_DIR, DATA_DIR, TIMEOUT, CLAIM_NUMBER_SELECTOR, VIN_SELECTOR
from .actions import get_vin_status, add_human_behavior, add_extended_human_behavior, check_for_bot_detection, handle_bot_detection
from .stealth import stealth_open_url, stealth_wait_for_element, check_stealth_detection, handle_stealth_detection

logger = logging.getLogger(__name__)


def safe_remove_directory(path):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –≤—Å–µ –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ
    """
    try:
        if os.path.exists(path):
            logger.info(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É: {path}")
            shutil.rmtree(path)
            logger.info(f"‚úÖ –ü–∞–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞: {path}")
        return True
    except PermissionError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {path}: {e}")
        return False
    except OSError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –û–° –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {path}: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {path}: {e}")
        return False


# –°–æ–∑–¥–∞—ë—Ç –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
def create_folders(claim_number, vin):
    # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤ —Ç–∞–±—É–ª—è—Ü–∏–∏
    clean_claim_number = claim_number.strip() if claim_number else ""
    clean_vin = vin.strip() if vin else ""
    
    # –ó–∞–º–µ–Ω—è–µ–º / –Ω–∞ _ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∞–ø–æ–∫
    safe_claim_number = clean_claim_number.replace("/", "_")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ
    if not safe_claim_number and not clean_vin:
        logger.error("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É: claim_number –∏ vin –ø—É—Å—Ç—ã–µ")
        raise ValueError("claim_number –∏ vin –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ")
    
    folder_name = f"{safe_claim_number}_{clean_vin}"
    logger.info(f"üìÅ –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É —Å –∏–º–µ–Ω–µ–º: '{folder_name}'")
    
    screenshot_dir = os.path.join(SCREENSHOT_DIR, folder_name)
    svg_dir = os.path.join(SVG_DIR, folder_name)
    data_dir = os.path.join(DATA_DIR, folder_name)
    
    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    safe_remove_directory(screenshot_dir)
    safe_remove_directory(svg_dir)
    safe_remove_directory(data_dir)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø–∞–ø–∫–∏
    logger.info(f"üìÅ –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è: {folder_name}")
    logger.info(f"üîç –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: claim_number='{claim_number}', vin='{vin}'")
    logger.info(f"üîç –û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: clean_claim_number='{clean_claim_number}', clean_vin='{clean_vin}'")
    
    try:
        os.makedirs(screenshot_dir, exist_ok=True)
        os.makedirs(svg_dir, exist_ok=True)
        os.makedirs(data_dir, exist_ok=True)
        
        logger.info(f"‚úÖ –ü–∞–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã: screenshots={screenshot_dir}, svg={svg_dir}, data={data_dir}")
        return screenshot_dir, svg_dir, data_dir
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫: {e}")
        logger.error(f"‚ùå –ü—É—Ç–∏: screenshot_dir={screenshot_dir}, svg_dir={svg_dir}, data_dir={data_dir}")
        raise


# –ò–∑–≤–ª–µ–∫–∞–µ—Ç VIN –∏ claim_number —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
def extract_vin_and_claim_number(driver, current_url):
    base_url = current_url.split('step')[0][:-1]
    configs = [
        {'url': base_url + '&step=General+Data+Ingos', 'selector': CLAIM_NUMBER_SELECTOR, 'log_name': 'CLAIM NUMBER', 'key': 'claim_number'},
        {'url': base_url + '&step=Osago+Vehicle+Identification', 'selector': VIN_SELECTOR, 'log_name': 'VIN', 'key': 'vin'}
    ]
    result = {}
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    logger.info("ü§ñ –ù–∞—á–∏–Ω–∞–µ–º —ç—Ç–∞–ø –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º")
    add_extended_human_behavior(driver, total_delay=60.0)
    
    for config in configs:
        max_page_refresh_attempts = 10
        success = False
        
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ {config['log_name']} —Å URL: {config['url']}")
        
        for attempt in range(1, max_page_refresh_attempts + 1):
            try:
                logger.info(f"üìÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_page_refresh_attempts}: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ URL –¥–ª—è {config['log_name']}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º stealth-–º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è URL
                if not stealth_open_url(driver, config['url'], reconnect_time=random.uniform(3.0, 5.0)):
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å URL –¥–ª—è {config['log_name']}")
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                add_human_behavior(driver)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.CSS_SELECTOR, "body")))
                time.sleep(random.uniform(1.5, 3.0))  # –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–æ–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–µ—Ç–µ–∫—Ü–∏—é –±–æ—Ç–∞ –∏ stealth-–¥–µ—Ç–µ–∫—Ü–∏—é
                if check_for_bot_detection(driver) or check_stealth_detection(driver):
                    logger.error(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–µ—Ç–µ–∫—Ü–∏—è –±–æ—Ç–∞! –ü–æ–ø—ã—Ç–∫–∞ {attempt}")
                    handle_bot_detection(driver)
                    handle_stealth_detection(driver, config['url'])
                    continue
                
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ü–µ–ª–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å stealth-–º–µ—Ç–æ–¥–∞–º–∏
                logger.info(f"üîé –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {config['selector']}")
                if not stealth_wait_for_element(driver, config['selector']):
                    logger.error(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç {config['selector']} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–∫—Ä—ã—Ç–Ω–æ")
                    continue
                
                input_element = driver.find_element(By.CSS_SELECTOR, config['selector'])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                if input_element and input_element.is_displayed():
                    value = input_element.get_attribute("value") or ""
                    result[config['key']] = value
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á—ë–Ω {config['log_name']}: '{value}' (–ø–æ–ø—ã—Ç–∫–∞ {attempt})")
                    success = True
                    time.sleep(random.uniform(1.5, 2.5))  # –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–ª–µ–º
                    break
                else:
                    raise Exception("–≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")
                    
            except (TimeoutException, StaleElementReferenceException, Exception) as e:
                error_msg = str(e)
                logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ {config['log_name']}: {error_msg}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–µ—Ç–µ–∫—Ü–∏—é –±–æ—Ç–∞
                if "GetHandleVerifier" in error_msg or "white screen" in driver.page_source.lower():
                    logger.error(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–µ—Ç–µ–∫—Ü–∏—è –±–æ—Ç–∞! –ü–æ–ø—ã—Ç–∫–∞ {attempt}")
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω—É—é –ø–∞—É–∑—É –∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
                    time.sleep(random.uniform(5.0, 10.0))
                    add_human_behavior(driver)
                
                if attempt < max_page_refresh_attempts:
                    logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É...")
                    try:
                        driver.refresh()
                        time.sleep(random.uniform(2.0, 4.0))  # –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    except Exception as refresh_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {refresh_error}")
                else:
                    logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å {config['log_name']} –ø–æ—Å–ª–µ {max_page_refresh_attempts} –ø–æ–ø—ã—Ç–æ–∫!")
                    logger.error(f"‚ùå –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∞–π—Ç–æ–º. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞.")
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–æ–ª–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
        if not success:
            error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å {config['log_name']} –ø–æ—Å–ª–µ {max_page_refresh_attempts} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
            logger.error(f"‚ùå {error_msg}")
            raise Exception(error_msg)
    
    logger.info(f"‚úÖ –í—Å–µ –ø–æ–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã: claim_number='{result.get('claim_number', '')}', vin='{result.get('vin', '')}'")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å VIN –∫–Ω–æ–ø–æ–∫ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è VIN
    vin_status = get_vin_status(driver)
    logger.info(f"üìä VIN —Å—Ç–∞—Ç—É—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: {vin_status}")
    
    return result['claim_number'], result['vin'], vin_status 