# –ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–ø–∫–∞–º–∏ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü
import logging
import os
import time
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, StaleElementReferenceException
from .constants import SCREENSHOT_DIR, SVG_DIR, DATA_DIR, TIMEOUT, CLAIM_NUMBER_SELECTOR, VIN_SELECTOR

logger = logging.getLogger(__name__)


# –°–æ–∑–¥–∞—ë—Ç –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def create_folders(claim_number, vin):
    # –ó–∞–º–µ–Ω—è–µ–º / –Ω–∞ _ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∞–ø–æ–∫
    safe_claim_number = claim_number.replace("/", "_")
    folder_name = f"{safe_claim_number}_{vin}"
    screenshot_dir = os.path.join(SCREENSHOT_DIR, folder_name)
    svg_dir = os.path.join(SVG_DIR, folder_name)
    data_dir = os.path.join(DATA_DIR, folder_name)
    os.makedirs(screenshot_dir, exist_ok=True)
    os.makedirs(svg_dir, exist_ok=True)
    os.makedirs(data_dir, exist_ok=True)
    return screenshot_dir, svg_dir, data_dir


# –ò–∑–≤–ª–µ–∫–∞–µ—Ç VIN –∏ claim_number —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ª–æ–≥–∏–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ø—Ä–æ–≥—Ä—É–∑–∫–æ–π
def extract_vin_and_claim_number(driver, current_url):
    base_url = current_url.split('step')[0][:-1]
    configs = [
        {'url': base_url + '&step=General+Data+Ingos', 'selector': CLAIM_NUMBER_SELECTOR, 'log_name': 'CLAIM NUMBER', 'key': 'claim_number'},
        {'url': base_url + '&step=Osago+Vehicle+Identification', 'selector': VIN_SELECTOR, 'log_name': 'VIN', 'key': 'vin'}
    ]
    result = {}
    
    for config in configs:
        max_page_refresh_attempts = 10
        success = False
        
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ {config['log_name']} —Å URL: {config['url']}")
        
        for attempt in range(1, max_page_refresh_attempts + 1):
            try:
                logger.info(f"üìÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_page_refresh_attempts}: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ URL –¥–ª—è {config['log_name']}")
                driver.get(config['url'])
                time.sleep(3)  # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                WebDriverWait(driver, TIMEOUT).until(EC.presence_of_element_located((By.CSS_SELECTOR, "body")))
                time.sleep(2)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–æ–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ü–µ–ª–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç
                logger.info(f"üîé –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {config['selector']}")
                input_element = WebDriverWait(driver, TIMEOUT).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, config['selector']))
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                if input_element and input_element.is_displayed():
                    value = input_element.get_attribute("value") or ""
                    result[config['key']] = value
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á—ë–Ω {config['log_name']}: '{value}' (–ø–æ–ø—ã—Ç–∫–∞ {attempt})")
                    success = True
                    time.sleep(2)  # –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–ª–µ–º
                    break
                else:
                    raise Exception("–≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")
                    
            except (TimeoutException, StaleElementReferenceException, Exception) as e:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ {config['log_name']}: {str(e)}")
                
                if attempt < max_page_refresh_attempts:
                    logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É...")
                    try:
                        driver.refresh()
                        time.sleep(3)  # –ñ–¥–µ–º –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    except Exception as refresh_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {refresh_error}")
                else:
                    logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å {config['log_name']} –ø–æ—Å–ª–µ {max_page_refresh_attempts} –ø–æ–ø—ã—Ç–æ–∫!")
                    logger.error(f"‚ùå –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∞–π—Ç–æ–º. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞.")
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–æ–ª–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
        if not success:
            error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å {config['log_name']} –ø–æ—Å–ª–µ {max_page_refresh_attempts} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
            logger.error(f"‚ùå {error_msg}")
            raise Exception(error_msg)
    
    logger.info(f"‚úÖ –í—Å–µ –ø–æ–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã: claim_number='{result.get('claim_number', '')}', vin='{result.get('vin', '')}'")
    return result['claim_number'], result['vin'] 