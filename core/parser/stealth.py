# –ú–æ–¥—É–ª—å –¥–ª—è stealth-–º–µ—Ç–æ–¥–æ–≤ –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –±–æ—Ç–∞
# –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∞—Ö SeleniumBase UC Mode

import logging
import time
import random
from typing import Optional
from selenium.webdriver.remote.webdriver import WebDriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException

logger = logging.getLogger(__name__)


def stealth_open_url(driver: WebDriver, url: str, reconnect_time: Optional[float] = None) -> bool:
    """
    –°–∫—Ä—ã—Ç–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ URL —Å –º–µ—Ç–æ–¥–∞–º–∏ –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
    """
    try:
        logger.info(f"üîí –°–∫—Ä—ã—Ç–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ URL: {url}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        driver.execute_script("""
            Object.defineProperty(navigator, 'webdriver', {
                get: () => undefined,
            });
        """)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π user-agent
        user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
        ]
        
        driver.execute_script(f"""
            Object.defineProperty(navigator, 'userAgent', {{
                get: () => '{random.choice(user_agents)}',
            }});
        """)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º URL
        driver.get(url)
        
        # –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        if reconnect_time:
            time.sleep(reconnect_time)
        else:
            time.sleep(random.uniform(3.0, 6.0))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–µ—Ç–µ–∫—Ü–∏—é
        if check_stealth_detection(driver):
            logger.warning("üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–µ—Ç–µ–∫—Ü–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ URL")
            return handle_stealth_detection(driver, url)
        
        logger.info("‚úÖ URL —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç —Å–∫—Ä—ã—Ç–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–Ω–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ URL: {e}")
        return False


def stealth_click(driver: WebDriver, selector: str, use_actions: bool = True) -> bool:
    """
    –°–∫—Ä—ã—Ç–Ω—ã–π –∫–ª–∏–∫ —Å –æ–±—Ö–æ–¥–æ–º –¥–µ—Ç–µ–∫—Ü–∏–∏
    """
    try:
        logger.info(f"üîí –°–∫—Ä—ã—Ç–Ω—ã–π –∫–ª–∏–∫ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {selector}")
        
        # –ñ–¥–µ–º —ç–ª–µ–º–µ–Ω—Ç
        element = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        add_stealth_behavior(driver)
        
        if use_actions:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ActionChains –¥–ª—è –±–æ–ª–µ–µ —á–µ–ª–æ–≤–µ—á–Ω–æ–≥–æ –∫–ª–∏–∫–∞
            from selenium.webdriver.common.action_chains import ActionChains
            actions = ActionChains(driver)
            actions.move_to_element(element)
            time.sleep(random.uniform(0.1, 0.3))
            actions.click()
            actions.perform()
        else:
            # –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            time.sleep(random.uniform(0.1, 0.2))
            element.click()
        
        logger.info("‚úÖ –°–∫—Ä—ã—Ç–Ω—ã–π –∫–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–Ω–æ–º –∫–ª–∏–∫–µ: {e}")
        return False


def add_stealth_behavior(driver: WebDriver):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç stealth-–ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
    """
    try:
        # –°–ª—É—á–∞–π–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
        for _ in range(random.randint(2, 4)):
            x = random.randint(50, 700)
            y = random.randint(50, 500)
            driver.execute_script(f"window.scrollTo({x}, {y});")
            time.sleep(random.uniform(0.1, 0.3))
        
        # –°–ª—É—á–∞–π–Ω—ã–π —Å–∫—Ä–æ–ª–ª
        scroll_amount = random.randint(-200, 200)
        driver.execute_script(f"window.scrollBy(0, {scroll_amount});")
        time.sleep(random.uniform(0.2, 0.5))
        
        logger.debug("–î–æ–±–∞–≤–ª–µ–Ω–æ stealth-–ø–æ–≤–µ–¥–µ–Ω–∏–µ")
        
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ stealth-–ø–æ–≤–µ–¥–µ–Ω–∏—è: {e}")


def check_stealth_detection(driver: WebDriver) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ stealth-–º–µ—Ç–æ–¥–æ–≤
    """
    try:
        page_source = driver.page_source.lower()
        detection_indicators = [
            "gethandleverifier",
            "white screen",
            "bot detected",
            "automation detected",
            "captcha",
            "cloudflare",
            "access denied",
            "blocked"
        ]
        
        for indicator in detection_indicators:
            if indicator in page_source:
                logger.warning(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–µ—Ç–µ–∫—Ü–∏–∏: {indicator}")
                return True
        return False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ stealth-–¥–µ—Ç–µ–∫—Ü–∏–∏: {e}")
        return False


def handle_stealth_detection(driver: WebDriver, url: Optional[str] = None) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏—é stealth-–º–µ—Ç–æ–¥–æ–≤
    """
    logger.warning("üö® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º stealth-–¥–µ—Ç–µ–∫—Ü–∏—é...")
    
    try:
        # –î–ª–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞
        time.sleep(random.uniform(8.0, 15.0))
        
        # –î–æ–±–∞–≤–ª—è–µ–º stealth-–ø–æ–≤–µ–¥–µ–Ω–∏–µ
        add_stealth_behavior(driver)
        
        # –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if url:
            driver.get(url)
        else:
            driver.refresh()
        
        time.sleep(random.uniform(4.0, 7.0))
        add_stealth_behavior(driver)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
        if check_stealth_detection(driver):
            logger.error("üö® –î–µ—Ç–µ–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return False
        
        logger.info("‚úÖ Stealth-–¥–µ—Ç–µ–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ stealth-–¥–µ—Ç–µ–∫—Ü–∏–∏: {e}")
        return False


def stealth_type(driver: WebDriver, selector: str, text: str) -> bool:
    """
    –°–∫—Ä—ã—Ç–Ω—ã–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º–∏ –ø–∞—É–∑–∞–º–∏
    """
    try:
        logger.info(f"üîí –°–∫—Ä—ã—Ç–Ω—ã–π –≤–≤–æ–¥ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}")
        
        # –ñ–¥–µ–º —ç–ª–µ–º–µ–Ω—Ç
        element = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
        )
        
        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
        element.clear()
        time.sleep(random.uniform(0.3, 0.7))
        
        # –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º–∏ –ø–∞—É–∑–∞–º–∏
        for char in text:
            element.send_keys(char)
            time.sleep(random.uniform(0.05, 0.15))
        
        logger.info("‚úÖ –°–∫—Ä—ã—Ç–Ω—ã–π –≤–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–Ω–æ–º –≤–≤–æ–¥–µ: {e}")
        return False


def stealth_wait_for_element(driver: WebDriver, selector: str, timeout: int = 15) -> bool:
    """
    –°–∫—Ä—ã—Ç–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏
    """
    try:
        logger.info(f"üîí –°–∫—Ä—ã—Ç–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞: {selector}")
        
        start_time = time.time()
        while time.time() - start_time < timeout:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–µ—Ç–µ–∫—Ü–∏—é
                if check_stealth_detection(driver):
                    logger.warning("üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–µ—Ç–µ–∫—Ü–∏—è –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞")
                    if not handle_stealth_detection(driver):
                        return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
                element = driver.find_element(By.CSS_SELECTOR, selector)
                if element.is_displayed():
                    logger.info("‚úÖ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω —Å–∫—Ä—ã—Ç–Ω–æ")
                    return True
                    
            except Exception:
                pass
            
            time.sleep(random.uniform(0.5, 1.0))
        
        logger.error(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")
        return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–Ω–æ–º –æ–∂–∏–¥–∞–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
        return False 