# –ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
import logging
import os
import json
import datetime

logger = logging.getLogger(__name__)


# –§–æ—Ä–º–∏—Ä—É–µ—Ç HTML-—Ç–∞–±–ª–∏—Ü—É –∑–æ–Ω
def create_zones_table(zone_data):
    table_html = '<div class="zones-table">'
    for zone in zone_data:
        table_html += f'<div class="zone-row"><button class="zone-button" data-zone-title="{zone["title"]}">{zone["title"]}'
        if zone["has_pictograms"]:
            table_html += '<span class="pictogram-icon">üñºÔ∏è</span>'
        table_html += '</button>'
        if not zone["graphics_not_available"] and zone.get("svg_path") and zone["svg_path"].strip():
            table_html += f'<a href="{zone["svg_path"]}" download class="svg-download" title="–°–∫–∞—á–∞—Ç—å SVG"><span class="download-icon">‚¨á</span></a>'
        table_html += '</div>'
    if not zone_data:
        table_html += '<p>–ó–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>'
    table_html += '</div>'
    logger.info("HTML-—Ç–∞–±–ª–∏—Ü–∞ –∑–æ–Ω —Å–æ–∑–¥–∞–Ω–∞")
    return table_html


# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON
def save_data_to_json(vin_value, zone_data, main_screenshot_path, main_svg_path, zones_table, all_svgs_zip, data_dir, claim_number, options_data=None, vin_status="–ù–µ—Ç", started_at=None, completed_at=None, is_intermediate=False):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(data_dir):
        logger.error(f"‚ùå –ü–∞–ø–∫–∞ {data_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë")
        try:
            os.makedirs(data_dir, exist_ok=True)
            logger.info(f"‚úÖ –ü–∞–ø–∫–∞ {data_dir} —Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É {data_dir}: {e}")
            return None
    
    # –î–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    if is_intermediate:
        json_path = os.path.join(data_dir, f"data_intermediate_{claim_number}.json")
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π JSON –≤: {json_path}")
    else:
        # –î–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º timestamp
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        json_path = os.path.join(data_dir, f"data_{timestamp}.json")
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π JSON –≤: {json_path}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    json_completed = True  # JSON –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–±—Ä–∞–Ω
    db_saved = True  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ë–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
    
    # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    metadata = {
        "started_at": started_at.strftime("%Y-%m-%d %H:%M:%S") if started_at else None,
        "completed_at": completed_at.strftime("%Y-%m-%d %H:%M:%S") if completed_at else None,
        "last_updated": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "json_completed": json_completed,
        "db_saved": db_saved,
        "total_zones": len(zone_data),
        "total_options": options_data.get("statistics", {}).get("total_options", 0) if options_data else 0,
        "options_success": options_data.get("success", False) if options_data else False
    }
    
    data = {
        "vin_value": vin_value,
        "vin_status": vin_status,
        "zone_data": [{
            "title": zone["title"],
            "screenshot_path": zone["screenshot_path"].replace("\\", "/"),
            "svg_path": zone["svg_path"].replace("\\", "/") if zone.get("svg_path") else "",
            "has_pictograms": zone["has_pictograms"],
            "graphics_not_available": zone["graphics_not_available"],
            "details": [{"title": detail["title"], "svg_path": detail["svg_path"].replace("\\", "/")} for detail in zone["details"]],
            "pictograms": [{"section_name": pictogram["section_name"], "works": [{"work_name1": work["work_name1"], "work_name2": work["work_name2"], "svg_path": work["svg_path"].replace("\\", "/")} for work in pictogram["works"]]} for pictogram in zone.get("pictograms", [])]
        } for zone in zone_data],
        "main_screenshot_path": main_screenshot_path.replace("\\", "/") if main_screenshot_path else "",
        "main_svg_path": main_svg_path.replace("\\", "/") if main_svg_path else "",
        "zones_table": zones_table,
        "all_svgs_zip": all_svgs_zip.replace("\\", "/") if all_svgs_zip else "",
        "options_data": options_data if options_data else {"success": False, "zones": []},
        "metadata": metadata,
        "claim_number": claim_number
    }
    with open(json_path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {json_path}")
    logger.info(f"üìä VIN —Å—Ç–∞—Ç—É—Å '{vin_status}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ JSON")
    logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {metadata['started_at']}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {metadata['completed_at']}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞
    if started_at and completed_at:
        try:
            duration_seconds = (completed_at - started_at).total_seconds()
            duration_minutes = int(duration_seconds // 60)
            duration_secs = int(duration_seconds % 60)
            logger.info(f"‚è±Ô∏è –ò—Ç–æ–≥–æ–≤–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞: {duration_minutes}–º {duration_secs}—Å")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
    
    logger.info(f"üèÅ JSON –∑–∞–≤–µ—Ä—à–µ–Ω: {json_completed}, –ë–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {db_saved}")
    if options_data and options_data.get("success"):
        stats = options_data.get("statistics", {})
        logger.info(f"üíæ –û–ø—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {stats.get('total_selected', 0)}/{stats.get('total_options', 0)} –≤ {stats.get('total_zones', 0)} –∑–æ–Ω–∞—Ö")
    return json_path 