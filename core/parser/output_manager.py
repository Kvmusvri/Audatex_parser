# –ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
import logging
import os
import json
import datetime
from datetime import datetime
import pytz
from core.database.models import ParserCarRequestStatus, DatabaseSession, get_moscow_time
from sqlalchemy import text

logger = logging.getLogger(__name__)


# –§–æ—Ä–º–∏—Ä—É–µ—Ç HTML-—Ç–∞–±–ª–∏—Ü—É –∑–æ–Ω
def create_zones_table(zone_data):
    table_html = '<div class="zones-table">'
    for zone in zone_data:
        table_html += f'<div class="zone-row"><button class="zone-button" data-zone-title="{zone["title"]}">{zone["title"]}'
        if zone["has_pictograms"]:
            table_html += '<span class="pictogram-icon">üñºÔ∏è</span>'
        table_html += '</button>'
        if not zone["graphics_not_available"] and zone.get("svg_path") and zone["svg_path"].strip():
            table_html += f'<a href="{zone["svg_path"]}" download class="svg-download" title="–°–∫–∞—á–∞—Ç—å SVG"><span class="download-icon">‚¨á</span></a>'
        table_html += '</div>'
    if not zone_data:
        table_html += '<p>–ó–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>'
    table_html += '</div>'
    logger.info("HTML-—Ç–∞–±–ª–∏—Ü–∞ –∑–æ–Ω —Å–æ–∑–¥–∞–Ω–∞")
    return table_html


# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON
def save_data_to_json(vin_value, zone_data, main_screenshot_path, main_svg_path, zones_table, all_svgs_zip, data_dir, claim_number, options_data=None, vin_status="–ù–µ—Ç", started_at=None, completed_at=None, is_intermediate=False):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(data_dir):
        logger.error(f"‚ùå –ü–∞–ø–∫–∞ {data_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë")
        try:
            os.makedirs(data_dir, exist_ok=True)
            logger.info(f"‚úÖ –ü–∞–ø–∫–∞ {data_dir} —Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É {data_dir}: {e}")
            return None
    
    # –î–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    if is_intermediate:
        json_path = os.path.join(data_dir, f"data_intermediate_{claim_number}.json")
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π JSON –≤: {json_path}")
    else:
        # –î–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º timestamp
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        json_path = os.path.join(data_dir, f"data_{timestamp}.json")
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π JSON –≤: {json_path}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    json_completed = True  # JSON –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–±—Ä–∞–Ω
    db_saved = True  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ë–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
    
    # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    def format_time_with_timezone(dt):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –¥–ª—è JSON"""
        if dt is None:
            return None
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –±–µ–∑ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –º–æ—Å–∫–æ–≤—Å–∫–∏–º
        if dt.tzinfo is None:
            moscow_tz = pytz.timezone('Europe/Moscow')
            dt = moscow_tz.localize(dt)
        elif dt.tzinfo.utcoffset(dt).total_seconds() == 0:
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤ UTC, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
            moscow_tz = pytz.timezone('Europe/Moscow')
            dt = dt.astimezone(moscow_tz)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
        return dt.strftime("%Y-%m-%d %H:%M:%S")
    
    metadata = {
        "started_at": format_time_with_timezone(started_at),
        "completed_at": format_time_with_timezone(completed_at),
        "last_updated": format_time_with_timezone(datetime.datetime.now()),
        "json_completed": json_completed,
        "db_saved": db_saved,
        "total_zones": len(zone_data),
        "total_options": options_data.get("statistics", {}).get("total_options", 0) if options_data else 0,
        "options_success": options_data.get("success", False) if options_data else False
    }
    
    data = {
        "vin_value": vin_value,
        "vin_status": vin_status,
        "zone_data": [{
            "title": zone["title"],
            "screenshot_path": zone["screenshot_path"].replace("\\", "/"),
            "svg_path": zone["svg_path"].replace("\\", "/") if zone.get("svg_path") else "",
            "has_pictograms": zone["has_pictograms"],
            "graphics_not_available": zone["graphics_not_available"],
            "details": [{"title": detail["title"], "svg_path": detail["svg_path"].replace("\\", "/")} for detail in zone["details"]],
            "pictograms": [{"section_name": pictogram["section_name"], "works": [{"work_name1": work["work_name1"], "work_name2": work["work_name2"], "svg_path": work["svg_path"].replace("\\", "/")} for work in pictogram["works"]]} for pictogram in zone.get("pictograms", [])]
        } for zone in zone_data],
        "main_screenshot_path": main_screenshot_path.replace("\\", "/") if main_screenshot_path else "",
        "main_svg_path": main_svg_path.replace("\\", "/") if main_svg_path else "",
        "zones_table": zones_table,
        "all_svgs_zip": all_svgs_zip.replace("\\", "/") if all_svgs_zip else "",
        "options_data": options_data if options_data else {"success": False, "zones": []},
        "metadata": metadata,
        "claim_number": claim_number
    }
    with open(json_path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {json_path}")
    logger.info(f"üìä VIN —Å—Ç–∞—Ç—É—Å '{vin_status}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ JSON")
    logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {metadata['started_at']}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {metadata['completed_at']}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞
    if started_at and completed_at:
        try:
            duration_seconds = (completed_at - started_at).total_seconds()
            duration_minutes = int(duration_seconds // 60)
            duration_secs = int(duration_seconds % 60)
            logger.info(f"‚è±Ô∏è –ò—Ç–æ–≥–æ–≤–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞: {duration_minutes}–º {duration_secs}—Å")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
    
    logger.info(f"üèÅ JSON –∑–∞–≤–µ—Ä—à–µ–Ω: {json_completed}, –ë–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {db_saved}")
    if options_data and options_data.get("success"):
        stats = options_data.get("statistics", {})
        logger.info(f"üíæ –û–ø—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {stats.get('total_selected', 0)}/{stats.get('total_options', 0)} –≤ {stats.get('total_zones', 0)} –∑–æ–Ω–∞—Ö")
    return json_path


async def restore_started_at_from_db(json_path: str, claim_number: str, vin_number: str) -> bool:
    """
    –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç started_at –∏–∑ –ë–î –µ—Å–ª–∏ –≤ JSON –æ–Ω null
    –£—á–∏—Ç—ã–≤–∞–µ—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: –ë–î —Ö—Ä–∞–Ω–∏—Ç –≤ UTC+3, JSON –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    """
    try:
        # –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ started_at –∏ —Ä–∞–≤–µ–Ω –ª–∏ –æ–Ω null
        metadata = data.get('metadata', {})
        started_at = metadata.get('started_at')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        should_restore = (started_at is None or started_at == "null" or started_at == "None" or started_at == "")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ started_at null –∏–ª–∏ –ø—É—Å—Ç–æ–π
        # –ï—Å–ª–∏ started_at –µ—Å—Ç—å, –Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π - –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –µ–≥–æ
        
        if should_restore:
            logger.info(f"üîç –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º started_at –∏–∑ –ë–î –¥–ª—è {claim_number}_{vin_number}")
            
            # –ò—â–µ–º –≤ –ë–î
            async with DatabaseSession() as session:
                result = await session.execute(
                    text(f"""
                    SELECT started_at 
                    FROM parser_car_request_status 
                    WHERE request_id = '{claim_number}' AND vin = '{vin_number}'
                    ORDER BY created_date DESC, id DESC 
                    LIMIT 1
                    """)
                )
                db_started_at = result.scalar()
                
                logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –ë–î –¥–ª—è {claim_number}_{vin_number}: {db_started_at} (—Ç–∏–ø: {type(db_started_at)})")
                
                if db_started_at:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
                    if isinstance(db_started_at, str):
                        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º –µ—ë
                        try:
                            # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ ISO —Ñ–æ—Ä–º–∞—Ç —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º
                            db_started_at = datetime.fromisoformat(db_started_at)
                        except ValueError:
                            # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
                            try:
                                db_started_at = datetime.strptime(db_started_at, "%Y-%m-%d %H:%M:%S")
                            except ValueError:
                                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è –∏–∑ –ë–î: {db_started_at}")
                                return False
                    
                    # –í –ë–î –≤—Ä–µ–º—è —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ UTC+3 (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è JSON
                    if db_started_at.tzinfo is None:
                        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –±–µ–∑ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –º–æ—Å–∫–æ–≤—Å–∫–∏–º
                        moscow_tz = pytz.timezone('Europe/Moscow')
                        db_started_at = moscow_tz.localize(db_started_at)
                    elif db_started_at.tzinfo.utcoffset(db_started_at).total_seconds() == 0:
                        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤ UTC, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
                        moscow_tz = pytz.timezone('Europe/Moscow')
                        db_started_at = db_started_at.astimezone(moscow_tz)
                    # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ (+03), –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –¥–ª—è JSON
                    formatted_time = db_started_at.strftime("%Y-%m-%d %H:%M:%S")
                    
                    logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è {claim_number}_{vin_number}:")
                    logger.info(f"  –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑ –ë–î: {db_started_at}")
                    logger.info(f"  –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {db_started_at.tzinfo}")
                    logger.info(f"  –ò—Ç–æ–≥–æ–≤–æ–µ –¥–ª—è JSON: {formatted_time}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º JSON
                    metadata['started_at'] = formatted_time
                    data['metadata'] = metadata
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JSON
                    with open(json_path, 'w', encoding='utf-8') as f:
                        json.dump(data, f, ensure_ascii=False, indent=2)
                    
                    logger.info(f"‚úÖ started_at –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –ë–î: {formatted_time} (–ú–°–ö)")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è started_at –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –¥–ª—è {claim_number}_{vin_number}")
                    return False
        else:
            logger.info(f"‚úÖ started_at —É–∂–µ –µ—Å—Ç—å –≤ JSON: {started_at}")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è started_at: {e}")
        return False


async def restore_last_updated_from_db(json_path: str, claim_number: str, vin_number: str) -> bool:
    """
    –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç last_updated –∏–∑ –ë–î –µ—Å–ª–∏ –≤ JSON –æ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    –£—á–∏—Ç—ã–≤–∞–µ—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: –ë–î —Ö—Ä–∞–Ω–∏—Ç –≤ UTC+3, JSON –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    """
    try:
        # –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ last_updated –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ–Ω
        metadata = data.get('metadata', {})
        last_updated = metadata.get('last_updated')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        should_restore = (last_updated is None or last_updated == "null" or last_updated == "None" or last_updated == "")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ last_updated null –∏–ª–∏ –ø—É—Å—Ç–æ–π
        # –ï—Å–ª–∏ last_updated –µ—Å—Ç—å, –Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π - –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –µ–≥–æ
        
        if should_restore:
            logger.info(f"üîç –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º last_updated –∏–∑ –ë–î –¥–ª—è {claim_number}_{vin_number}")
            
            # –ò—â–µ–º –≤ –ë–î
            async with DatabaseSession() as session:
                result = await session.execute(
                    text(f"""
                    SELECT completed_at 
                    FROM parser_car_request_status 
                    WHERE request_id = '{claim_number}' AND vin = '{vin_number}'
                    ORDER BY created_date DESC, id DESC 
                    LIMIT 1
                    """)
                )
                db_completed_at = result.scalar()
                
                logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–æ completed_at –∏–∑ –ë–î –¥–ª—è {claim_number}_{vin_number}: {db_completed_at} (—Ç–∏–ø: {type(db_completed_at)})")
                
                if db_completed_at:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
                    if isinstance(db_completed_at, str):
                        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º –µ—ë
                        try:
                            # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ ISO —Ñ–æ—Ä–º–∞—Ç —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º
                            db_completed_at = datetime.fromisoformat(db_completed_at)
                        except ValueError:
                            # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
                            try:
                                db_completed_at = datetime.strptime(db_completed_at, "%Y-%m-%d %H:%M:%S")
                            except ValueError:
                                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è –∏–∑ –ë–î: {db_completed_at}")
                                return False
                    
                    # –í –ë–î –≤—Ä–µ–º—è —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ UTC+3 (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è JSON
                    if db_completed_at.tzinfo is None:
                        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –±–µ–∑ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –º–æ—Å–∫–æ–≤—Å–∫–∏–º
                        moscow_tz = pytz.timezone('Europe/Moscow')
                        db_completed_at = moscow_tz.localize(db_completed_at)
                    elif db_completed_at.tzinfo.utcoffset(db_completed_at).total_seconds() == 0:
                        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤ UTC, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
                        moscow_tz = pytz.timezone('Europe/Moscow')
                        db_completed_at = db_completed_at.astimezone(moscow_tz)
                    # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ (+03), –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –¥–ª—è JSON
                    formatted_time = db_completed_at.strftime("%Y-%m-%d %H:%M:%S")
                    
                    logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ last_updated –¥–ª—è {claim_number}_{vin_number}:")
                    logger.info(f"  –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑ –ë–î: {db_completed_at}")
                    logger.info(f"  –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {db_completed_at.tzinfo}")
                    logger.info(f"  –ò—Ç–æ–≥–æ–≤–æ–µ –¥–ª—è JSON: {formatted_time}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º JSON
                    metadata['last_updated'] = formatted_time
                    data['metadata'] = metadata
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JSON
                    with open(json_path, 'w', encoding='utf-8') as f:
                        json.dump(data, f, ensure_ascii=False, indent=2)
                    
                    logger.info(f"‚úÖ last_updated –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –ë–î: {formatted_time} (–ú–°–ö)")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è completed_at –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –¥–ª—è {claim_number}_{vin_number}")
                    return False
        else:
            logger.info(f"‚úÖ last_updated —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤ JSON: {last_updated}")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è last_updated: {e}")
        return False


async def restore_completed_at_from_db(json_path: str, claim_number: str, vin_number: str) -> bool:
    """
    –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç completed_at –∏–∑ –ë–î –µ—Å–ª–∏ –≤ JSON –æ–Ω null –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    –£—á–∏—Ç—ã–≤–∞–µ—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: –ë–î —Ö—Ä–∞–Ω–∏—Ç –≤ UTC+3, JSON –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    """
    try:
        # –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ completed_at –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ–Ω
        metadata = data.get('metadata', {})
        completed_at = metadata.get('completed_at')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        should_restore = (completed_at is None or completed_at == "null" or completed_at == "None" or completed_at == "")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ completed_at null –∏–ª–∏ –ø—É—Å—Ç–æ–π
        # –ï—Å–ª–∏ completed_at –µ—Å—Ç—å, –Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π - –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –µ–≥–æ
        
        if should_restore:
            logger.info(f"üîç –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º completed_at –∏–∑ –ë–î –¥–ª—è {claim_number}_{vin_number}")
            
            # –ò—â–µ–º –≤ –ë–î
            async with DatabaseSession() as session:
                result = await session.execute(
                    text(f"""
                    SELECT completed_at 
                    FROM parser_car_request_status 
                    WHERE request_id = '{claim_number}' AND vin = '{vin_number}'
                    ORDER BY created_date DESC, id DESC 
                    LIMIT 1
                    """)
                )
                db_completed_at = result.scalar()
                
                logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–æ completed_at –∏–∑ –ë–î –¥–ª—è {claim_number}_{vin_number}: {db_completed_at} (—Ç–∏–ø: {type(db_completed_at)})")
                
                if db_completed_at:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
                    if isinstance(db_completed_at, str):
                        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º –µ—ë
                        try:
                            # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ ISO —Ñ–æ—Ä–º–∞—Ç —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º
                            db_completed_at = datetime.fromisoformat(db_completed_at)
                        except ValueError:
                            # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
                            try:
                                db_completed_at = datetime.strptime(db_completed_at, "%Y-%m-%d %H:%M:%S")
                            except ValueError:
                                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è –∏–∑ –ë–î: {db_completed_at}")
                                return False
                    
                    # –í –ë–î –≤—Ä–µ–º—è —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ UTC+3 (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è JSON
                    if db_completed_at.tzinfo is None:
                        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –±–µ–∑ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –º–æ—Å–∫–æ–≤—Å–∫–∏–º
                        moscow_tz = pytz.timezone('Europe/Moscow')
                        db_completed_at = moscow_tz.localize(db_completed_at)
                    elif db_completed_at.tzinfo.utcoffset(db_completed_at).total_seconds() == 0:
                        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤ UTC, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
                        moscow_tz = pytz.timezone('Europe/Moscow')
                        db_completed_at = db_completed_at.astimezone(moscow_tz)
                    # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ (+03), –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –¥–ª—è JSON
                    formatted_time = db_completed_at.strftime("%Y-%m-%d %H:%M:%S")
                    
                    logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ completed_at –¥–ª—è {claim_number}_{vin_number}:")
                    logger.info(f"  –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑ –ë–î: {db_completed_at}")
                    logger.info(f"  –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {db_completed_at.tzinfo}")
                    logger.info(f"  –ò—Ç–æ–≥–æ–≤–æ–µ –¥–ª—è JSON: {formatted_time}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º JSON
                    metadata['completed_at'] = formatted_time
                    data['metadata'] = metadata
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JSON
                    with open(json_path, 'w', encoding='utf-8') as f:
                        json.dump(data, f, ensure_ascii=False, indent=2)
                    
                    logger.info(f"‚úÖ completed_at –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –ë–î: {formatted_time} (–ú–°–ö)")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è completed_at –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –¥–ª—è {claim_number}_{vin_number}")
                    return False
        else:
            logger.info(f"‚úÖ completed_at —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤ JSON: {completed_at}")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è completed_at: {e}")
        return False 