import asyncio
from concurrent.futures import ThreadPoolExecutor
from functools import partial
from selectolax.lexbor import LexborHTMLParser
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, StaleElementReferenceException, WebDriverException
import logging
import time
import pickle
import psutil
import os
import json
import datetime
from lxml import etree
import urllib3
import copy
import re
import xml.etree.ElementTree as ET
from collections import Counter
from transliterate import translit
from PIL import Image
from io import BytesIO
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
import subprocess
from webdriver_manager.core.os_manager import ChromeType
import shutil
import requests
import zipfile
import platform
import sys
import signal

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏ —Ñ—É–Ω–∫—Ü–∏–π
from .constants import *
from .browser import kill_chrome_processes, get_chromedriver_version, init_browser
from .auth import load_cookies, perform_login, check_if_authorized
from .folder_manager import create_folders, extract_vin_and_claim_number
from .output_manager import create_zones_table, save_data_to_json
from .visual_processor import (
    is_zone_file, split_svg_by_details, save_svg_sync, 
    save_main_screenshot_and_svg, extract_zones, 
    process_zone, process_pictograms, ensure_zone_details_extracted
)
from .option_processor import process_vehicle_options
from .actions import (
    wait_for_table, click_cansel_button, click_request_type_button,
    search_in_table, click_more_icon, open_task, 
    switch_to_frame_and_confirm, click_breadcrumb, is_table_empty,
    find_claim_data
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def search_and_extract(driver, claim_number, vin_number, svg_collection=True):
    logger.info(f"üéõÔ∏è –§–ª–∞–≥ —Å–±–æ—Ä–∞ SVG: {'–í–ö–õ–Æ–ß–ï–ù' if svg_collection else '–û–¢–ö–õ–Æ–ß–ï–ù'}")
    zone_data = []
    if not wait_for_table(driver):
        return {"error": "–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å"}
    click_cansel_button(driver)
    result = find_claim_data(driver, claim_number=claim_number, vin_number=vin_number)
    if "error" in result:
        return result
    if not click_more_icon(driver):
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π"}
    if not open_task(driver):
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É"}
    WebDriverWait(driver, 8).until(EC.presence_of_element_located((By.CSS_SELECTOR, "body")))
    time.sleep(0.5)
    current_url = driver.current_url
    logger.info(f"–¢–µ–∫—É—â–∏–π URL: {current_url}")
    claim_number, vin_number = extract_vin_and_claim_number(driver, current_url)
    screenshot_dir, svg_dir, data_dir = create_folders(claim_number, vin_number)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    base_url = current_url.split('step')[0][:-1] + '&step=Damage+capturing'
    logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω URL –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: {base_url}")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è main screenshot
    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ URL –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è main screenshot: {base_url}")
    driver.get(base_url)
    WebDriverWait(driver, 8).until(EC.presence_of_element_located((By.CSS_SELECTOR, "body")))
    time.sleep(0.5)
    if not switch_to_frame_and_confirm(driver):
        driver.switch_to.default_content()
        return {"error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Ñ—Ä–µ–π–º {IFRAME_ID}"}
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    main_screenshot_relative, main_svg_relative = save_main_screenshot_and_svg(driver, screenshot_dir, svg_dir, timestamp, claim_number, vin_number, svg_collection)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å None –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    if main_screenshot_relative is None:
        main_screenshot_relative = ""
        logger.warning("‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –ø—É—Ç—å")
    if main_svg_relative is None:
        main_svg_relative = ""
        logger.warning("‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π SVG –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –ø—É—Ç—å")
    
    # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—Ä–µ–π–º–∞ –¥–ª—è —Å–±–æ—Ä–∞ –æ–ø—Ü–∏–π
    driver.switch_to.default_content()
    
    # –°–ù–ê–ß–ê–õ–ê –°–û–ë–ò–†–ê–ï–ú –û–ü–¶–ò–ò –ê–í–¢–û–ú–û–ë–ò–õ–Ø (–¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–æ–Ω)
    logger.info("üöó –≠–¢–ê–ü 1: –°–±–æ—Ä –æ–ø—Ü–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
    options_result = process_vehicle_options(driver, claim_number, vin_number)
    
    # –í–û–ó–í–†–ê–©–ê–ï–ú–°–Ø –ö –°–¢–†–ê–ù–ò–¶–ï –ü–û–í–†–ï–ñ–î–ï–ù–ò–ô –î–õ–Ø –°–ë–û–†–ê SVG
    logger.info("üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è —Å–±–æ—Ä–∞ SVG")
    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ URL –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è SVG: {base_url}")
    driver.get(base_url)
    WebDriverWait(driver, 8).until(EC.presence_of_element_located((By.CSS_SELECTOR, "body")))
    time.sleep(0.5)
    if not switch_to_frame_and_confirm(driver):
        driver.switch_to.default_content()
        return {"error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Ñ—Ä–µ–π–º {IFRAME_ID} –¥–ª—è SVG"}
    
    if not click_breadcrumb(driver):
        driver.switch_to.default_content()
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ breadcrumb"}
    zones = extract_zones(driver)
    if not zones:
        driver.switch_to.default_content()
        return {"error": "–ó–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}
    
    # –ó–ê–¢–ï–ú –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –ó–û–ù–´ –ò SVG
    logger.info("üé® –≠–¢–ê–ü 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–æ–Ω –∏ SVG")
    for zone in zones:
        zone_data.extend(process_zone(driver, zone, screenshot_dir, svg_dir, claim_number=claim_number, vin=vin_number, svg_collection=svg_collection))
    driver.switch_to.default_content()
    
    # –ì–ê–†–ê–ù–¢–ò–†–£–ï–ú –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∏–∑ –≤—Å–µ—Ö –∑–æ–Ω
    logger.info(f"üîß –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–ª—è {len(zone_data)} –∑–æ–Ω")
    zone_data = ensure_zone_details_extracted(zone_data, svg_dir, claim_number=claim_number, vin=vin_number, svg_collection=svg_collection)
    
    zones_table = create_zones_table(zone_data)
    json_path = save_data_to_json(vin_number, zone_data, main_screenshot_relative, main_svg_relative, zones_table, "", data_dir, claim_number, options_result)
    return {"success": "–ó–∞–¥–∞—á–∞ –æ—Ç–∫—Ä—ã—Ç–∞", "main_screenshot_path": main_screenshot_relative, "main_svg_path": main_svg_relative, "zones_table": zones_table, "zone_data": zone_data, "options_data": options_result, "vin_value": vin_number, "claim_number": claim_number}

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø–∞—Ä—Å–µ—Ä 
async def login_audatex(username: str, password: str, claim_number: str, vin_number: str, svg_collection: bool = True):
    driver = None
    max_attempts = 10
    error_message = None
    error_count = 0
    for attempt in range(1, max_attempts + 1):
        try:
            if not claim_number and not vin_number:
                logger.error("–ù–∏ –Ω–æ–º–µ—Ä –¥–µ–ª–∞, –Ω–∏ VIN –Ω–µ –≤–≤–µ–¥–µ–Ω—ã")
                return {"error": "–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –Ω–æ–º–µ—Ä –¥–µ–ª–∞ –∏–ª–∏ VIN"}
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt} –∏–∑ {max_attempts}: –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è claim_number={claim_number}, vin_number={vin_number}")
            logger.info(f"üéõÔ∏è –†–µ–∂–∏–º —Å–±–æ—Ä–∞ SVG: {'–í–ö–õ–Æ–ß–ï–ù' if svg_collection else '–û–¢–ö–õ–Æ–ß–ï–ù'}")
            kill_chrome_processes()
            driver = init_browser()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            cookies_valid = load_cookies(driver, BASE_URL, COOKIES_FILE)
            
            if not cookies_valid:
                logger.info("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                if not perform_login(driver, username, password, COOKIES_FILE):
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            else:
                logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã
            if not check_if_authorized(driver):
                logger.warning("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Ç–µ—Ä—è–Ω–∞, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞")
                if not perform_login(driver, username, password, COOKIES_FILE):
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(None, lambda: search_and_extract(driver, claim_number, vin_number, svg_collection))
            if "success" in result:
                cookies = driver.get_cookies()
                with open(COOKIES_FILE, "wb") as f:
                    pickle.dump(cookies, f)
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}: Cookies –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
                return result
            raise Exception(result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ search_and_extract"))
        except Exception as e:
            current_error = str(e)
            logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}: –û—à–∏–±–∫–∞: {current_error}")
            logger.error(f"–¢–µ–∫—É—â–∏–π URL: {driver.current_url if driver else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
            logger.error(f"–ö–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {driver.page_source[:500] if driver else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
            if driver:
                try:
                    driver.quit()
                    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}: –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
                except Exception as close_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {str(close_error)}")
                driver = None
            if error_message == current_error:
                error_count += 1
            else:
                error_message = current_error
                error_count = 1
            if error_count >= max_attempts:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏–ª–∞—Å—å {max_attempts} —Ä–∞–∑: {error_message}")
                return {"error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫: {error_message}"}
            if attempt < max_attempts:
                logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {max_attempts}")
                time.sleep(0.5)
                continue
            logger.error(f"–ò—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
            return {"error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥: {current_error}"}
        finally:
            if driver:
                try:
                    driver.quit()
                    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}: –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç –≤ finally")
                except Exception as close_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –≤ finally: {str(close_error)}")
                driver = None
    return {"error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫"}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
def terminate_all_processes_and_restart(current_url=None):
    logger.critical("–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –±—Ä–∞—É–∑–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ!")
    try:
        for proc in psutil.process_iter(['name', 'pid']):
            if proc.info['name'] in ['chrome.exe', 'chromedriver.exe', 'chrome', 'chromedriver']:
                try:
                    proc.kill()
                    logger.critical(f"–ó–∞–≤–µ—Ä—à—ë–Ω –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–∞—É–∑–µ—Ä–∞: {proc.info['name']} (pid={proc.info['pid']})")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {proc.info['name']}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Chrome/Chromedriver: {e}")
    try:
        parent = psutil.Process(os.getpid())
        children = parent.children(recursive=True)
        for child in children:
            try:
                child.kill()
                logger.critical(f"–ó–∞–≤–µ—Ä—à—ë–Ω –¥–æ—á–µ—Ä–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å Python: {child.name()} (pid={child.pid})")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ {child.pid}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–æ—á–µ—Ä–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
    uvicorn_cmd = [sys.executable, "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
    if current_url:
        logger.critical(f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ. –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8000{current_url}")
    else:
        logger.critical("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ.")
    logger.critical("–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å Python –±—É–¥–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 8000.")
    try:
        os.execv(sys.executable, uvicorn_cmd)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–æ–≤–æ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ execv: {e}")
        try:
            subprocess.Popen(uvicorn_cmd)
            logger.critical("–ù–æ–≤–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 8000 —á–µ—Ä–µ–∑ Popen.")
        except Exception as e2:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Popen: {e2}")
        os._exit(0)