"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    * search_and_extract: –ü–æ–∏—Å–∫ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏ –∏ VIN
    * login_audatex: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—Ö–æ–¥ –≤ Audatex –∏ –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞  
    * terminate_all_processes_and_restart: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Chrome –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞
"""
import asyncio
from concurrent.futures import ThreadPoolExecutor
from functools import partial
from selectolax.lexbor import LexborHTMLParser
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, StaleElementReferenceException, WebDriverException
import logging
import time
import pickle
import psutil
import os
import json
from datetime import datetime
from lxml import etree
import urllib3
import copy
import re
import xml.etree.ElementTree as ET
from collections import Counter
from transliterate import translit
from PIL import Image
from io import BytesIO
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
import subprocess
from webdriver_manager.core.os_manager import ChromeType
import shutil
import requests
import zipfile
import platform
import sys

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏ —Ñ—É–Ω–∫—Ü–∏–π
from .constants import *
from .browser import kill_chrome_processes, get_chromedriver_version, init_browser
from .auth import load_cookies, perform_login, check_if_authorized
from .folder_manager import create_folders
from .output_manager import create_zones_table, save_data_to_json
from core.database.models import get_moscow_time
from .visual_processor import (
    is_zone_file, split_svg_by_details, save_svg_sync, 
    save_main_screenshot_and_svg, extract_zones, 
    process_zone, process_pictograms, ensure_zone_details_extracted
)
from .option_processor import process_vehicle_options
from .actions import (
    wait_for_table, click_cansel_button, click_request_type_button,
    search_in_table, click_more_icon, open_task, 
    switch_to_frame_and_confirm, click_breadcrumb, is_table_empty,
    find_claim_data, get_vin_status
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)




# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def search_and_extract(driver, claim_number, vin_number, svg_collection=True, started_at=None):
    """
    –ü–æ–∏—Å–∫ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏ –∏ VIN.
    
    Args:
        driver: WebDriver - —ç–∫–∑–µ–º–ø–ª—è—Ä –±—Ä–∞—É–∑–µ—Ä–∞
        claim_number: str - –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –∏–∑ —Ñ–æ—Ä–º—ã
        vin_number: str - VIN –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ —Ñ–æ—Ä–º—ã
        svg_collection: bool - —Å–æ–±–∏—Ä–∞—Ç—å SVG (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
        started_at: datetime|str|None - –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        dict - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
    """
    logger.info(f"üéõÔ∏è –§–ª–∞–≥ —Å–±–æ—Ä–∞ SVG: {'–í–ö–õ–Æ–ß–ï–ù' if svg_collection else '–û–¢–ö–õ–Æ–ß–ï–ù'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º started_at
    logger.info(f"üîç search_and_extract –ø–æ–ª—É—á–∏–ª started_at: {started_at} (—Ç–∏–ø: {type(started_at)})")
    
    if started_at is None:
        started_at = datetime.now()
        logger.info(f"‚úÖ started_at —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {started_at}")
    elif isinstance(started_at, str):
        try:
            started_at = datetime.fromisoformat(started_at.replace('Z', '+00:00'))
            logger.info(f"‚úÖ started_at –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –∏–∑ —Å—Ç—Ä–æ–∫–∏: {started_at}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å started_at '{started_at}': {e}")
            started_at = datetime.now()
            logger.info(f"‚úÖ started_at —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {started_at}")
    else:
        logger.info(f"‚úÖ started_at —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞: {started_at}")
    
    zone_data = []
    if not wait_for_table(driver):
        return {"error": "–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å"}
    click_cansel_button(driver)
    result = find_claim_data(driver, claim_number=claim_number, vin_number=vin_number)
    if "error" in result:
        return result
    if not click_more_icon(driver):
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π"}
    if not open_task(driver):
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É"}
    logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏")
    WebDriverWait(driver, 30, poll_frequency=0.5).until(EC.presence_of_element_located((By.CSS_SELECTOR, "body")))
    time.sleep(1)
    current_url = driver.current_url
    logger.info(f"–¢–µ–∫—É—â–∏–π URL: {current_url}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã –≤–º–µ—Å—Ç–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ –∑–∞—è–≤–∫–∏
    logger.info(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã: claim_number='{claim_number}', vin_number='{vin_number}'")
    
    # –ü–æ–ª—É—á–∞–µ–º VIN —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏
    try:
        vin_status = get_vin_status(driver)
        logger.info(f"üìä VIN —Å—Ç–∞—Ç—É—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: {vin_status}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ VIN —Å—Ç–∞—Ç—É—Å–∞: {e}")
        vin_status = "–ù–µ—Ç"
    
    try:
        screenshot_dir, svg_dir, data_dir = create_folders(claim_number, vin_number)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–æ–∫: {e}")
        return {"error": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫: {str(e)}"}
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    base_url = current_url.split('step')[0][:-1] + '&step=Damage+capturing'
    logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω URL –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: {base_url}")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è main screenshot
    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ URL –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è main screenshot: {base_url}")
    driver.get(base_url)
    logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π")
    WebDriverWait(driver, 30, poll_frequency=0.5).until(EC.presence_of_element_located((By.CSS_SELECTOR, "body")))
    time.sleep(1)
    if not switch_to_frame_and_confirm(driver):
        driver.switch_to.default_content()
        return {"error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Ñ—Ä–µ–π–º {IFRAME_ID}"}
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    main_screenshot_relative, main_svg_relative = save_main_screenshot_and_svg(driver, screenshot_dir, svg_dir, timestamp, claim_number, vin_number, svg_collection)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å None –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    if main_screenshot_relative is None:
        main_screenshot_relative = ""
        logger.warning("‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –ø—É—Ç—å")
    if main_svg_relative is None:
        main_svg_relative = ""
        logger.warning("‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π SVG –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –ø—É—Ç—å")
    
    # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—Ä–µ–π–º–∞ –¥–ª—è —Å–±–æ—Ä–∞ –æ–ø—Ü–∏–π
    driver.switch_to.default_content()
    
    # –°–ù–ê–ß–ê–õ–ê –°–û–ë–ò–†–ê–ï–ú –û–ü–¶–ò–ò –ê–í–¢–û–ú–û–ë–ò–õ–Ø (–¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–æ–Ω)
    logger.info("üöó –≠–¢–ê–ü 1: –°–±–æ—Ä –æ–ø—Ü–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
    options_result = process_vehicle_options(driver, claim_number, vin_number)
    
    # –í–û–ó–í–†–ê–©–ê–ï–ú–°–Ø –ö –°–¢–†–ê–ù–ò–¶–ï –ü–û–í–†–ï–ñ–î–ï–ù–ò–ô –î–õ–Ø –°–ë–û–†–ê SVG
    logger.info("üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è —Å–±–æ—Ä–∞ SVG")
    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ URL –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è SVG: {base_url}")
    driver.get(base_url)
    logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è SVG")
    WebDriverWait(driver, 30, poll_frequency=0.5).until(EC.presence_of_element_located((By.CSS_SELECTOR, "body")))
    time.sleep(1)
    if not switch_to_frame_and_confirm(driver):
        driver.switch_to.default_content()
        return {"error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Ñ—Ä–µ–π–º {IFRAME_ID} –¥–ª—è SVG"}
    
    if not click_breadcrumb(driver):
        driver.switch_to.default_content()
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ breadcrumb"}
    zones = extract_zones(driver)
    if not zones:
        driver.switch_to.default_content()
        return {"error": "–ó–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}
    
    # –ó–ê–¢–ï–ú –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –ó–û–ù–´ –ò SVG
    logger.info("üé® –≠–¢–ê–ü 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–æ–Ω –∏ SVG")
    
    # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–æ–Ω
    logger.info("üíæ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–æ–Ω")
    intermediate_json_path = save_data_to_json(
        vin_number, [], main_screenshot_relative, main_svg_relative, 
        "", "", data_dir, claim_number, options_result, vin_status,
        started_at=started_at, completed_at=datetime.now(), is_intermediate=True
    )
    if intermediate_json_path:
        logger.info(f"‚úÖ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {intermediate_json_path}")
    else:
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π JSON")
    
    for zone in zones:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—Ä–∞—É–∑–µ—Ä –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            try:
                driver.current_url
            except Exception as browser_error:
                logger.error(f"‚ùå –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–æ–Ω—ã {zone.get('title', 'Unknown')}: {browser_error}")
                return {"error": "–ë—Ä–∞—É–∑–µ—Ä –±—ã–ª –∑–∞–∫—Ä—ã—Ç –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", "browser_closed": True}
                
            zone_result = process_zone(driver, zone, screenshot_dir, svg_dir, claim_number=claim_number, vin=vin_number, svg_collection=svg_collection)
            zone_data.extend(zone_result)
            
            # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∑–æ–Ω—ã
            logger.info(f"üíæ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–æ–Ω—ã: {zone.get('title', 'Unknown')}")
            intermediate_json_path = save_data_to_json(
                vin_number, zone_data, main_screenshot_relative, main_svg_relative, 
                "", "", data_dir, claim_number, options_result, vin_status,
                started_at=started_at, completed_at=datetime.now(), is_intermediate=True
            )
            if intermediate_json_path:
                logger.info(f"‚úÖ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π JSON –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –∑–æ–Ω—ã {zone.get('title', 'Unknown')}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–æ–Ω—ã {zone.get('title', 'Unknown')}: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –∑–æ–Ω
            continue
    
    driver.switch_to.default_content()
    
    # –ì–ê–†–ê–ù–¢–ò–†–£–ï–ú –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∏–∑ –≤—Å–µ—Ö –∑–æ–Ω
    logger.info(f"üîß –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–ª—è {len(zone_data)} –∑–æ–Ω")
    zone_data = ensure_zone_details_extracted(zone_data, svg_dir, claim_number=claim_number, vin=vin_number, svg_collection=svg_collection)
    
    zones_table = create_zones_table(zone_data)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
    completed_at = get_moscow_time()
    logger.info(f"‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω –≤: {completed_at.strftime('%H:%M:%S')} (–ú–°–ö)")
    
    json_path = save_data_to_json(
        vin_number, zone_data, main_screenshot_relative, main_svg_relative, 
        zones_table, "", data_dir, claim_number, options_result, vin_status,
        started_at=started_at, completed_at=completed_at
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ JSON —Ñ–∞–π–ª –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
    if not json_path:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON —Ñ–∞–π–ª")
        return {"error": "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"}
    
    logger.info(f"‚úÖ JSON —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {json_path}")
    
    return {
        "success": "–ó–∞–¥–∞—á–∞ –æ—Ç–∫—Ä—ã—Ç–∞", 
        "main_screenshot_path": main_screenshot_relative, 
        "main_svg_path": main_svg_relative, 
        "zones_table": zones_table, 
        "zone_data": zone_data, 
        "options_data": options_result, 
        "vin_value": vin_number, 
        "claim_number": claim_number,
        "started_at": started_at,
        "completed_at": completed_at
    }

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø–∞—Ä—Å–µ—Ä 
async def login_audatex(username: str, password: str, claim_number: str, vin_number: str, svg_collection: bool = True, started_at=None):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—Ö–æ–¥ –≤ Audatex –∏ –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞.
    
    Args:
        username: str - –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        password: str - –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        claim_number: str - –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
        vin_number: str - VIN –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        svg_collection: bool - —Å–æ–±–∏—Ä–∞—Ç—å SVG (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
        started_at: datetime|str|None - –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        dict - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
    """
    driver = None
    try:
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ –≤ Audatex")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
        driver = init_browser()
        if not driver:
            return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä"}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º cookies
        if not load_cookies(driver, BASE_URL, COOKIES_FILE):
            logger.warning("‚ö†Ô∏è Cookies –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ –∑–∞–Ω–æ–≤–æ")
            if not perform_login(driver, username, password, COOKIES_FILE):
                return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É"}
        else:
            logger.info("‚úÖ Cookies –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            if not check_if_authorized(driver):
                logger.warning("‚ö†Ô∏è Cookies —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ –∑–∞–Ω–æ–≤–æ")
                if not perform_login(driver, username, password, COOKIES_FILE):
                    return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É"}
        
        logger.info("‚úÖ –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        loop = asyncio.get_event_loop()
        try:
            result = await loop.run_in_executor(None, lambda: search_and_extract(driver, claim_number, vin_number, svg_collection, started_at))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            return {"error": f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞: {str(e)}"}
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º cookies –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if "success" in result:
            try:
                cookies = driver.get_cookies()
                with open(COOKIES_FILE, "wb") as f:
                    pickle.dump(cookies, f)
                logger.info("‚úÖ Cookies –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å cookies: {e}")
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ login_audatex: {e}")
        return {"error": f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}"}
    finally:
        if driver:
            try:
                driver.quit()
                logger.info("–ü–æ–ø—ã—Ç–∫–∞ 1: –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç –≤ finally")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±—Ä–∞—É–∑–µ—Ä–∞
def terminate_all_processes_and_restart(current_url=None):
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Chrome –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞.
    
    Args:
        current_url: str|None - URL –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        None
    """
    logger.critical("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±—Ä–∞—É–∑–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ!")
    killed_processes = []
    
    try:
        # –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥ - –º—è–≥–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        for proc in psutil.process_iter(['name', 'pid', 'cmdline']):
            try:
                proc_name = proc.info['name']
                if proc_name in ['chrome.exe', 'chromedriver.exe', 'chrome', 'chromedriver']:
                    logger.critical(f"üîÑ –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å: {proc_name} (pid={proc.info['pid']})")
                    proc.terminate()
                    killed_processes.append(proc.info['pid'])
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                continue
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º—è–≥–∫–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –º—è–≥–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        time.sleep(2)
        
        # –í—Ç–æ—Ä–æ–π –ø—Ä–æ—Ö–æ–¥ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        for proc in psutil.process_iter(['name', 'pid']):
            try:
                proc_name = proc.info['name']
                if proc_name in ['chrome.exe', 'chromedriver.exe', 'chrome', 'chromedriver']:
                    if proc.info['pid'] not in killed_processes:
                        logger.critical(f"üíÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å: {proc_name} (pid={proc.info['pid']})")
                        proc.kill()
                        killed_processes.append(proc.info['pid'])
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                continue
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ taskkill –¥–ª—è Windows
        import platform
        if platform.system() == "Windows":
            try:
                import subprocess
                subprocess.run(['taskkill', '/f', '/im', 'chrome.exe'], capture_output=True, timeout=5)
                subprocess.run(['taskkill', '/f', '/im', 'chromedriver.exe'], capture_output=True, timeout=5)
                logger.critical("‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ taskkill –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ taskkill: {e}")
        
        logger.critical(f"‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±—Ä–∞—É–∑–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(killed_processes)}")
        return f"–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±—Ä–∞—É–∑–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(killed_processes)}"
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Chrome/Chromedriver: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}"