# –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏

import logging
import time
import functools
import random
from typing import Optional, Callable, Any
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.remote.webdriver import WebDriver
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import (
    TimeoutException, 
    StaleElementReferenceException, 
    ElementNotInteractableException,
    NoSuchElementException,
    ElementClickInterceptedException
)
from .constants import (
    TIMEOUT, OPEN_TABLE_SELECTOR, OUTGOING_TABLE_SELECTOR, ROW_SELECTOR, 
    MORE_ICON_SELECTOR, IFRAME_ID, EMPTY_TABLE_TEXT_SELECTOR, EMPTY_TABLE_TEXT
)

logger = logging.getLogger(__name__)


def human_like_delay(min_seconds: float = 0.5, max_seconds: float = 2.0):
    """–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–µ–π"""
    delay = random.uniform(min_seconds, max_seconds)
    time.sleep(delay)


def human_like_click(driver: WebDriver, element, use_actions: bool = False):
    """–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –∫–ª–∏–∫ —Å —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–µ–π"""
    try:
        if use_actions:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ActionChains –¥–ª—è –±–æ–ª–µ–µ —á–µ–ª–æ–≤–µ—á–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
            actions = ActionChains(driver)
            actions.move_to_element(element)
            human_like_delay(0.1, 0.3)
            actions.click()
            actions.perform()
        else:
            # –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
            human_like_delay(0.1, 0.2)
            element.click()
        return True
    except ElementClickInterceptedException:
        # Fallback –Ω–∞ JavaScript –∫–ª–∏–∫
        driver.execute_script("arguments[0].click();", element)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ: {e}")
        return False


def add_human_behavior(driver: WebDriver):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏"""
    try:
        # –°–ª—É—á–∞–π–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–∫–Ω–∞
        try:
            window_size = driver.get_window_size()
            max_x = window_size['width'] - 100
            max_y = window_size['height'] - 100
            
            actions = ActionChains(driver)
            for _ in range(random.randint(2, 5)):
                x = random.randint(50, max(100, max_x))
                y = random.randint(50, max(100, max_y))
                actions.move_by_offset(x, y)
                human_like_delay(0.1, 0.3)
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏: {e}")
        
        # –°–ª—É—á–∞–π–Ω—ã–π —Å–∫—Ä–æ–ª–ª
        scroll_amount = random.randint(-300, 300)
        driver.execute_script(f"window.scrollBy(0, {scroll_amount});")
        human_like_delay(0.2, 0.5)
        
        logger.debug("–î–æ–±–∞–≤–ª–µ–Ω–æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ")
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è: {e}")


def add_extended_human_behavior(driver: WebDriver, total_delay: float = 60.0):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–π –æ–±—â–µ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π.
    –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è.
    
    Args:
        driver: WebDriver instance
        total_delay: –û–±—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –º–∏–Ω—É—Ç–∞)
    """
    try:
        logger.info(f"ü§ñ –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ (–æ–±—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {total_delay:.1f}—Å)")
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        actions_count = random.randint(8, 15)
        delay_per_action = total_delay / actions_count
        
        for i in range(actions_count):
            action_type = random.choice([
                'mouse_movement',
                'scroll',
                'pause',
                'window_focus',
                'element_hover'
            ])
            
            if action_type == 'mouse_movement':
                # –°–ª—É—á–∞–π–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–∫–Ω–∞
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
                    window_size = driver.get_window_size()
                    max_x = window_size['width'] - 100  # –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞–µ–≤
                    max_y = window_size['height'] - 100
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–∫–Ω–∞
                    x = random.randint(50, max(100, max_x))
                    y = random.randint(50, max(100, max_y))
                    
                    actions = ActionChains(driver)
                    actions.move_by_offset(x, y)
                    actions.perform()
                    time.sleep(delay_per_action * 0.3)
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏: {e}")
                    time.sleep(delay_per_action * 0.5)
                
            elif action_type == 'scroll':
                # –°–ª—É—á–∞–π–Ω—ã–π —Å–∫—Ä–æ–ª–ª
                scroll_amount = random.randint(-500, 500)
                driver.execute_script(f"window.scrollBy(0, {scroll_amount});")
                time.sleep(delay_per_action * 0.4)
                
            elif action_type == 'pause':
                # –ü—Ä–æ—Å—Ç–∞—è –ø–∞—É–∑–∞
                time.sleep(delay_per_action * 0.8)
                
            elif action_type == 'window_focus':
                # –§–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ
                driver.execute_script("window.focus();")
                time.sleep(delay_per_action * 0.2)
                
            elif action_type == 'element_hover':
                # –ù–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                try:
                    elements = driver.find_elements(By.CSS_SELECTOR, "div, span, a, button")
                    if elements:
                        random_element = random.choice(elements)
                        actions = ActionChains(driver)
                        actions.move_to_element(random_element)
                        actions.perform()
                        time.sleep(delay_per_action * 0.3)
                except:
                    time.sleep(delay_per_action * 0.5)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            time.sleep(random.uniform(0.1, 0.3))
            
            if i % 5 == 0:
                logger.debug(f"ü§ñ –í—ã–ø–æ–ª–Ω–µ–Ω–æ {i+1}/{actions_count} —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π")
        
        logger.info("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è: {e}")


def check_for_bot_detection(driver: WebDriver) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ –±–æ—Ç–∞"""
    try:
        page_source = driver.page_source.lower()
        bot_indicators = [
            "gethandleverifier",
            "white screen",
            "bot detected",
            "automation detected",
            "captcha",
            "cloudflare"
        ]
        
        for indicator in bot_indicators:
            if indicator in page_source:
                logger.warning(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–µ—Ç–µ–∫—Ü–∏–∏ –±–æ—Ç–∞: {indicator}")
                return True
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ—Ç–µ–∫—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        return False


def handle_bot_detection(driver: WebDriver):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏—é –±–æ—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º"""
    logger.warning("üö® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –±–æ—Ç–∞...")
    
    # –î–ª–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞
    human_like_delay(5.0, 10.0)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    add_extended_human_behavior(driver, total_delay=60.0)
    
    # –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
    try:
        driver.refresh()
        human_like_delay(3.0, 5.0)
        add_human_behavior(driver)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
def retry_on_failure(max_attempts: int = 2, delay: float = 0.5):
    """
    –ë—ã—Å—Ç—Ä—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.
    
    Args:
        max_attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2)
        delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.5 —Å–µ–∫)
    """
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        def wrapper(*args, **kwargs) -> Any:
            last_exception = None
            
            for attempt in range(1, max_attempts + 1):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
                    if len(args) > 0 and hasattr(args[0], 'page_source'):
                        driver = args[0]
                        if check_for_bot_detection(driver):
                            handle_bot_detection(driver)
                    
                    result = func(*args, **kwargs)
                    if attempt > 1:
                        logger.info(f"–§—É–Ω–∫—Ü–∏—è {func.__name__} —É—Å–ø–µ—à–Ω–∞ —Å –ø–æ–ø—ã—Ç–∫–∏ {attempt}")
                    return result
                except (StaleElementReferenceException, ElementNotInteractableException, 
                        ElementClickInterceptedException, NoSuchElementException, TimeoutException) as e:
                    last_exception = e
                    if attempt < max_attempts:
                        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt} –Ω–µ—É–¥–∞—á–Ω–∞, –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ {delay}—Å: {str(e)}")
                        time.sleep(delay)
                    else:
                        logger.error(f"–í—Å–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__} –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
                        
            raise last_exception
        return wrapper
    return decorator


@retry_on_failure(max_attempts=2, delay=0.5)
def wait_for_table(driver: WebDriver, selector: Optional[str] = None) -> bool:
    """
    –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å —è–≤–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏–µ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
    """
    # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–∂–∏–¥–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü—ã
    add_human_behavior(driver)
    
    selectors_to_check = [selector] if selector else [OPEN_TABLE_SELECTOR, OUTGOING_TABLE_SELECTOR]
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å–∞–π—Ç–∞
    timeout = 60  # 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    
    for sel in selectors_to_check:
        try:
            logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {sel}")
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
            table_element = WebDriverWait(driver, timeout, poll_frequency=0.5).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, sel))
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∂–¥–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞–ª –≤–∏–¥–∏–º—ã–º –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º
            WebDriverWait(driver, 10, poll_frequency=0.5).until(
                EC.visibility_of(table_element)
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –ø—É—Å—Ç–∞—è (–µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ—Ç–µ)
            try:
                # –ñ–¥–µ–º –ª–∏–±–æ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã, –ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—É—Å—Ç–æ—Ç–µ
                WebDriverWait(driver, 10, poll_frequency=0.5).until(
                    lambda d: (
                        len(d.find_elements(By.CSS_SELECTOR, ROW_SELECTOR)) > 0 or
                        len(d.find_elements(By.CSS_SELECTOR, EMPTY_TABLE_TEXT_SELECTOR)) > 0
                    )
                )
                logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ '{sel}' –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞")
                return True
            except TimeoutException:
                logger.warning(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ '{sel}' –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–±–ª–∏—Ü–∞ –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–∞—è
                return True
                
        except TimeoutException:
            logger.warning(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º '{sel}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")
            continue

    logger.error("‚ùå –ù–∏ –æ–¥–Ω–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å")
    return False


@retry_on_failure(max_attempts=2, delay=0.5)
def click_cansel_button(driver: WebDriver) -> bool:
    """
    –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã —Å —è–≤–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞.
    """
    selector = "#confirm > div > div > div.modal-footer > button"
    
    try:
        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
        button = WebDriverWait(driver, 10, poll_frequency=0.5).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        add_human_behavior(driver)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –∫–ª–∏–∫
        success = human_like_click(driver, button, use_actions=True)
        
        if success:
            logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∂–∞—Ç–∞")
            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            return False
        
    except TimeoutException:
        logger.info("‚ÑπÔ∏è –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
        return True  # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        return False


@retry_on_failure(max_attempts=2, delay=0.5)
def click_request_type_button(driver: WebDriver, req_type: str) -> bool:
    """
    –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ç–∏–ø–∞–º–∏ –∑–∞—è–≤–æ–∫ —Å —è–≤–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏–µ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
    """
    try:
        if req_type == "open":
            selector = "#view-link-worklistgrid_custom_open"
        elif req_type == "outgoing":
            selector = "#view-link-worklistgrid_custom_sent"
        else:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞—è–≤–∫–∏: {req_type}")
            return False
        
        logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏: {req_type}")
        
        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏
        more_views_link = WebDriverWait(driver, 15, poll_frequency=0.5).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        add_human_behavior(driver)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –∫–ª–∏–∫
        success = human_like_click(driver, more_views_link, use_actions=True)
        
        if success:
            logger.info(f"‚úÖ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ {req_type}")
            return True
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ {req_type}")
            return False
        
    except TimeoutException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ {req_type}: {str(e)}")
        return False


@retry_on_failure(max_attempts=2, delay=0.5)
def search_in_table(driver: WebDriver, search_value: str, search_type: str) -> bool:
    """
    –ü–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏.
    """
    try:
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ {search_type}: {search_value}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º
        add_extended_human_behavior(driver, total_delay=60.0)
        
        search_input = WebDriverWait(driver, 8).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, "#root\\.quickfilter\\.searchbox"))
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        add_human_behavior(driver)
        
        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        search_input.clear()
        human_like_delay(0.3, 0.7)
        
        # –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º–∏ –ø–∞—É–∑–∞–º–∏
        for char in search_value:
            search_input.send_keys(char)
            human_like_delay(0.05, 0.15)
        
        logger.info(f"–í–≤–µ–¥—ë–Ω {search_type}: {search_value}")
        human_like_delay(0.8, 1.2)  # –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        
        logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ {search_type}")
        WebDriverWait(driver, 15, poll_frequency=0.5).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ROW_SELECTOR))
        )
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å—Ç—Ä–æ–∫–∏ –ø–æ {search_type}")
        return True
        
    except TimeoutException:
        logger.info(f"–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –ø–æ {search_type}")
        return False


@retry_on_failure(max_attempts=2, delay=0.5)
def click_more_icon(driver: WebDriver) -> bool:
    """
    –ù–∞–∂–∞—Ç–∏–µ –∏–∫–æ–Ω–∫–∏ "–ï—â–µ" —Å —è–≤–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏–µ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
    """
    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–∞–±–ª–∏—Ü
    selectors = [
        MORE_ICON_SELECTOR,  # –ò—Å—Ö–æ–¥—è—â–∏–µ –¥–µ–ª–∞
        MORE_ICON_SELECTOR.replace("worklistgrid_custom_sent", "worklistgrid_custom_open")  # –û—Ç–∫—Ä—ã—Ç—ã–µ –¥–µ–ª–∞
    ]
    
    for i, selector in enumerate(selectors):
        try:
            logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ '–µ—â—ë' —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∫–æ–Ω–∫–∏
            more_icon = WebDriverWait(driver, 15, poll_frequency=0.5).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
            add_human_behavior(driver)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –∫–ª–∏–∫
            success = human_like_click(driver, more_icon, use_actions=True)
            
            if success:
                table_type = "–∏—Å—Ö–æ–¥—è—â–∏—Ö" if i == 0 else "–æ—Ç–∫—Ä—ã—Ç—ã—Ö"
                logger.info(f"‚úÖ –ö–ª–∏–∫ –ø–æ –∏–∫–æ–Ω–∫–µ '–µ—â—ë' –≤ —Ç–∞–±–ª–∏—Ü–µ {table_type} –¥–µ–ª")
                return True
        except TimeoutException:
            logger.warning(f"‚ö†Ô∏è –ò–∫–æ–Ω–∫–∞ '–µ—â—ë' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
            continue
    
    logger.error("‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∏–∫–æ–Ω–∫–µ '–µ—â—ë': –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ")
    return False


@retry_on_failure(max_attempts=2, delay=0.5)
def open_task(driver: WebDriver) -> bool:
    """
    –û—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞–¥–∞—á–∏ —Å —è–≤–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞.
    """
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –∑–∞–¥–∞—á–∏
        add_human_behavior(driver)
        
        logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ 'openTask'")
        
        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏
        open_task = WebDriverWait(driver, 15, poll_frequency=0.5).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, "#openTask"))
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –∫–ª–∏–∫
        success = human_like_click(driver, open_task, use_actions=True)
        
        if success:
            logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ 'openTask' –Ω–∞–∂–∞—Ç–∞")
            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É 'openTask'")
            return False
            
    except TimeoutException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ openTask: {str(e)}")
        return False


@retry_on_failure(max_attempts=3, delay=1.0)
def switch_to_frame_and_confirm(driver: WebDriver) -> bool:
    """
    –ù–∞–¥—ë–∂–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ iframe —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏.
    """
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –Ω–∞ —Ñ—Ä–µ–π–º
        add_human_behavior(driver)
        
        # –ñ–¥—ë–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        WebDriverWait(driver, 30, poll_frequency=0.5).until(
            lambda d: d.execute_script("return document.readyState === 'complete'")
        )
        logger.info("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        time.sleep(3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ iframe –≤ DOM
        iframe_exists = driver.execute_script(f"""
            return document.getElementById('{IFRAME_ID}') !== null;
        """)
        
        if not iframe_exists:
            logger.error(f"Iframe {IFRAME_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM")
            # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö iframe –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            iframes = driver.execute_script("""
                var iframes = document.getElementsByTagName('iframe');
                var result = [];
                for (var i = 0; i < iframes.length; i++) {
                    result.push({
                        id: iframes[i].id || 'no-id',
                        src: iframes[i].src || 'no-src',
                        name: iframes[i].name || 'no-name'
                    });
                }
                return result;
            """)
            logger.info(f"–ù–∞–π–¥–µ–Ω—ã iframe –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {iframes}")
            return False
        
        logger.info(f"Iframe {IFRAME_ID} –Ω–∞–π–¥–µ–Ω –≤ DOM, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è...")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ iframe —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
        logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ iframe: {IFRAME_ID}")
        WebDriverWait(driver, 30, poll_frequency=0.5).until(
            EC.frame_to_be_available_and_switch_to_it((By.ID, IFRAME_ID))
        )
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —Ñ—Ä–µ–π–º: {IFRAME_ID}")
        
        # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ iframe
        time.sleep(2)
        
        try:
            logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ iframe")
            confirm_button = WebDriverWait(driver, 15, poll_frequency=0.5).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, ".btn.btn-confirm"))
            )
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –∫–ª–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            success = human_like_click(driver, confirm_button, use_actions=True)
            
            if success:
                logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Ñ—Ä–µ–π–º–µ –Ω–∞–∂–∞—Ç–∞")
                time.sleep(0.5)
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Ñ—Ä–µ–π–º–µ")
        except TimeoutException:
            logger.info("‚ÑπÔ∏è –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Ñ—Ä–µ–π–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
        
        return True
        
    except TimeoutException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Ñ—Ä–µ–π–º {IFRAME_ID}: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è")
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        try:
            current_url = driver.current_url
            page_title = driver.title
            logger.error(f"–¢–µ–∫—É—â–∏–π URL: {current_url}")
            logger.error(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_title}")
        except Exception:
            pass
        return False
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ —Ñ—Ä–µ–π–º {IFRAME_ID}: {str(e)}")
        return False


@retry_on_failure(max_attempts=2, delay=0.5)
def click_breadcrumb(driver: WebDriver) -> bool:
    """
    –ù–∞–∂–∞—Ç–∏–µ breadcrumb —Å —è–≤–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞.
    """
    try:
        logger.info("–û–∂–∏–¥–∞–Ω–∏–µ breadcrumb —ç–ª–µ–º–µ–Ω—Ç–∞")
        breadcrumb = WebDriverWait(driver, 15, poll_frequency=0.5).until(
            EC.element_to_be_clickable((By.ID, "breadcrumb-navigation-title"))
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        add_human_behavior(driver)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –∫–ª–∏–∫
        success = human_like_click(driver, breadcrumb, use_actions=True)
        
        if success:
            logger.info("‚úÖ –ö–ª–∏–∫ –ø–æ breadcrumb –≤—ã–ø–æ–ª–Ω–µ–Ω")
            time.sleep(0.3)
            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å breadcrumb")
            return False
    except TimeoutException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ breadcrumb: {str(e)}")
        return False


def is_table_empty(driver: WebDriver, selector: str = EMPTY_TABLE_TEXT_SELECTOR) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ—Ç—ã —Ç–∞–±–ª–∏—Ü—ã —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º.
    """
    try:
        element = driver.find_element(By.CSS_SELECTOR, selector)
        if EMPTY_TABLE_TEXT in element.text:
            logger.info("–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞")
            return True
    except Exception:
        pass
    return False


@retry_on_failure(max_attempts=2, delay=0.5)
def find_claim_data(driver: WebDriver, claim_number: Optional[str] = None, 
                    vin_number: Optional[str] = None) -> dict:
    """
    –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏.
    """
    logger.info("ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º –∑–∞—è–≤–∫–∏
    add_extended_human_behavior(driver, total_delay=60.0)
    
    section_selector_map = {"open": OPEN_TABLE_SELECTOR, "outgoing": OUTGOING_TABLE_SELECTOR}
    
    for section in ["open", "outgoing"]:
        if not click_request_type_button(driver, section):
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª {section}")
            return {"error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª {section}"}
        if not wait_for_table(driver, section_selector_map.get(section)):
            return {"error": f"–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ {section}"}
        if is_table_empty(driver):
            logger.info(f"–†–∞–∑–¥–µ–ª {section} –ø—É—Å—Ç")
            continue
        if claim_number and search_in_table(driver, claim_number, "–Ω–æ–º–µ—Ä—É –¥–µ–ª–∞"):
            return {"success": True}
        elif vin_number and search_in_table(driver, vin_number, "VIN"):
            return {"success": True}
        logger.info(f"–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ {section}")
    return {"error": "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ"} 


@retry_on_failure(max_attempts=3, delay=1.0)
def get_vin_status(driver: WebDriver) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å VIN –∫–Ω–æ–ø–æ–∫ —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º.
    
    Returns:
        str: "VIN", "VIN –ª–∞–π—Ç" –∏–ª–∏ "–ù–µ—Ç"
    """
    logger.info("üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å VIN –∫–Ω–æ–ø–æ–∫...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞
    add_human_behavior(driver)
    
    try:
        vin_query_id = "root.task.basicClaimData.vehicle.vehicleIdentification.VINQuery-VINQueryButton"
        vin_lite_id = "root.task.basicClaimData.vehicle.vehicleIdentification.VINQuery-vinDecoderButton"
        
        # –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ —Å —è–≤–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏–µ–º
        wait = WebDriverWait(driver, 15, poll_frequency=0.5)
        
        vin_query_enabled = False
        vin_lite_enabled = False
        
        try:
            logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ VIN –ó–∞–ø—Ä–æ—Å")
            vin_query_button = wait.until(EC.presence_of_element_located((By.ID, vin_query_id)))
            vin_query_enabled = vin_query_button.is_enabled()
            logger.info(f"üìã VIN –ó–∞–ø—Ä–æ—Å: {'–∞–∫—Ç–∏–≤–Ω–∞' if vin_query_enabled else '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'}")
        except TimeoutException:
            logger.warning("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ VIN –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        try:
            vin_lite_button = driver.find_element(By.ID, vin_lite_id)
            vin_lite_enabled = vin_lite_button.is_enabled()
            logger.info(f"üìã VIN –õ–∞–π—Ç: {'–∞–∫—Ç–∏–≤–Ω–∞' if vin_lite_enabled else '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'}")
        except NoSuchElementException:
            logger.warning("‚ùå –ö–Ω–æ–ø–∫–∞ VIN –õ–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if vin_query_enabled and not vin_lite_enabled:
            result = "VIN"
            logger.info("‚úÖ –°—Ç–∞—Ç—É—Å: VIN –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–µ–Ω")
        elif vin_lite_enabled and not vin_query_enabled:
            result = "VIN –ª–∞–π—Ç"
            logger.info("‚úÖ –°—Ç–∞—Ç—É—Å: VIN –õ–∞–π—Ç –∞–∫—Ç–∏–≤–µ–Ω")
        elif vin_query_enabled and vin_lite_enabled:
            # –ï—Å–ª–∏ –æ–±–µ –∞–∫—Ç–∏–≤–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ –∫–∞–∫–∞—è –≤—ã–±—Ä–∞–Ω–∞ (–æ—Ä–∞–Ω–∂–µ–≤–∞—è)
            result = "VIN"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é VIN –ó–∞–ø—Ä–æ—Å
            logger.info("‚úÖ –°—Ç–∞—Ç—É—Å: –û–±–µ –∞–∫—Ç–∏–≤–Ω—ã, –≤—ã–±—Ä–∞–Ω VIN –ó–∞–ø—Ä–æ—Å")
        else:
            result = "–ù–µ—Ç"
            logger.info("‚ùå –°—Ç–∞—Ç—É—Å: –ù–∏ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ VIN —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return "–ù–µ—Ç" 