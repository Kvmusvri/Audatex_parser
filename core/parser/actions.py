# –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏

import logging
import time
import functools
import random
from typing import Optional, Callable, Any
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.remote.webdriver import WebDriver
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import (
    TimeoutException, 
    StaleElementReferenceException, 
    ElementNotInteractableException,
    NoSuchElementException,
    ElementClickInterceptedException
)
from .constants import (
    TIMEOUT, OPEN_TABLE_SELECTOR, OUTGOING_TABLE_SELECTOR, ROW_SELECTOR, 
    MORE_ICON_SELECTOR, IFRAME_ID, EMPTY_TABLE_TEXT_SELECTOR, EMPTY_TABLE_TEXT
)

logger = logging.getLogger(__name__)


def human_like_delay(min_seconds: float = 0.5, max_seconds: float = 2.0):
    """–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–µ–π"""
    delay = random.uniform(min_seconds, max_seconds)
    time.sleep(delay)


def human_like_click(driver: WebDriver, element, use_actions: bool = False):
    """–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –∫–ª–∏–∫ —Å —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–µ–π"""
    try:
        if use_actions:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ActionChains –¥–ª—è –±–æ–ª–µ–µ —á–µ–ª–æ–≤–µ—á–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
            actions = ActionChains(driver)
            actions.move_to_element(element)
            human_like_delay(0.1, 0.3)
            actions.click()
            actions.perform()
        else:
            # –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
            human_like_delay(0.1, 0.2)
            element.click()
        return True
    except ElementClickInterceptedException:
        # Fallback –Ω–∞ JavaScript –∫–ª–∏–∫
        driver.execute_script("arguments[0].click();", element)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ: {e}")
        return False


def add_human_behavior(driver: WebDriver):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏"""
    try:
        # –°–ª—É—á–∞–π–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
        actions = ActionChains(driver)
        for _ in range(random.randint(2, 5)):
            x = random.randint(100, 800)
            y = random.randint(100, 600)
            actions.move_by_offset(x, y)
            human_like_delay(0.1, 0.3)
        
        # –°–ª—É—á–∞–π–Ω—ã–π —Å–∫—Ä–æ–ª–ª
        scroll_amount = random.randint(-300, 300)
        driver.execute_script(f"window.scrollBy(0, {scroll_amount});")
        human_like_delay(0.2, 0.5)
        
        logger.debug("–î–æ–±–∞–≤–ª–µ–Ω–æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è: {e}")


def check_for_bot_detection(driver: WebDriver) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ –±–æ—Ç–∞"""
    try:
        page_source = driver.page_source.lower()
        bot_indicators = [
            "gethandleverifier",
            "white screen",
            "bot detected",
            "automation detected",
            "captcha",
            "cloudflare"
        ]
        
        for indicator in bot_indicators:
            if indicator in page_source:
                logger.warning(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–µ—Ç–µ–∫—Ü–∏–∏ –±–æ—Ç–∞: {indicator}")
                return True
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ—Ç–µ–∫—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        return False


def handle_bot_detection(driver: WebDriver):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏—é –±–æ—Ç–∞"""
    logger.warning("üö® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –±–æ—Ç–∞...")
    
    # –î–ª–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞
    human_like_delay(5.0, 10.0)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    add_human_behavior(driver)
    
    # –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
    try:
        driver.refresh()
        human_like_delay(3.0, 5.0)
        add_human_behavior(driver)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
def retry_on_failure(max_attempts: int = 2, delay: float = 0.5):
    """
    –ë—ã—Å—Ç—Ä—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.
    
    Args:
        max_attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2)
        delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.5 —Å–µ–∫)
    """
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        def wrapper(*args, **kwargs) -> Any:
            last_exception = None
            
            for attempt in range(1, max_attempts + 1):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
                    if len(args) > 0 and hasattr(args[0], 'page_source'):
                        driver = args[0]
                        if check_for_bot_detection(driver):
                            handle_bot_detection(driver)
                    
                    result = func(*args, **kwargs)
                    if attempt > 1:
                        logger.info(f"–§—É–Ω–∫—Ü–∏—è {func.__name__} —É—Å–ø–µ—à–Ω–∞ —Å –ø–æ–ø—ã—Ç–∫–∏ {attempt}")
                    return result
                except (StaleElementReferenceException, ElementNotInteractableException, 
                        ElementClickInterceptedException, NoSuchElementException, TimeoutException) as e:
                    last_exception = e
                    if attempt < max_attempts:
                        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt} –Ω–µ—É–¥–∞—á–Ω–∞, –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ {delay}—Å: {str(e)}")
                        time.sleep(delay)
                    else:
                        logger.error(f"–í—Å–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__} –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
                        
            raise last_exception
        return wrapper
    return decorator


@retry_on_failure(max_attempts=2, delay=0.5)
def wait_for_table(driver: WebDriver, selector: Optional[str] = None) -> bool:
    """
    –ë—ã—Å—Ç—Ä–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã.
    """
    selectors_to_check = [selector] if selector else [OPEN_TABLE_SELECTOR, OUTGOING_TABLE_SELECTOR]
    timeout = 8  # –£–º–µ–Ω—å—à–µ–Ω —Å TIMEOUT

    for sel in selectors_to_check:
        try:
            WebDriverWait(driver, timeout, poll_frequency=0.3).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, sel))
            )
            logger.info(f"–¢–∞–±–ª–∏—Ü–∞ '{sel}' –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return True
        except TimeoutException:
            continue

    logger.error("–¢–∞–±–ª–∏—Ü—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å")
    return False


@retry_on_failure(max_attempts=2, delay=0.5)
def click_cansel_button(driver: WebDriver) -> bool:
    """
    –ë—ã—Å—Ç—Ä–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã.
    """
    selector = "#confirm > div > div > div.modal-footer > button"
    
    try:
        button = WebDriverWait(driver, 5, poll_frequency=0.3).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        add_human_behavior(driver)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –∫–ª–∏–∫
        success = human_like_click(driver, button, use_actions=True)
        
        if success:
            logger.info("–ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∂–∞—Ç–∞")
            return True
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            return False
        return True
        
    except TimeoutException:
        logger.info("–ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return True  # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        return False


@retry_on_failure(max_attempts=2, delay=0.5)
def click_request_type_button(driver: WebDriver, req_type: str) -> bool:
    """
    –ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ç–∏–ø–∞–º–∏ –∑–∞—è–≤–æ–∫.
    """
    try:
        if req_type == "open":
            more_views_link = WebDriverWait(driver, 5).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "#view-link-worklistgrid_custom_open"))
            )
        elif req_type == "outgoing":
            more_views_link = WebDriverWait(driver, 5).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "#view-link-worklistgrid_custom_sent"))
            )
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞—è–≤–∫–∏: {req_type}")
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        add_human_behavior(driver)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –∫–ª–∏–∫
        success = human_like_click(driver, more_views_link, use_actions=True)
        
        if success:
            logger.info(f"–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ {req_type}")
            return True
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ {req_type}")
            return False
        
    except TimeoutException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ {req_type}: {str(e)}")
        return False


@retry_on_failure(max_attempts=2, delay=0.5)
def search_in_table(driver: WebDriver, search_value: str, search_type: str) -> bool:
    """
    –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ.
    """
    try:
        search_input = WebDriverWait(driver, 8).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, "#root\\.quickfilter\\.searchbox"))
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        add_human_behavior(driver)
        
        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        search_input.clear()
        human_like_delay(0.3, 0.7)
        
        # –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º–∏ –ø–∞—É–∑–∞–º–∏
        for char in search_value:
            search_input.send_keys(char)
            human_like_delay(0.05, 0.15)
        
        logger.info(f"–í–≤–µ–¥—ë–Ω {search_type}: {search_value}")
        human_like_delay(0.8, 1.2)  # –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ROW_SELECTOR))
        )
        logger.info(f"–ù–∞–π–¥–µ–Ω—ã —Å—Ç—Ä–æ–∫–∏ –ø–æ {search_type}")
        return True
        
    except TimeoutException:
        logger.info(f"–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –ø–æ {search_type}")
        return False


@retry_on_failure(max_attempts=2, delay=0.5)
def click_more_icon(driver: WebDriver) -> bool:
    """
    –ë—ã—Å—Ç—Ä–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∏–∫–æ–Ω–∫–∏ "–ï—â–µ". –ü—Ä–æ–±—É–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö –∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–µ–ª.
    """
    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–∞–±–ª–∏—Ü
    selectors = [
        MORE_ICON_SELECTOR,  # –ò—Å—Ö–æ–¥—è—â–∏–µ –¥–µ–ª–∞
        MORE_ICON_SELECTOR.replace("worklistgrid_custom_sent", "worklistgrid_custom_open")  # –û—Ç–∫—Ä—ã—Ç—ã–µ –¥–µ–ª–∞
    ]
    
    for i, selector in enumerate(selectors):
        try:
            more_icon = WebDriverWait(driver, 4).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
            )
            more_icon.click()
            table_type = "–∏—Å—Ö–æ–¥—è—â–∏—Ö" if i == 0 else "–æ—Ç–∫—Ä—ã—Ç—ã—Ö"
            logger.info(f"–ö–ª–∏–∫ –ø–æ –∏–∫–æ–Ω–∫–µ '–µ—â—ë' –≤ —Ç–∞–±–ª–∏—Ü–µ {table_type} –¥–µ–ª")
            return True
        except TimeoutException:
            continue
    
    logger.error("–û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∏–∫–æ–Ω–∫–µ '–µ—â—ë': –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ")
    return False


@retry_on_failure(max_attempts=2, delay=0.5)
def open_task(driver: WebDriver) -> bool:
    """
    –ë—ã—Å—Ç—Ä–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞–¥–∞—á–∏.
    """
    try:
        open_task = WebDriverWait(driver, 8).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, "#openTask"))
        )
        open_task.click()
        logger.info("–ö–Ω–æ–ø–∫–∞ 'openTask' –Ω–∞–∂–∞—Ç–∞")
        return True
    except TimeoutException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ openTask: {str(e)}")
        return False


@retry_on_failure(max_attempts=3, delay=1.0)
def switch_to_frame_and_confirm(driver: WebDriver) -> bool:
    """
    –ù–∞–¥—ë–∂–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ iframe —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏.
    """
    try:
        # –ñ–¥—ë–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        WebDriverWait(driver, 15).until(
            lambda d: d.execute_script("return document.readyState === 'complete'")
        )
        logger.info("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        time.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ iframe –≤ DOM
        iframe_exists = driver.execute_script(f"""
            return document.getElementById('{IFRAME_ID}') !== null;
        """)
        
        if not iframe_exists:
            logger.error(f"Iframe {IFRAME_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM")
            # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö iframe –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            iframes = driver.execute_script("""
                var iframes = document.getElementsByTagName('iframe');
                var result = [];
                for (var i = 0; i < iframes.length; i++) {
                    result.push({
                        id: iframes[i].id || 'no-id',
                        src: iframes[i].src || 'no-src',
                        name: iframes[i].name || 'no-name'
                    });
                }
                return result;
            """)
            logger.info(f"–ù–∞–π–¥–µ–Ω—ã iframe –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {iframes}")
            return False
        
        logger.info(f"Iframe {IFRAME_ID} –Ω–∞–π–¥–µ–Ω –≤ DOM, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è...")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ iframe —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
        WebDriverWait(driver, 15).until(
            EC.frame_to_be_available_and_switch_to_it((By.ID, IFRAME_ID))
        )
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —Ñ—Ä–µ–π–º: {IFRAME_ID}")
        
        # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ iframe
        time.sleep(1)
        
        try:
            confirm_button = WebDriverWait(driver, 8).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, ".btn.btn-confirm"))
            )
            confirm_button.click()
            logger.info("–ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Ñ—Ä–µ–π–º–µ –Ω–∞–∂–∞—Ç–∞")
            time.sleep(0.5)
        except TimeoutException:
            logger.info("–ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Ñ—Ä–µ–π–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
        
        return True
        
    except TimeoutException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Ñ—Ä–µ–π–º {IFRAME_ID}: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è")
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        try:
            current_url = driver.current_url
            page_title = driver.title
            logger.error(f"–¢–µ–∫—É—â–∏–π URL: {current_url}")
            logger.error(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_title}")
        except Exception:
            pass
        return False
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ —Ñ—Ä–µ–π–º {IFRAME_ID}: {str(e)}")
        return False


@retry_on_failure(max_attempts=2, delay=0.5)
def click_breadcrumb(driver: WebDriver) -> bool:
    """
    –ë—ã—Å—Ç—Ä–æ–µ –Ω–∞–∂–∞—Ç–∏–µ breadcrumb.
    """
    try:
        breadcrumb = WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.ID, "breadcrumb-navigation-title"))
        )
        breadcrumb.click()
        logger.info("–ö–ª–∏–∫ –ø–æ breadcrumb")
        time.sleep(0.3)  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 0.5
        return True
    except TimeoutException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ breadcrumb: {str(e)}")
        return False


def is_table_empty(driver: WebDriver, selector: str = EMPTY_TABLE_TEXT_SELECTOR) -> bool:
    """
    –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç–æ—Ç—ã —Ç–∞–±–ª–∏—Ü—ã.
    """
    try:
        element = driver.find_element(By.CSS_SELECTOR, selector)
        if EMPTY_TABLE_TEXT in element.text:
            logger.info("–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞")
            return True
    except Exception:
        pass
    return False


@retry_on_failure(max_attempts=2, delay=0.5)
def find_claim_data(driver: WebDriver, claim_number: Optional[str] = None, 
                    vin_number: Optional[str] = None) -> dict:
    """
    –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏.
    """
    section_selector_map = {"open": OPEN_TABLE_SELECTOR, "outgoing": OUTGOING_TABLE_SELECTOR}
    
    for section in ["open", "outgoing"]:
        if not click_request_type_button(driver, section):
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª {section}")
            return {"error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª {section}"}
        if not wait_for_table(driver, section_selector_map.get(section)):
            return {"error": f"–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ {section}"}
        if is_table_empty(driver):
            logger.info(f"–†–∞–∑–¥–µ–ª {section} –ø—É—Å—Ç")
            continue
        if claim_number and search_in_table(driver, claim_number, "–Ω–æ–º–µ—Ä—É –¥–µ–ª–∞"):
            return {"success": True}
        elif vin_number and search_in_table(driver, vin_number, "VIN"):
            return {"success": True}
        logger.info(f"–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ {section}")
    return {"error": "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ"} 


@retry_on_failure(max_attempts=3, delay=1.0)
def get_vin_status(driver: WebDriver) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å VIN –∫–Ω–æ–ø–æ–∫.
    
    Returns:
        str: "VIN", "VIN –ª–∞–π—Ç" –∏–ª–∏ "–ù–µ—Ç"
    """
    logger.info("üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å VIN –∫–Ω–æ–ø–æ–∫...")
    
    try:
        vin_query_id = "root.task.basicClaimData.vehicle.vehicleIdentification.VINQuery-VINQueryButton"
        vin_lite_id = "root.task.basicClaimData.vehicle.vehicleIdentification.VINQuery-vinDecoderButton"
        
        # –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ —Å –Ω–µ–±–æ–ª—å—à–∏–º –æ–∂–∏–¥–∞–Ω–∏–µ–º
        wait = WebDriverWait(driver, 5)
        
        vin_query_enabled = False
        vin_lite_enabled = False
        
        try:
            vin_query_button = wait.until(EC.presence_of_element_located((By.ID, vin_query_id)))
            vin_query_enabled = vin_query_button.is_enabled()
            logger.info(f"üìã VIN –ó–∞–ø—Ä–æ—Å: {'–∞–∫—Ç–∏–≤–Ω–∞' if vin_query_enabled else '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'}")
        except TimeoutException:
            logger.warning("‚ùå –ö–Ω–æ–ø–∫–∞ VIN –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        try:
            vin_lite_button = driver.find_element(By.ID, vin_lite_id)
            vin_lite_enabled = vin_lite_button.is_enabled()
            logger.info(f"üìã VIN –õ–∞–π—Ç: {'–∞–∫—Ç–∏–≤–Ω–∞' if vin_lite_enabled else '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'}")
        except NoSuchElementException:
            logger.warning("‚ùå –ö–Ω–æ–ø–∫–∞ VIN –õ–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if vin_query_enabled and not vin_lite_enabled:
            result = "VIN"
            logger.info("‚úÖ –°—Ç–∞—Ç—É—Å: VIN –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–µ–Ω")
        elif vin_lite_enabled and not vin_query_enabled:
            result = "VIN –ª–∞–π—Ç"
            logger.info("‚úÖ –°—Ç–∞—Ç—É—Å: VIN –õ–∞–π—Ç –∞–∫—Ç–∏–≤–µ–Ω")
        elif vin_query_enabled and vin_lite_enabled:
            # –ï—Å–ª–∏ –æ–±–µ –∞–∫—Ç–∏–≤–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ –∫–∞–∫–∞—è –≤—ã–±—Ä–∞–Ω–∞ (–æ—Ä–∞–Ω–∂–µ–≤–∞—è)
            result = "VIN"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é VIN –ó–∞–ø—Ä–æ—Å
            logger.info("‚úÖ –°—Ç–∞—Ç—É—Å: –û–±–µ –∞–∫—Ç–∏–≤–Ω—ã, –≤—ã–±—Ä–∞–Ω VIN –ó–∞–ø—Ä–æ—Å")
        else:
            result = "–ù–µ—Ç"
            logger.info("‚ùå –°—Ç–∞—Ç—É—Å: –ù–∏ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ VIN —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return "–ù–µ—Ç" 