import redis
import json
import logging
from typing import Optional, Dict, Any, List
from datetime import datetime

logger = logging.getLogger(__name__)


class RedisQueueManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—á–µ—Ä–µ–¥—å—é –∑–∞—è–≤–æ–∫ –≤ Redis"""
    
    def __init__(self, host: str = 'localhost', port: int = 6379, db: int = 0):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
        self.redis_client = redis.Redis(
            host=host,
            port=port,
            db=db,
            decode_responses=True,
            socket_connect_timeout=5,
            socket_timeout=5
        )
        self.queue_key = "parser_queue"
        self.processing_key = "parser_processing"
        self.completed_key = "parser_completed"
        
    def test_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
        try:
            self.redis_client.ping()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
            return False
    
    def add_request_to_queue(self, request_data: Dict[str, Any]) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å"""
        try:
            request_data['added_at'] = datetime.now().isoformat()
            request_data['status'] = 'pending'
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å (—Å–ø–∏—Å–æ–∫)
            self.redis_client.lpush(self.queue_key, json.dumps(request_data))
            logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: {request_data.get('claim_number', 'N/A')}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
            return False
    
    def get_next_request(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞—è–≤–∫–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            # –ë–µ—Ä–µ–º –∑–∞—è–≤–∫—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (—Å–ø—Ä–∞–≤–∞ - FIFO)
            request_json = self.redis_client.rpop(self.queue_key)
            if request_json:
                request_data = json.loads(request_json)
                request_data['status'] = 'processing'
                request_data['started_at'] = datetime.now().isoformat()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                self.redis_client.hset(
                    self.processing_key,
                    f"{request_data.get('claim_number', '')}_{request_data.get('vin_number', '')}",
                    json.dumps(request_data)
                )
                
                logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ –≤–∑—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É: {request_data.get('claim_number', 'N/A')}")
                return request_data
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {e}")
            return None
    
    def mark_request_completed(self, request_data: Dict[str, Any], success: bool = True) -> bool:
        """–û—Ç–º–µ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π"""
        try:
            request_data['status'] = 'completed' if success else 'failed'
            request_data['completed_at'] = datetime.now().isoformat()
            request_data['success'] = success
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            key = f"{request_data.get('claim_number', '')}_{request_data.get('vin_number', '')}"
            self.redis_client.hdel(self.processing_key, key)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
            self.redis_client.hset(
                self.completed_key,
                key,
                json.dumps(request_data)
            )
            
            logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {request_data.get('claim_number', 'N/A')} (—É—Å–ø–µ—Ö: {success})")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π: {e}")
            return False
    
    def get_queue_length(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –æ—á–µ—Ä–µ–¥–∏"""
        try:
            return self.redis_client.llen(self.queue_key)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã –æ—á–µ—Ä–µ–¥–∏: {e}")
            return 0
    
    def get_processing_requests(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ"""
        try:
            processing_data = self.redis_client.hgetall(self.processing_key)
            return [json.loads(data) for data in processing_data.values()]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
            return []
    
    def get_completed_requests(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫"""
        try:
            completed_data = self.redis_client.hgetall(self.completed_key)
            return [json.loads(data) for data in completed_data.values()]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {e}")
            return []
    
    def get_pending_requests(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏ (–æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (—Å–ø–∏—Å–æ–∫)
            queue_data = self.redis_client.lrange(self.queue_key, 0, -1)
            return [json.loads(data) for data in queue_data]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏: {e}")
            return []
    
    def clear_queue(self) -> bool:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π –æ—á–µ—Ä–µ–¥–∏, –≤–∫–ª—é—á–∞—è –∑–∞—è–≤–∫–∏ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ"""
        try:
            # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
            self.redis_client.delete(self.queue_key)
            # –û—á–∏—â–∞–µ–º –∑–∞—è–≤–∫–∏ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            self.redis_client.delete(self.processing_key)
            # –û—á–∏—â–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            self.redis_client.delete(self.completed_key)
            
            logger.info("‚úÖ –í—Å—è –æ—á–µ—Ä–µ–¥—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞ (–æ—á–µ—Ä–µ–¥—å, –æ–±—Ä–∞–±–æ—Ç–∫–∞, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏: {e}")
            return False
    
    def clear_queue_only(self) -> bool:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –æ—á–µ—Ä–µ–¥–∏ (–±–µ–∑ –∑–∞—è–≤–æ–∫ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö)"""
        try:
            self.redis_client.delete(self.queue_key)
            logger.info("‚úÖ –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞ (–∑–∞—è–≤–∫–∏ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏: {e}")
            return False
    
    def restore_interrupted_requests(self) -> List[Dict[str, Any]]:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ"""
        try:
            interrupted_requests = self.get_processing_requests()
            if interrupted_requests:
                logger.info(f"üîÑ –ù–∞–π–¥–µ–Ω–æ {len(interrupted_requests)} –ø—Ä–µ—Ä–≤–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ—Ä–≤–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å
                for request in interrupted_requests:
                    request['status'] = 'pending'
                    request['restored_at'] = datetime.now().isoformat()
                    self.redis_client.lpush(self.queue_key, json.dumps(request))
                
                # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                self.redis_client.delete(self.processing_key)
                
                logger.info("‚úÖ –ü—Ä–µ—Ä–≤–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥–∏")
                return interrupted_requests
            
            return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {e}")
            return []
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Redis"""
        try:
            self.redis_client.close()
            logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Redis: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
redis_manager = RedisQueueManager() 