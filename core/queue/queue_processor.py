import asyncio
import logging
from typing import List, Dict, Any, Optional
from datetime import datetime
import time

from core.queue.redis_manager import redis_manager
from core.parser.parser import login_audatex
from core.database.requests import save_parser_data_to_db, update_json_with_claim_number, save_updated_json_to_file

logger = logging.getLogger(__name__)


class QueueProcessor:
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∑–∞—è–≤–æ–∫"""
    
    def __init__(self):
        self.is_running = False
        self.current_task = None
        self.current_parser_task = None  # –¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞ –ø–∞—Ä—Å–µ—Ä–∞
        self.processed_count = 0
        self.failed_count = 0
        self.stop_requested = False  # –§–ª–∞–≥ –∑–∞–ø—Ä–æ—Å–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        
    async def start_processing(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return
        
        self.is_running = True
        self.stop_requested = False
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∑–∞—è–≤–æ–∫")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ—Ä–≤–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        interrupted_requests = redis_manager.restore_interrupted_requests()
        if interrupted_requests:
            logger.info(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(interrupted_requests)} –ø—Ä–µ—Ä–≤–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
        
        try:
            while self.is_running and not self.stop_requested:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å
                queue_length = redis_manager.get_queue_length()
                if queue_length == 0:
                    logger.info("üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –æ–∂–∏–¥–∞–Ω–∏–µ...")
                    await asyncio.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥
                    continue
                
                logger.info(f"üìã –ó–∞—è–≤–æ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏: {queue_length}")
                
                # –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞—è–≤–∫—É
                request_data = redis_manager.get_next_request()
                if not request_data:
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É
                await self._process_request(request_data)
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏: {e}")
        finally:
            self.is_running = False
            logger.info("üõë –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    async def _process_request(self, request_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏"""
        claim_number = request_data.get('claim_number', '')
        vin_number = request_data.get('vin_number', '')
        svg_collection = request_data.get('svg_collection', True)
        username = request_data.get('username', '')
        password = request_data.get('password', '')
        
        logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏: {claim_number} | VIN: {vin_number}")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
            from core.database.models import get_moscow_time
            started_at = get_moscow_time()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞
            self.current_parser_task = asyncio.create_task(
                self._run_parser(claim_number, vin_number, svg_collection, username, password, started_at)
            )
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–∞
            try:
                result = await self.current_parser_task
                
                completed_at = get_moscow_time()
                duration = (completed_at - started_at).total_seconds()
                
                if result:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–µ—Ä–∞
                    success = await self._process_parser_result(
                        result, started_at, completed_at, request_data
                    )
                    
                    if success:
                        self.processed_count += 1
                        logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {claim_number} (–≤—Ä–µ–º—è: {duration:.1f}—Å)")
                        redis_manager.mark_request_completed(request_data, success=True)
                    else:
                        self.failed_count += 1
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–∞—Ä—Å–µ—Ä–∞: {claim_number}")
                        
                        # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—É—é
                        redis_manager.mark_request_completed(request_data, success=False)
                else:
                    self.failed_count += 1
                    logger.error(f"‚ùå –ü–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {claim_number}")
                    redis_manager.mark_request_completed(request_data, success=False)
                    

                
            except Exception as e:
                self.failed_count += 1
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ {claim_number}: {e}")
                redis_manager.mark_request_completed(request_data, success=False)
                
        except Exception as e:
            self.failed_count += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ {claim_number}: {e}")
            redis_manager.mark_request_completed(request_data, success=False)
        finally:
            # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –ø–∞—Ä—Å–µ—Ä–∞
            self.current_parser_task = None
    
    async def _run_parser(self, claim_number: str, vin_number: str, svg_collection: bool, username: str, password: str, started_at: datetime = None) -> Optional[Dict[str, Any]]:
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –∑–∞—è–≤–∫–∏"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            result = await login_audatex(username, password, claim_number, vin_number, svg_collection, started_at)
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è {claim_number}: {e}")
            return None
    
    async def _process_parser_result(self, parser_result: Dict[str, Any], 
                                   started_at: datetime, completed_at: datetime,
                                   request_data: Dict[str, Any]) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
        try:
            logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–µ—Ä–∞: {parser_result}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            if "error" in parser_result:
                error_msg = parser_result['error']
                is_cancelled = parser_result.get('cancelled', False)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                if is_cancelled and "–ø—Ä–µ—Ä–≤–∞–Ω –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è" in error_msg:
                    if self.stop_requested:
                        logger.info(f"üõë –ü–∞—Ä—Å–µ—Ä –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {error_msg}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º: {error_msg}")
                elif is_cancelled and "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º" in error_msg:
                    if self.stop_requested:
                        logger.info(f"üõë –ü–∞—Ä—Å–µ—Ä –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {error_msg}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º: {error_msg}")
                else:
                    logger.error(f"‚ùå –ü–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {error_msg}")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–∞—Ä—Å–µ—Ä–∞
            extracted_claim_number = parser_result.get("claim_number", "")
            extracted_vin_number = parser_result.get("vin_value", "")
            
            # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤ —Ç–∞–±—É–ª—è—Ü–∏–∏
            clean_claim_number = extracted_claim_number.strip() if extracted_claim_number else ""
            clean_vin_number = extracted_vin_number.strip() if extracted_vin_number else ""
            
            logger.info(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: claim_number='{extracted_claim_number}' -> '{clean_claim_number}', vin='{extracted_vin_number}' -> '{clean_vin_number}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ
            if not clean_claim_number and not clean_vin_number:
                logger.error("‚ùå –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ - claim_number –∏ vin_number –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–∞–ø–∫–∏
            folder_name = f"{clean_claim_number}_{clean_vin_number}"
            folder_path = f"static/data/{folder_name}"
            
            logger.info(f"üîç –ò—â–µ–º –ø–∞–ø–∫—É: {folder_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
            import os
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–ø–∫–∏ static/data
            base_data_dir = "static/data"
            if not os.path.isdir(base_data_dir):
                logger.error(f"‚ùå –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞ {base_data_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False
            
            if not os.path.isdir(folder_path):
                logger.error(f"‚ùå –ü–∞–ø–∫–∞ {folder_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–ø–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                try:
                    all_folders = [d for d in os.listdir(base_data_dir) if os.path.isdir(os.path.join(base_data_dir, d))]
                    logger.info(f"üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–ø–∫–∏ –≤ {base_data_dir}: {all_folders}")
                except Exception as e:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–∞–ø–∫–∏: {e}")
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–∞–ø–∫—É –ø–æ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
                original_claim = request_data.get('claim_number', '').strip()
                original_vin = request_data.get('vin_number', '').strip()
                
                if original_claim or original_vin:
                    fallback_folder = f"{original_claim}_{original_vin}"
                    fallback_path = f"static/data/{fallback_folder}"
                    logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–∞–ø–∫—É –ø–æ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º: {fallback_path}")
                    
                    if os.path.isdir(fallback_path):
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ –ø–æ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º: {fallback_path}")
                        folder_path = fallback_path
                        folder_name = fallback_folder
                        clean_claim_number = original_claim
                        clean_vin_number = original_vin
                    else:
                        logger.error(f"‚ùå –ü–∞–ø–∫–∞ –ø–æ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º —Ç–æ–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {fallback_path}")
                        return False
                else:
                    return False
            
            # –ò—â–µ–º JSON —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
            json_files = [f for f in os.listdir(folder_path) if f.endswith(".json")]
            logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ JSON —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ {folder_path}: {len(json_files)}")
            
            if not json_files:
                logger.error(f"‚ùå JSON-—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {folder_path}")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                try:
                    all_files = os.listdir(folder_path)
                    logger.error(f"üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ {folder_path}: {all_files}")
                except Exception as e:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏: {e}")
                return False
            
            # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π JSON —Ñ–∞–π–ª
            latest_json = max(json_files, key=lambda f: os.path.getctime(os.path.join(folder_path, f)))
            file_path = os.path.join(folder_path, latest_json)
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω JSON —Ñ–∞–π–ª: {file_path}")
            
            # –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
            import json
            with open(file_path, 'r', encoding='utf-8') as f:
                json_data = json.load(f)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º JSON —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º claim_number
            updated_json = update_json_with_claim_number(json_data, clean_claim_number)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JSON –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
            save_success = await save_updated_json_to_file(updated_json, file_path)
            if not save_success:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JSON: {file_path}")
                return False
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
            db_success = await save_parser_data_to_db(
                updated_json, clean_claim_number, clean_vin_number, 
                is_success=True, started_at=started_at, completed_at=completed_at
            )
            if not db_success:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î: {clean_claim_number}_{clean_vin_number}")
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            return False
    
    def stop_processing(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏"""
        self.is_running = False
        self.stop_requested = True
        logger.info("üõë –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏")
        
        # –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –ø–∞—Ä—Å–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞
        if self.current_parser_task and not self.current_parser_task.done():
            logger.info("üõë –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–µ—Ä–∞")
            self.current_parser_task.cancel()
        
        # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
        redis_manager.clear_queue()
        logger.info("üóëÔ∏è –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞")
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        return {
            "is_running": self.is_running,
            "processed_count": self.processed_count,
            "failed_count": self.failed_count,
            "queue_length": redis_manager.get_queue_length(),
            "processing_count": len(redis_manager.get_processing_requests())
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
queue_processor = QueueProcessor() 