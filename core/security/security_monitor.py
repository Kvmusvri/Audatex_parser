"""
–ú–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""
import asyncio
import json
import logging
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional

from fastapi import Request

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
MONITORING_CONFIG = {
    "alert_threshold": 5,  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–ª–µ—Ä—Ç–∞ (—É–º–µ–Ω—å—à–∏–ª)
    "critical_threshold": 20,  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–µ—Ä—Ç–∞ (—É–º–µ–Ω—å—à–∏–ª)
    "time_window": 300,  # 5 –º–∏–Ω—É—Ç
    "cleanup_interval": 3600,  # 1 —á–∞—Å
    "max_log_entries": 10000,  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–µ
}

# –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
SECURITY_EVENTS = {
    "RATE_LIMIT_EXCEEDED": "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤",
    "IP_BANNED": "IP –∞–¥—Ä–µ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
    "SUSPICIOUS_USER_AGENT": "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π User-Agent",
    "SUSPICIOUS_HEADERS": "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏",
    "SUSPICIOUS_PARAMS": "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
    "SUSPICIOUS_PATH": "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å",
    "HIGH_RISK_REQUEST": "–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –∑–∞–ø—Ä–æ—Å–∞",
    "BRUTE_FORCE_ATTEMPT": "–ü–æ–ø—ã—Ç–∫–∞ –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞",
    "SQL_INJECTION_ATTEMPT": "–ü–æ–ø—ã—Ç–∫–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏",
    "XSS_ATTEMPT": "–ü–æ–ø—ã—Ç–∫–∞ XSS –∞—Ç–∞–∫–∏",
    "PATH_TRAVERSAL_ATTEMPT": "–ü–æ–ø—ã—Ç–∫–∞ path traversal",
    "COMMAND_INJECTION_ATTEMPT": "–ü–æ–ø—ã—Ç–∫–∞ command injection",
    "FILE_UPLOAD_ATTEMPT": "–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞",
    "UNAUTHORIZED_ACCESS": "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø",
    "PRIVILEGE_ESCALATION": "–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π",
}


class SecurityEvent:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, event_type: str, ip: str, details: Dict, risk_score: int = 0):
        self.event_type = event_type
        self.ip = ip
        self.details = details
        self.risk_score = risk_score
        self.timestamp = datetime.utcnow()
        self.id = f"{int(time.time())}_{ip}_{event_type}"
    
    def to_dict(self) -> Dict:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            "id": self.id,
            "event_type": self.event_type,
            "ip": self.ip,
            "details": self.details,
            "risk_score": self.risk_score,
            "timestamp": self.timestamp.isoformat(),
            "description": SECURITY_EVENTS.get(self.event_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ")
        }
    
    def __str__(self) -> str:
        return f"[{self.timestamp}] {self.event_type} - IP: {self.ip}, Risk: {self.risk_score}"


class SecurityMonitor:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.events: List[SecurityEvent] = []
        self.ip_activity: Dict[str, List[SecurityEvent]] = {}
        self.alerts: List[Dict] = []
        self.statistics: Dict = {
            "total_events": 0,
            "blocked_ips": 0,
            "high_risk_events": 0,
            "critical_events": 0,
            "last_cleanup": datetime.utcnow()
        }
        self._cleanup_task: Optional[asyncio.Task] = None
    
    def add_event(self, event: SecurityEvent) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
            self.events.append(event)
            self.statistics["total_events"] += 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ IP
            if event.ip not in self.ip_activity:
                self.ip_activity[event.ip] = []
            self.ip_activity[event.ip].append(event)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if event.risk_score >= 80:
                self.statistics["critical_events"] += 1
            elif event.risk_score >= 50:
                self.statistics["high_risk_events"] += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∞–ª–µ—Ä—Ç–∞
            self._check_alerts(event)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            logger.warning(f"üîí –°–æ–±—ã—Ç–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {event}")
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞
            if len(self.events) > MONITORING_CONFIG["max_log_entries"]:
                self._cleanup_old_events()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
    
    def _check_alerts(self, event: SecurityEvent) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞"""
        try:
            current_time = datetime.utcnow()
            time_window = current_time - timedelta(seconds=MONITORING_CONFIG["time_window"])
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è IP –≤ –æ–∫–Ω–µ –≤—Ä–µ–º–µ–Ω–∏
            ip_events = [
                e for e in self.ip_activity.get(event.ip, [])
                if e.timestamp >= time_window
            ]
            
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è IP {event.ip}: —Å–æ–±—ã—Ç–∏–π={len(ip_events)}, –ø–æ—Ä–æ–≥={MONITORING_CONFIG['alert_threshold']}, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π={MONITORING_CONFIG['critical_threshold']}")
            
            if len(ip_events) >= MONITORING_CONFIG["critical_threshold"]:
                logger.info(f"üö® –°–æ–∑–¥–∞–µ–º –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –∞–ª–µ—Ä—Ç –¥–ª—è IP {event.ip}")
                self._create_alert("CRITICAL", event.ip, ip_events, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
            elif len(ip_events) >= MONITORING_CONFIG["alert_threshold"]:
                logger.info(f"‚ö†Ô∏è –°–æ–∑–¥–∞–µ–º WARNING –∞–ª–µ—Ä—Ç –¥–ª—è IP {event.ip}")
                self._create_alert("WARNING", event.ip, ip_events, "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
    
    def _create_alert(self, level: str, ip: str, events: List[SecurityEvent], message: str) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        try:
            alert = {
                "id": f"alert_{int(time.time())}_{ip}",
                "level": level,
                "ip": ip,
                "message": message,
                "events_count": len(events),
                "timestamp": datetime.utcnow().isoformat(),
                "events": [event.to_dict() for event in events[-10:]]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–±—ã—Ç–∏–π
            }
            
            self.alerts.append(alert)
            logger.info(f"‚úÖ –ê–ª–µ—Ä—Ç —Å–æ–∑–¥–∞–Ω: {level} –¥–ª—è IP {ip}, –≤—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤: {len(self.alerts)}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç
            if level == "CRITICAL":
                logger.critical(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–õ–ï–†–¢: {message} - IP: {ip}, –°–æ–±—ã—Ç–∏–π: {len(events)}")
            else:
                logger.warning(f"‚ö†Ô∏è –ê–õ–ï–†–¢: {message} - IP: {ip}, –°–æ–±—ã—Ç–∏–π: {len(events)}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞: {e}")
    
    def _cleanup_old_events(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        try:
            current_time = datetime.utcnow()
            cutoff_time = current_time - timedelta(seconds=MONITORING_CONFIG["time_window"])
            
            # –û—á–∏—â–∞–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
            self.events = [
                event for event in self.events
                if event.timestamp >= cutoff_time
            ]
            
            # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ IP
            for ip in list(self.ip_activity.keys()):
                self.ip_activity[ip] = [
                    event for event in self.ip_activity[ip]
                    if event.timestamp >= cutoff_time
                ]
                
                # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏
                if not self.ip_activity[ip]:
                    del self.ip_activity[ip]
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∞–ª–µ—Ä—Ç—ã
            alert_cutoff = current_time - timedelta(hours=24)
            self.alerts = [
                alert for alert in self.alerts
                if datetime.fromisoformat(alert["timestamp"]) >= alert_cutoff
            ]
            
            self.statistics["last_cleanup"] = current_time
            logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–±—ã—Ç–∏–π: {len(self.events)}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π: {e}")
    
    async def start_cleanup_task(self) -> None:
        """–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏"""
        if self._cleanup_task is None or self._cleanup_task.done():
            self._cleanup_task = asyncio.create_task(self._cleanup_loop())
    
    async def _cleanup_loop(self) -> None:
        """–¶–∏–∫–ª –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏"""
        while True:
            try:
                await asyncio.sleep(MONITORING_CONFIG["cleanup_interval"])
                self._cleanup_old_events()
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ—á–∏—Å—Ç–∫–∏: {e}")
    
    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            current_time = datetime.utcnow()
            time_window = current_time - timedelta(seconds=MONITORING_CONFIG["time_window"])
            
            # –°–æ–±—ã—Ç–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
            recent_events = [
                event for event in self.events
                if event.timestamp >= time_window
            ]
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ IP
            active_ips = len(self.ip_activity)
            
            # –¢–æ–ø –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö IP
            ip_risk_scores = {}
            for ip, events in self.ip_activity.items():
                recent_ip_events = [
                    event for event in events
                    if event.timestamp >= time_window
                ]
                if recent_ip_events:
                    ip_risk_scores[ip] = sum(event.risk_score for event in recent_ip_events)
            
            top_suspicious_ips = sorted(
                ip_risk_scores.items(),
                key=lambda x: x[1],
                reverse=True
            )[:10]
            
            return {
                "total_events": self.statistics["total_events"],
                "recent_events_count": len(recent_events),
                "active_ips": active_ips,
                "high_risk_events": self.statistics["high_risk_events"],
                "critical_events": self.statistics["critical_events"],
                "alerts_count": len(self.alerts),
                "top_suspicious_ips": top_suspicious_ips,
                "last_cleanup": self.statistics["last_cleanup"].isoformat(),
                "monitoring_window": MONITORING_CONFIG["time_window"]
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    def get_events_for_ip(self, ip: str, limit: int = 100) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ IP"""
        try:
            events = self.ip_activity.get(ip, [])
            return [event.to_dict() for event in events[-limit:]]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –¥–ª—è IP {ip}: {e}")
            return []
    
    def get_recent_alerts(self, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –∞–ª–µ—Ä—Ç–æ–≤: –≤—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤={len(self.alerts)}, –∑–∞–ø—Ä–æ—à–µ–Ω–æ={limit}")
            alerts = self.alerts[-limit:]
            logger.info(f"üîç –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(alerts)} –∞–ª–µ—Ä—Ç–æ–≤")
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            formatted_alerts = []
            for alert in alerts:
                formatted_alert = {
                    "id": alert.get("id", "unknown"),
                    "level": alert.get("level", "INFO"),
                    "ip": alert.get("ip", "unknown"),
                    "message": alert.get("message", "–°–æ–±—ã—Ç–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"),
                    "events_count": alert.get("events_count", 0),
                    "timestamp": alert.get("timestamp", datetime.utcnow().isoformat()),
                    "events": alert.get("events", [])
                }
                formatted_alerts.append(formatted_alert)
            
            logger.info(f"üîç –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(formatted_alerts)} –∞–ª–µ—Ä—Ç–æ–≤")
            return formatted_alerts
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤: {e}")
            return []
    
    def export_events(self, format_type: str = "json") -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–æ–±—ã—Ç–∏–π"""
        try:
            if format_type == "json":
                return json.dumps({
                    "events": [event.to_dict() for event in self.events],
                    "alerts": self.alerts,
                    "statistics": self.get_statistics(),
                    "export_time": datetime.utcnow().isoformat()
                }, indent=2, ensure_ascii=False)
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {format_type}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–æ–±—ã—Ç–∏–π: {e}")
            return ""
    
    def clear_all_events(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        try:
            old_count = len(self.events)
            self.events.clear()
            self.alerts.clear()
            logger.info(f"‚úÖ –û—á–∏—â–µ–Ω–æ {old_count} —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
    
    def clear_all_alerts(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            old_count = len(self.alerts)
            self.alerts.clear()
            logger.info(f"‚úÖ –û—á–∏—â–µ–Ω–æ {old_count} –∞–ª–µ—Ä—Ç–æ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
    
    def create_demo_alerts(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            demo_alerts = [
                {
                    "id": f"demo_alert_{int(time.time())}_1",
                    "level": "CRITICAL",
                    "ip": "192.168.1.100",
                    "message": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞",
                    "events_count": 10,
                    "timestamp": datetime.utcnow().isoformat(),
                    "events": [
                        {
                            "event_type": "BRUTEFORCE_ATTEMPT",
                            "ip": "192.168.1.100",
                            "risk_score": 50,
                            "timestamp": datetime.utcnow().isoformat(),
                            "details": {"attempts": 15}
                        }
                    ]
                },
                {
                    "id": f"demo_alert_{int(time.time())}_2",
                    "level": "WARNING",
                    "ip": "10.0.0.50",
                    "message": "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –ø–æ–ø—ã—Ç–∫–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏",
                    "events_count": 3,
                    "timestamp": datetime.utcnow().isoformat(),
                    "events": [
                        {
                            "event_type": "SQL_INJECTION",
                            "ip": "10.0.0.50",
                            "risk_score": 60,
                            "timestamp": datetime.utcnow().isoformat(),
                            "details": {"query": "SELECT * FROM users"}
                        }
                    ]
                },
                {
                    "id": f"demo_alert_{int(time.time())}_3",
                    "level": "WARNING",
                    "ip": "172.16.0.25",
                    "message": "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –ø–æ–ø—ã—Ç–∫–∞ XSS –∞—Ç–∞–∫–∏",
                    "events_count": 2,
                    "timestamp": datetime.utcnow().isoformat(),
                    "events": [
                        {
                            "event_type": "XSS_ATTEMPT",
                            "ip": "172.16.0.25",
                            "risk_score": 45,
                            "timestamp": datetime.utcnow().isoformat(),
                            "details": {"payload": "<script>"}
                        }
                    ]
                }
            ]
            
            self.alerts.extend(demo_alerts)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(demo_alerts)} –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
security_monitor = SecurityMonitor()

# –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
def create_test_alerts():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if len(security_monitor.events) == 0:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ IP, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–ª–µ—Ä—Ç
            malicious_ip = "192.168.1.100"
            test_events = [
                SecurityEvent("BRUTEFORCE_ATTEMPT", malicious_ip, {"attempts": 15}, 50),
                SecurityEvent("BRUTEFORCE_ATTEMPT", malicious_ip, {"attempts": 16}, 50),
                SecurityEvent("BRUTEFORCE_ATTEMPT", malicious_ip, {"attempts": 17}, 50),
                SecurityEvent("BRUTEFORCE_ATTEMPT", malicious_ip, {"attempts": 18}, 50),
                SecurityEvent("BRUTEFORCE_ATTEMPT", malicious_ip, {"attempts": 19}, 50),
                SecurityEvent("BRUTEFORCE_ATTEMPT", malicious_ip, {"attempts": 20}, 50),
                SecurityEvent("BRUTEFORCE_ATTEMPT", malicious_ip, {"attempts": 21}, 50),
                SecurityEvent("BRUTEFORCE_ATTEMPT", malicious_ip, {"attempts": 22}, 50),
                SecurityEvent("BRUTEFORCE_ATTEMPT", malicious_ip, {"attempts": 23}, 50),
                SecurityEvent("BRUTEFORCE_ATTEMPT", malicious_ip, {"attempts": 24}, 50),
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö IP
                SecurityEvent("SQL_INJECTION", "10.0.0.50", {"query": "SELECT * FROM users"}, 60),
                SecurityEvent("XSS_ATTEMPT", "172.16.0.25", {"payload": "<script>"}, 45),
                SecurityEvent("UNAUTHORIZED_ACCESS", "203.0.113.10", {"path": "/admin"}, 30),
                SecurityEvent("RATE_LIMIT_EXCEEDED", "198.51.100.5", {"requests": 100}, 35)
            ]
            
            for event in test_events:
                security_monitor.add_event(event)
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(test_events)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        else:
            logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: {len(security_monitor.events)} —Å–æ–±—ã—Ç–∏–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: {e}")


def log_security_event(event_type: str, request: Request, details: Dict, risk_score: int = 0) -> None:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å–∞
        client_ip = request.client.host if request.client else "unknown"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP
        for header in ["X-Real-IP", "X-Client-IP", "X-Forwarded-For"]:
            if header in request.headers:
                ip = request.headers[header].split(",")[0].strip()
                if ip and ip != "unknown":
                    client_ip = ip
                    break
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        event = SecurityEvent(
            event_type=event_type,
            ip=client_ip,
            details={
                "path": request.url.path,
                "method": request.method,
                "user_agent": request.headers.get("User-Agent", ""),
                "referer": request.headers.get("Referer", ""),
                "query_params": dict(request.query_params),
                **details
            },
            risk_score=risk_score
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        security_monitor.add_event(event)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")


async def security_monitoring_middleware(request: Request, call_next):
    """Middleware –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    try:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏ —Ä–µ—Å—É—Ä—Å—ã –±—Ä–∞—É–∑–µ—Ä–∞
        if (request.url.path.startswith("/static/") or 
            request.url.path.startswith("/.well-known/") or
            request.url.path == "/favicon.ico" or
            request.url.path == "/robots.txt"):
            return await call_next(request)
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–Ω–æ –Ω–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã)
        if request.url.path == "/security":
            return await call_next(request)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
        if security_monitor._cleanup_task is None or security_monitor._cleanup_task.done():
            await security_monitor.start_cleanup_task()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        response = await call_next(request)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if response.status_code == 401:  # –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
            log_security_event(
                "UNAUTHORIZED_ACCESS",
                request,
                {"status_code": response.status_code, "path": request.url.path},
                risk_score=30
            )
        elif response.status_code == 403:  # –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
            log_security_event(
                "FORBIDDEN_ACCESS",
                request,
                {"status_code": response.status_code, "path": request.url.path},
                risk_score=40
            )
        elif response.status_code == 429:  # Rate limit exceeded
            log_security_event(
                "RATE_LIMIT_EXCEEDED",
                request,
                {"status_code": response.status_code, "path": request.url.path},
                risk_score=25
            )
        # –ù–ï –ª–æ–≥–∏—Ä—É–µ–º 404, 500 –∏ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –∫–∞–∫ —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        
        return response
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ security monitoring middleware: {e}")
        return await call_next(request) 